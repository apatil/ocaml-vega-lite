(* Generated by gen/gen.ml *)

module V2 = struct
module rec
Aggregate:sig
  type t = [ `AggregateOp of AggregateOp.t ]
  val to_yojson : t -> Yojson.Safe.json
end =
struct
  type t = [ `AggregateOp of AggregateOp.t ]

  let to_yojson =
    function
    | `AggregateOp v ->
        ((fun (x : AggregateOp.t)  ->
(AggregateOp.to_yojson x : Yojson.Safe.json))) v       
end
and
AggregateOp:sig
  type t =
    [ `Variancep  | `Variance  | `Values  | `Valid  | `Sum 
    | `Stdevp  | `Stdev  | `Ci1  | `Ci0  | `Q3  | `Q1 
    | `Missing  | `Min  | `Median  | `Mean  | `Max 
    | `Distinct  | `Count  | `Average  | `Argmin  | `Argmax ]
  val to_yojson : t -> Yojson.Safe.json
end =
struct
  type t =
    [ `Variancep  | `Variance  | `Values  | `Valid  | `Sum  | `Stdevp 
    | `Stdev  | `Ci1  | `Ci0  | `Q3  | `Q1  | `Missing  | `Min  | `Median 
    | `Mean  | `Max  | `Distinct  | `Count  | `Average  | `Argmin 
    | `Argmax ]

  let to_yojson =
    function
    | `Variancep -> `String "variancep"
    | `Variance -> `String "variance"
    | `Values -> `String "values"
    | `Valid -> `String "valid"
    | `Sum -> `String "sum"
    | `Stdevp -> `String "stdevp"
    | `Stdev -> `String "stdev"
    | `Ci1 -> `String "ci1"
    | `Ci0 -> `String "ci0"
    | `Q3 -> `String "q3"
    | `Q1 -> `String "q1"
    | `Missing -> `String "missing"
    | `Min -> `String "min"
    | `Median -> `String "median"
    | `Mean -> `String "mean"
    | `Max -> `String "max"
    | `Distinct -> `String "distinct"
    | `Count -> `String "count"
    | `Average -> `String "average"
    | `Argmin -> `String "argmin"
    | `Argmax -> `String "argmax" 
end and
Anchor:sig
  type t = [ `End  | `Middle  | `Start ]
  val to_yojson : t -> Yojson.Safe.json
end =
struct
  type t = [ `End  | `Middle  | `Start ]

  let to_yojson =
    function
    | `End -> `String "end"
    | `Middle -> `String "middle"
    | `Start -> `String "start" 
end and
AndFilter:sig
  type nonrec t = {
and_: FilterOperand.t list }
  val to_yojson : t -> Yojson.Safe.json
  val make : FilterOperand.t list -> t
end =
struct
  type nonrec t = {
and_: FilterOperand.t list }

  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  -> match v with | `Null -> false | _ -> true)
         [("and",
            (((fun (l : FilterOperand.t list)  ->
                 let yojson_of_el (x : FilterOperand.t) =
                   (FilterOperand.to_yojson x : Yojson.Safe.json)
                    in
                 (`List (List.map yojson_of_el l) : Yojson.Safe.json)))
x.and_))])                 
  let make and_ = { and_ } 
end and
AnyMark:sig
  type t =
    [ `MarkDef of MarkDef.t  | `Mark of Mark.t ]
  val to_yojson : t -> Yojson.Safe.json
end =
struct
  type t = [ `MarkDef of MarkDef.t  | `Mark of Mark.t ]

  let to_yojson =
    function
    | `MarkDef v ->
        ((fun (x : MarkDef.t)  ->
            (MarkDef.to_yojson x : Yojson.Safe.json))) v
    | `Mark v ->
        ((fun (x : Mark.t)  ->
(Mark.to_yojson x : Yojson.Safe.json))) v                      
end and
Axis:sig
  type nonrec t =
    {
    zindex: int option ;
    values: Axis_Values_Variant.t option ;
    titlePadding: int option ;
    titleMaxLength: int option ;
    titleAngle: int option ;
    titleAlign: string option ;
    title: string option ;
    ticks: bool option ;
    tickSize: int option ;
    tickCount: int option ;
    position: int option ;
    orient: AxisOrient.t option ;
    offset: int option ;
    minExtent: int option ;
    maxExtent: int option ;
    labels: bool option ;
    labelPadding: int option ;
    labelOverlap:
Axis_LabelOverlap_Variant.t option ;
    labelAngle: int option ;
    grid: bool option ;
    format: string option ;
    domain: bool option }
  val to_yojson : t -> Yojson.Safe.json
  val make :
    ?zindex:int option ->
      ?values:Axis_Values_Variant.t option ->
        ?titlePadding:int option ->
          ?titleMaxLength:int option ->
            ?titleAngle:int option ->
              ?titleAlign:string option ->
                ?title:string option ->
                  ?ticks:bool option ->
                    ?tickSize:int option ->
                      ?tickCount:int option ->
                        ?position:int option ->
                          ?orient:AxisOrient.t
                            option ->
                            ?offset:int option ->
                              ?minExtent:int
                                option ->
                                ?maxExtent:int
                                  option ->
                                  ?labels:bool
                                    option ->
                                    ?labelPadding:int
                                      option ->
                                      ?labelOverlap:Axis_LabelOverlap_Variant.t
                                        option ->
                                        ?labelAngle:int
                                         option ->
                                         ?grid:bool
                                         option ->
                                         ?format:string
                                         option ->
                                         ?domain:bool
                                         option ->
                                         unit -> t
end =
struct
  type nonrec t =
    {
    zindex: int option ;
    values: Axis_Values_Variant.t option ;
    titlePadding: int option ;
    titleMaxLength: int option ;
    titleAngle: int option ;
    titleAlign: string option ;
    title: string option ;
    ticks: bool option ;
    tickSize: int option ;
    tickCount: int option ;
    position: int option ;
    orient: AxisOrient.t option ;
    offset: int option ;
    minExtent: int option ;
    maxExtent: int option ;
    labels: bool option ;
    labelPadding: int option ;
    labelOverlap: Axis_LabelOverlap_Variant.t option ;
    labelAngle: int option ;
    grid: bool option ;
    format: string option ;
    domain: bool option }

  (** Fields
  
    zindex:
      A non-positive integer indicating z-index of the axis.
      If zindex is 0, axes should be drawn behind all chart elements.
      To put them in front, use `"zindex = 1"`.
      
      __Default value:__ `1` (in front of the marks) for actual axis and `0` (behind the marks) for grids.
  
    values:
      Explicitly set the visible axis tick values.
  
    titlePadding:
      The padding, in pixels, between title and axis.
  
    titleMaxLength:
      Max length for axis title if the title is automatically generated from the field's description.
  
    titleAngle:
      Angle in degrees of axis titles.
  
    titleAlign:
      Horizontal text alignment of axis titles.
  
    title:
      A title for the field.
      
      __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`).  If the field has a function, the function is displayed as an all capped text with parentheses wrapping the field name (e.g., `"SUM(field_name)"`, `"BIN(field_name)"`, `"YEAR(field_name)"`).  Otherwise, the title is simply the field name.
  
    ticks:
      Boolean value that determines whether the axis should include ticks.
  
    tickSize:
      The size in pixels of axis ticks.
  
    tickCount:
      A desired number of ticks, for axes visualizing quantitative scales. The resulting number may be different so that values are "nice" (multiples of 2, 5, 10) and lie within the underlying scale's range.
  
    position:
      The anchor position of the axis in pixels. For x-axis with top or bottom orientation, this sets the axis group x coordinate. For y-axis with left or right orientation, this sets the axis group y coordinate.
      
      __Default value__: `0`
  
    orient:
      The orientation of the axis. One of `"top"`, `"bottom"`, `"left"` or `"right"`. The orientation can be used to further specialize the axis type (e.g., a y axis oriented for the right edge of the chart).
      
      __Default value:__ `"bottom"` for x-axes and `"left"` for y-axes.
  
    offset:
      The offset, in pixels, by which to displace the axis from the edge of the enclosing group or data rectangle.
      
      __Default value:__ derived from the [axis config](config.html#facet-scale-config)'s `offset` (`0` by default)
  
    minExtent:
      The minimum extent in pixels that axis ticks and labels should use. This determines a minimum offset value for axis titles.
      
      __Default value:__ `30` for y-axis; `undefined` for x-axis.
  
    maxExtent:
      The maximum extent in pixels that axis ticks and labels should use. This determines a maximum offset value for axis titles.
      
      __Default value:__ `undefined`.
  
    labels:
      A boolean flag indicating if labels should be included as part of the axis.
      
      __Default value:__  `true`.
  
    labelPadding:
      The padding, in pixels, between axis and text labels.
  
    labelOverlap:
      The strategy to use for resolving overlap of axis labels. If `false` (the default), no overlap reduction is attempted. If set to `true` or `"parity"`, a strategy of removing every other label is used (this works well for standard linear axes). If set to `"greedy"`, a linear scan of the labels is performed, removing any labels that overlaps with the last visible label (this often works better for log-scaled axes).
      
      __Default value:__ `true` for non-nominal fields with non-log scales; `"greedy"` for log scales; otherwise `false`.
  
    labelAngle:
      The rotation angle of the axis labels.
      
      __Default value:__ `-90` for nominal, ordinal, temporal, and binned fields; `0` otherwise.
  
    grid:
      A boolean flag indicating if grid lines should be included as part of the axis
      
      __Default value:__ `true` for [continuous scales](scale.html#continuous) that are not binned; otherwise, `false`.
  
    format:
      The formatting pattern for labels. This is D3's [number format pattern](https://github.com/d3/d3-format#locale_format) for quantitative fields and D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format) for time field.
      
      See the [format documentation](format.html) for more information.
      
      __Default value:__  derived from [numberFormat](config.html#format) config for quantitative fields and from [timeFormat](config.html#format) config for temporal fields.
  
    domain:
      A boolean flag indicating if the domain (the axis baseline) should be included as part of the axis.
      
      __Default value:__ `true`
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with | `Null -> false | _ -> true)
         [("domain",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun (b : bool)  ->
                       (`Bool b : Yojson.Safe.json))) v))
               x.domain));
         ("format",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json)))
                    v)) x.format));
         ("grid",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (b : bool)  ->
                      (`Bool b : Yojson.Safe.json))) v))
              x.grid));
         ("labelAngle",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json))) v))
              x.labelAngle));
         ("labelOverlap",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x : Axis_LabelOverlap_Variant.t)
                       ->
                      (Axis_LabelOverlap_Variant.to_yojson
                         x : Yojson.Safe.json))) v))
              x.labelOverlap));
         ("labelPadding",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json))) v))
              x.labelPadding));
         ("labels",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (b : bool)  ->
                      (`Bool b : Yojson.Safe.json))) v))
              x.labels));
         ("maxExtent",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json))) v))
              x.maxExtent));
         ("minExtent",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json))) v))
              x.minExtent));
         ("offset",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json))) v))
              x.offset));
         ("orient",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : AxisOrient.t)  ->
                      (AxisOrient.to_yojson x : 
Yojson.Safe.json))) v)) x.orient));
         ("position",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json))) v))
              x.position));
         ("tickCount",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json))) v))
              x.tickCount));
         ("tickSize",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json))) v))
              x.tickSize));
         ("ticks",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (b : bool)  ->
                      (`Bool b : Yojson.Safe.json))) v))
              x.ticks));
         ("title",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json)))
                    v)) x.title));
         ("titleAlign",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json)))
                    v)) x.titleAlign));
         ("titleAngle",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json))) v))
              x.titleAngle));
         ("titleMaxLength",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json))) v))
              x.titleMaxLength));
         ("titlePadding",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json))) v))
              x.titlePadding));
         ("values",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : Axis_Values_Variant.t)  ->
                      (Axis_Values_Variant.to_yojson x : 
Yojson.Safe.json))) v)) x.values));
         ("zindex",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json))) v))
x.zindex))])                           
  let make ?(zindex= None)  ?(values= None) 
    ?(titlePadding= None)  ?(titleMaxLength= None) 
    ?(titleAngle= None)  ?(titleAlign= None)  ?(title=
None)  ?(ticks= None)  ?(tickSize= None) 
    ?(tickCount= None)  ?(position= None)  ?(orient=
None)  ?(offset= None)  ?(minExtent= None) 
    ?(maxExtent= None)  ?(labels= None) 
    ?(labelPadding= None)  ?(labelOverlap= None) 
    ?(labelAngle= None)  ?(grid= None)  ?(format= None)
     ?(domain= None)  () =
    {
      domain;
      format;
      grid;
      labelAngle;
      labelOverlap;
      labelPadding;
      labels;
      maxExtent;
      minExtent;
      offset;
      orient;
      position;
      tickCount;
      tickSize;
      ticks;
      title;
      titleAlign;
      titleAngle;
      titleMaxLength;
      titlePadding;
      values;
      zindex
    } 
end and
AxisConfig:sig
  type nonrec t =
    {
    titleY: int option ;
    titleX: int option ;
    titlePadding: int option ;
    titleMaxLength: int option ;
    titleLimit: int option ;
    titleFontWeight:
AxisConfig_TitleFontWeight_Variant.t
        option
      ;
    titleFontSize: int option ;
    titleFont: string option ;
    titleColor: string option ;
    titleBaseline: string option ;
    titleAngle: int option ;
    titleAlign: string option ;
    ticks: bool option ;
    tickWidth: int option ;
    tickSize: int option ;
    tickRound: bool option ;
    tickColor: string option ;
    shortTimeLabels: bool option ;
    minExtent: int option ;
    maxExtent: int option ;
    labels: bool option ;
    labelPadding: int option ;
    labelOverlap:
AxisConfig_LabelOverlap_Variant.t
        option
      ;
    labelLimit: int option ;
    labelFontSize: int option ;
    labelFont: string option ;
    labelColor: string option ;
    labelAngle: int option ;
    gridWidth: int option ;
    gridOpacity: int option ;
    gridDash: int list option ;
    gridColor: string option ;
    grid: bool option ;
    domainWidth: int option ;
    domainColor: string option ;
    domain: bool option ;
    bandPosition: int option }
  val to_yojson : t -> Yojson.Safe.json
  val make :
    ?titleY:int option ->
      ?titleX:int option ->
        ?titlePadding:int option ->
          ?titleMaxLength:int option ->
            ?titleLimit:int option ->
              ?titleFontWeight:AxisConfig_TitleFontWeight_Variant.t
                option ->
                ?titleFontSize:int
                  option ->
                  ?titleFont:string
                    option ->
                    ?titleColor:string
                      option ->
                      ?titleBaseline:string
                        option ->
                        ?titleAngle:int
                          option ->
                          ?titleAlign:string
                            option ->
                            ?ticks:bool
                              option ->
                              ?tickWidth:int
                              option ->
                              ?tickSize:int
                              option ->
                              ?tickRound:bool
                              option ->
                              ?tickColor:string
                              option ->
                              ?shortTimeLabels:bool
                              option ->
                              ?minExtent:int
                              option ->
                              ?maxExtent:int
                              option ->
                              ?labels:bool
                              option ->
                              ?labelPadding:int
                              option ->
                              ?labelOverlap:AxisConfig_LabelOverlap_Variant.t
                              option ->
                              ?labelLimit:int
                              option ->
                              ?labelFontSize:int
                              option ->
                              ?labelFont:string
                              option ->
                              ?labelColor:string
                              option ->
                              ?labelAngle:int
                              option ->
                              ?gridWidth:int
                              option ->
                              ?gridOpacity:int
                              option ->
                              ?gridDash:int
                              list
                              option ->
                              ?gridColor:string
                              option ->
                              ?grid:bool
                              option ->
                              ?domainWidth:int
                              option ->
                              ?domainColor:string
                              option ->
                              ?domain:bool
                              option ->
                              ?bandPosition:int
                              option ->
                              unit -> t
end =
struct
  type nonrec t =
    {
    titleY: int option ;
    titleX: int option ;
    titlePadding: int option ;
    titleMaxLength: int option ;
    titleLimit: int option ;
    titleFontWeight:
AxisConfig_TitleFontWeight_Variant.t option ;
    titleFontSize: int option ;
    titleFont: string option ;
    titleColor: string option ;
    titleBaseline: string option ;
    titleAngle: int option ;
    titleAlign: string option ;
    ticks: bool option ;
    tickWidth: int option ;
    tickSize: int option ;
    tickRound: bool option ;
    tickColor: string option ;
    shortTimeLabels: bool option ;
    minExtent: int option ;
    maxExtent: int option ;
    labels: bool option ;
    labelPadding: int option ;
    labelOverlap:
AxisConfig_LabelOverlap_Variant.t option ;
    labelLimit: int option ;
    labelFontSize: int option ;
    labelFont: string option ;
    labelColor: string option ;
    labelAngle: int option ;
    gridWidth: int option ;
    gridOpacity: int option ;
    gridDash: int list option ;
    gridColor: string option ;
    grid: bool option ;
    domainWidth: int option ;
    domainColor: string option ;
    domain: bool option ;
    bandPosition: int option }

  (** Fields
  
    titleY:
      Y-coordinate of the axis title relative to the axis group.
  
    titleX:
      X-coordinate of the axis title relative to the axis group.
  
    titlePadding:
      The padding, in pixels, between title and axis.
  
    titleMaxLength:
      Max length for axis title if the title is automatically generated from the field's description.
  
    titleLimit:
      Maximum allowed pixel width of axis titles.
  
    titleFontWeight:
      Font weight of the title. (e.g., `"bold"`).
  
    titleFontSize:
      Font size of the title.
  
    titleFont:
      Font of the title. (e.g., `"Helvetica Neue"`).
  
    titleColor:
      Color of the title, can be in hex color code or regular color name.
  
    titleBaseline:
      Vertical text baseline for axis titles.
  
    titleAngle:
      Angle in degrees of axis titles.
  
    titleAlign:
      Horizontal text alignment of axis titles.
  
    ticks:
      Boolean value that determines whether the axis should include ticks.
  
    tickWidth:
      The width, in pixels, of ticks.
  
    tickSize:
      The size in pixels of axis ticks.
  
    tickRound:
      Boolean flag indicating if pixel position values should be rounded to the nearest integer.
  
    tickColor:
      The color of the axis's tick.
  
    shortTimeLabels:
      Whether month names and weekday names should be abbreviated.
      
      __Default value:__  `false`
  
    minExtent:
      The minimum extent in pixels that axis ticks and labels should use. This determines a minimum offset value for axis titles.
      
      __Default value:__ `30` for y-axis; `undefined` for x-axis.
  
    maxExtent:
      The maximum extent in pixels that axis ticks and labels should use. This determines a maximum offset value for axis titles.
      
      __Default value:__ `undefined`.
  
    labels:
      A boolean flag indicating if labels should be included as part of the axis.
      
      __Default value:__  `true`.
  
    labelPadding:
      The padding, in pixels, between axis and text labels.
  
    labelOverlap:
      The strategy to use for resolving overlap of axis labels. If `false` (the default), no overlap reduction is attempted. If set to `true` or `"parity"`, a strategy of removing every other label is used (this works well for standard linear axes). If set to `"greedy"`, a linear scan of the labels is performed, removing any labels that overlaps with the last visible label (this often works better for log-scaled axes).
      
      __Default value:__ `true` for non-nominal fields with non-log scales; `"greedy"` for log scales; otherwise `false`.
  
    labelLimit:
      Maximum allowed pixel width of axis tick labels.
  
    labelFontSize:
      The font size of the label, in pixels.
  
    labelFont:
      The font of the tick label.
  
    labelColor:
      The color of the tick label, can be in hex color code or regular color name.
  
    labelAngle:
      The rotation angle of the axis labels.
      
      __Default value:__ `-90` for nominal, ordinal, temporal, and binned fields; `0` otherwise.
  
    gridWidth:
      The grid width, in pixels.
  
    gridOpacity:
      The stroke opacity of grid (value between [0,1])
      
      __Default value:__ (`1` by default)
  
    gridDash:
      The offset (in pixels) into which to begin drawing with the grid dash array.
  
    gridColor:
      Color of gridlines.
  
    grid:
      A boolean flag indicating if grid lines should be included as part of the axis
      
      __Default value:__ `true` for [continuous scales](scale.html#continuous) that are not binned; otherwise, `false`.
  
    domainWidth:
      Stroke width of axis domain line
      
      __Default value:__  (none, using Vega default).
  
    domainColor:
      Color of axis domain line.
      
      __Default value:__  (none, using Vega default).
  
    domain:
      A boolean flag indicating if the domain (the axis baseline) should be included as part of the axis.
      
      __Default value:__ `true`
  
    bandPosition:
      An interpolation fraction indicating where, for `band` scales, axis ticks should be positioned. A value of `0` places ticks at the left edge of their bands. A value of `0.5` places ticks in the middle of their bands.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null -> false
            | _ -> true)
         [("bandPosition",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun (i : int)  ->
                       (`Int i : Yojson.Safe.json)))
                     v)) x.bandPosition));
         ("domain",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (b : bool)  ->
                      (`Bool b : Yojson.Safe.json)))
                    v)) x.domain));
         ("domainColor",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json)))
                    v)) x.domainColor));
         ("domainWidth",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.domainWidth));
         ("grid",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (b : bool)  ->
                      (`Bool b : Yojson.Safe.json)))
                    v)) x.grid));
         ("gridColor",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json)))
                    v)) x.gridColor));
         ("gridDash",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (l : int list)  ->
                      let yojson_of_el (i : int) =
                        (`Int i : Yojson.Safe.json)
                         in
                      (`List
                         (List.map yojson_of_el l) : 
Yojson.Safe.json))) v))
              x.gridDash));
         ("gridOpacity",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.gridOpacity));
         ("gridWidth",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.gridWidth));
         ("labelAngle",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.labelAngle));
         ("labelColor",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json)))
                    v)) x.labelColor));
         ("labelFont",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json)))
                    v)) x.labelFont));
         ("labelFontSize",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.labelFontSize));
         ("labelLimit",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.labelLimit));
         ("labelOverlap",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
AxisConfig_LabelOverlap_Variant.t)
                       ->
                      (AxisConfig_LabelOverlap_Variant.to_yojson
                         x : Yojson.Safe.json))) v))
              x.labelOverlap));
         ("labelPadding",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.labelPadding));
         ("labels",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (b : bool)  ->
                      (`Bool b : Yojson.Safe.json)))
                    v)) x.labels));
         ("maxExtent",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.maxExtent));
         ("minExtent",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.minExtent));
         ("shortTimeLabels",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (b : bool)  ->
                      (`Bool b : Yojson.Safe.json)))
                    v)) x.shortTimeLabels));
         ("tickColor",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json)))
                    v)) x.tickColor));
         ("tickRound",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (b : bool)  ->
                      (`Bool b : Yojson.Safe.json)))
                    v)) x.tickRound));
         ("tickSize",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.tickSize));
         ("tickWidth",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.tickWidth));
         ("ticks",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (b : bool)  ->
                      (`Bool b : Yojson.Safe.json)))
                    v)) x.ticks));
         ("titleAlign",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json)))
                    v)) x.titleAlign));
         ("titleAngle",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.titleAngle));
         ("titleBaseline",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json)))
                    v)) x.titleBaseline));
         ("titleColor",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json)))
                    v)) x.titleColor));
         ("titleFont",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json)))
                    v)) x.titleFont));
         ("titleFontSize",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.titleFontSize));
         ("titleFontWeight",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
AxisConfig_TitleFontWeight_Variant.t)
                       ->
                      (AxisConfig_TitleFontWeight_Variant.to_yojson
                         x : Yojson.Safe.json))) v))
              x.titleFontWeight));
         ("titleLimit",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.titleLimit));
         ("titleMaxLength",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.titleMaxLength));
         ("titlePadding",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.titlePadding));
         ("titleX",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.titleX));
         ("titleY",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
v)) x.titleY))])                                
  let make ?(titleY= None)  ?(titleX= None) 
    ?(titlePadding= None)  ?(titleMaxLength= None)
     ?(titleLimit= None)  ?(titleFontWeight= None)
     ?(titleFontSize= None)  ?(titleFont= None) 
    ?(titleColor= None)  ?(titleBaseline= None) 
    ?(titleAngle= None)  ?(titleAlign= None) 
    ?(ticks= None)  ?(tickWidth= None) 
    ?(tickSize= None)  ?(tickRound= None) 
    ?(tickColor= None)  ?(shortTimeLabels= None) 
    ?(minExtent= None)  ?(maxExtent= None) 
    ?(labels= None)  ?(labelPadding= None) 
    ?(labelOverlap= None)  ?(labelLimit= None) 
    ?(labelFontSize= None)  ?(labelFont= None) 
    ?(labelColor= None)  ?(labelAngle= None) 
    ?(gridWidth= None)  ?(gridOpacity= None) 
    ?(gridDash= None)  ?(gridColor= None)  ?(grid=
None)  ?(domainWidth= None)  ?(domainColor=
None)  ?(domain= None)  ?(bandPosition= None) 
    () =
    {
      bandPosition;
      domain;
      domainColor;
      domainWidth;
      grid;
      gridColor;
      gridDash;
      gridOpacity;
      gridWidth;
      labelAngle;
      labelColor;
      labelFont;
      labelFontSize;
      labelLimit;
      labelOverlap;
      labelPadding;
      labels;
      maxExtent;
      minExtent;
      shortTimeLabels;
      tickColor;
      tickRound;
      tickSize;
      tickWidth;
      ticks;
      titleAlign;
      titleAngle;
      titleBaseline;
      titleColor;
      titleFont;
      titleFontSize;
      titleFontWeight;
      titleLimit;
      titleMaxLength;
      titlePadding;
      titleX;
      titleY
    } 
end and
AxisConfigMixins:sig
  type nonrec t =
    {
    axisY:
VgAxisConfig.t option ;
    axisX:
VgAxisConfig.t option ;
    axisTop:
VgAxisConfig.t option ;
    axisRight:
VgAxisConfig.t option ;
    axisLeft:
VgAxisConfig.t option ;
    axisBottom:
VgAxisConfig.t option ;
    axisBand:
VgAxisConfig.t option ;
    axis:
AxisConfig.t option }
  val to_yojson :
    t -> Yojson.Safe.json
  val make :
    ?axisY:VgAxisConfig.t
      option ->
      ?axisX:VgAxisConfig.t
        option ->
        ?axisTop:VgAxisConfig.t
          option ->
          ?axisRight:VgAxisConfig.t
            option ->
            ?axisLeft:VgAxisConfig.t
              option ->
              ?axisBottom:VgAxisConfig.t
                option ->
                ?axisBand:VgAxisConfig.t
                  option ->
                  ?axis:AxisConfig.t
                   option ->
                   unit -> t
end =
struct
  type nonrec t =
    {
    axisY: VgAxisConfig.t option ;
    axisX: VgAxisConfig.t option ;
    axisTop: VgAxisConfig.t option ;
    axisRight: VgAxisConfig.t option ;
    axisLeft: VgAxisConfig.t option ;
    axisBottom: VgAxisConfig.t option ;
    axisBand: VgAxisConfig.t option ;
    axis: AxisConfig.t option }

  (** Fields
  
    axisY:
      Y-axis specific config.
  
    axisX:
      X-axis specific config.
  
    axisTop:
      Specific axis config for x-axis along the top edge of the chart.
  
    axisRight:
      Specific axis config for y-axis along the right edge of the chart.
  
    axisLeft:
      Specific axis config for y-axis along the left edge of the chart.
  
    axisBottom:
      Specific axis config for x-axis along the bottom edge of the chart.
  
    axisBand:
      Specific axis config for axes with "band" scales.
  
    axis:
      Axis configuration, which determines default properties for all `x` and `y` [axes](axis.html). For a full list of axis configuration options, please see the [corresponding section of the axis documentation](axis.html#axis-config).
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null -> false
            | _ -> true)
         [("axis",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun (x : AxisConfig.t) 
                       ->
                       (AxisConfig.to_yojson
                          x : Yojson.Safe.json)))
                     v)) x.axis));
         ("axisBand",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : VgAxisConfig.t) 
                      ->
                      (VgAxisConfig.to_yojson
                         x : Yojson.Safe.json)))
                    v)) x.axisBand));
         ("axisBottom",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : VgAxisConfig.t) 
                      ->
                      (VgAxisConfig.to_yojson
                         x : Yojson.Safe.json)))
                    v)) x.axisBottom));
         ("axisLeft",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : VgAxisConfig.t) 
                      ->
                      (VgAxisConfig.to_yojson
                         x : Yojson.Safe.json)))
                    v)) x.axisLeft));
         ("axisRight",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : VgAxisConfig.t) 
                      ->
                      (VgAxisConfig.to_yojson
                         x : Yojson.Safe.json)))
                    v)) x.axisRight));
         ("axisTop",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : VgAxisConfig.t) 
                      ->
                      (VgAxisConfig.to_yojson
                         x : Yojson.Safe.json)))
                    v)) x.axisTop));
         ("axisX",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : VgAxisConfig.t) 
                      ->
                      (VgAxisConfig.to_yojson
                         x : Yojson.Safe.json)))
                    v)) x.axisX));
         ("axisY",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : VgAxisConfig.t) 
                      ->
                      (VgAxisConfig.to_yojson
                         x : Yojson.Safe.json)))
v)) x.axisY))])                                     
  let make ?(axisY= None)  ?(axisX= None) 
    ?(axisTop= None)  ?(axisRight= None) 
    ?(axisLeft= None)  ?(axisBottom= None) 
    ?(axisBand= None)  ?(axis= None)  () =
    {
      axis;
      axisBand;
      axisBottom;
      axisLeft;
      axisRight;
      axisTop;
      axisX;
      axisY
    } 
end and
AxisConfig_LabelOverlap_Variant:
                                     sig
  type t =
    [ `Boolean of bool  | `Parity 
    | `Greedy ]
  val to_yojson : t -> Yojson.Safe.json
end =
struct
  type t =
    [ `Boolean of bool  | `Parity 
    | `Greedy ]

  let to_yojson =
    function
    | `Boolean v ->
        ((fun (b : bool)  ->
            (`Bool b : Yojson.Safe.json)))
          v
    | `Parity -> `String "parity"
    | `Greedy -> `String "greedy" 
end and
AxisConfig_TitleFontWeight_Variant:
                                          sig
  type t =
    [ `String of string 
    | `Num of int ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [ `String of string 
    | `Num of int ]

  let to_yojson =
    function
    | `String v ->
        ((fun (s : string)  ->
            (`String s : Yojson.Safe.json)))
          v
    | `Num v ->
        ((fun (i : int)  ->
            (`Int i : Yojson.Safe.json)))
v                                               
end and
AxisOrient:sig
  type t =
    [ `Bottom 
    | `Left 
    | `Right 
    | `Top ]
  val to_yojson :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [ `Bottom  | `Left 
    | `Right  | `Top ]

  let to_yojson =
    function
    | `Bottom ->
        `String "bottom"
    | `Left -> `String "left"
    | `Right ->
        `String "right"
    | `Top -> `String "top" 
end and
AxisResolveMap:sig
 type nonrec t =
 {
 y:
ResolveMode.t
 option ;
 x:
ResolveMode.t
 option }
 val
 to_yojson
 :
 t ->
Yojson.Safe.json
 val make
 :
 ?y:ResolveMode.t
 option ->
 ?x:ResolveMode.t
 option ->
 unit -> t
end =
struct
  type nonrec t =
    {
    y:
ResolveMode.t
        option
      ;
    x:
ResolveMode.t
        option
      }

  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null ->
                false
            | _ -> true)
         [("x",
            (((function
               | 
None  ->
                `Null
               | 
Some v ->
                ((fun
                (x :
ResolveMode.t)
                 ->
                (ResolveMode.to_yojson
                x : Yojson.Safe.json)))
                v)) x.x));
         ("y",
           (((function
              | None  ->
                `Null
              | Some v ->
                ((fun
                (x :
ResolveMode.t)
                 ->
                (ResolveMode.to_yojson
                x : Yojson.Safe.json)))
v)) x.y))])                                                         
  let make ?(y= None) 
    ?(x= None)  () =
    { x; y } 
end and
Axis_LabelOverlap_Variant:
                                                         sig
  type t =
    [
      `Boolean of
        bool 
    | `Parity 
    | `Greedy ]
  val to_yojson :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [
      `Boolean of
        bool 
    | `Parity 
    | `Greedy ]

  let to_yojson =
    function
    | `Boolean v ->
        ((fun
           (b :
           bool)  ->
           (`Bool b : 
Yojson.Safe.json)))
          v
    | `Parity ->
        `String
          "parity"
    | `Greedy ->
        `String
"greedy"                                                              
end and
Axis_Values_Variant:
                                                              sig
  type t =
    [
      `DateTime_List
      of
DateTime.t
      list 
    | `Number_List
      of
      int list ]
  val to_yojson
    :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [
      `DateTime_List
      of
DateTime.t
      list 
    | `Number_List
      of
      int list ]

  let to_yojson
    =
    function
    | `DateTime_List
      v ->
      ((fun
      (l :
DateTime.t
      list)  ->
      let yojson_of_el
      (x :
DateTime.t)
      =
      (DateTime.to_yojson
      x : 
Yojson.Safe.json)
       in
      (`List
      (List.map
      yojson_of_el
      l) : 
Yojson.Safe.json)))
      v
    | `Number_List
      v ->
      ((fun
      (l :
      int list)
       ->
      let yojson_of_el
      (i : int)
      =
      (`Int i : 
Yojson.Safe.json)
       in
      (`List
      (List.map
      yojson_of_el
      l) : 
Yojson.Safe.json)))
v                                                                   
end and
BarConfig:
                                                                   sig
 type nonrec t =
 {
 theta:
 int
 option ;
 text:
 string
 option ;
 tension:
 int
 option ;
 strokeWidth:
 int
 option ;
 strokeOpacity:
 int
 option ;
 strokeDashOffset:
 int
 option ;
 strokeDash:
 int list
 option ;
 stroke:
 string
 option ;
 size:
 int
 option ;
 shape:
 string
 option ;
 radius:
 int
 option ;
 orient:
Orient.t
 option ;
 opacity:
 int
 option ;
 limit:
 int
 option ;
 interpolate:
Interpolate.t
 option ;
 fontWeight:
BarConfig_FontWeight_Variant.t
 option ;
 fontStyle:
FontStyle.t
 option ;
 fontSize:
 int
 option ;
 font:
 string
 option ;
 filled:
 bool
 option ;
 fillOpacity:
 int
 option ;
 fill:
 string
 option ;
 dy:
 int
 option ;
 dx:
 int
 option ;
 discreteBandSize:
 int
 option ;
 continuousBandSize:
 int
 option ;
 color:
 string
 option ;
 binSpacing:
 int
 option ;
 baseline:
VerticalAlign.t
 option ;
 angle:
 int
 option ;
 align:
HorizontalAlign.t
 option }
 val
 to_yojson
 :
 t ->
Yojson.Safe.json
 val make
 :
 ?theta:int
 option ->
 ?text:string
 option ->
 ?tension:int
 option ->
 ?strokeWidth:int
 option ->
 ?strokeOpacity:int
 option ->
 ?strokeDashOffset:int
 option ->
 ?strokeDash:int
 list
 option ->
 ?stroke:string
 option ->
 ?size:int
 option ->
 ?shape:string
 option ->
 ?radius:int
 option ->
 ?orient:Orient.t
 option ->
 ?opacity:int
 option ->
 ?limit:int
 option ->
 ?interpolate:Interpolate.t
 option ->
 ?fontWeight:BarConfig_FontWeight_Variant.t
 option ->
 ?fontStyle:FontStyle.t
 option ->
 ?fontSize:int
 option ->
 ?font:string
 option ->
 ?filled:bool
 option ->
 ?fillOpacity:int
 option ->
 ?fill:string
 option ->
 ?dy:int
 option ->
 ?dx:int
 option ->
 ?discreteBandSize:int
 option ->
 ?continuousBandSize:int
 option ->
 ?color:string
 option ->
 ?binSpacing:int
 option ->
 ?baseline:VerticalAlign.t
 option ->
 ?angle:int
 option ->
 ?align:HorizontalAlign.t
 option ->
 unit -> t
end =
struct
 type nonrec t =
 {
 theta:
 int
 option ;
 text:
 string
 option ;
 tension:
 int
 option ;
 strokeWidth:
 int
 option ;
 strokeOpacity:
 int
 option ;
 strokeDashOffset:
 int
 option ;
 strokeDash:
 int list
 option ;
 stroke:
 string
 option ;
 size:
 int
 option ;
 shape:
 string
 option ;
 radius:
 int
 option ;
 orient:
Orient.t
 option ;
 opacity:
 int
 option ;
 limit:
 int
 option ;
 interpolate:
Interpolate.t
 option ;
 fontWeight:
BarConfig_FontWeight_Variant.t
 option ;
 fontStyle:
FontStyle.t
 option ;
 fontSize:
 int
 option ;
 font:
 string
 option ;
 filled:
 bool
 option ;
 fillOpacity:
 int
 option ;
 fill:
 string
 option ;
 dy:
 int
 option ;
 dx:
 int
 option ;
 discreteBandSize:
 int
 option ;
 continuousBandSize:
 int
 option ;
 color:
 string
 option ;
 binSpacing:
 int
 option ;
 baseline:
VerticalAlign.t
 option ;
 angle:
 int
 option ;
 align:
HorizontalAlign.t
 option }

  (** Fields
  
    theta:
      Polar coordinate angle, in radians, of the text label from the origin determined by the `x` and `y` properties. Values for `theta` follow the same convention of `arc` mark `startAngle` and `endAngle` properties: angles are measured in radians, with `0` indicating "north".
  
    text:
      Placeholder text if the `text` channel is not specified
  
    tension:
      Depending on the interpolation type, sets the tension parameter (for line and area marks).
  
    strokeWidth:
      The stroke width, in pixels.
  
    strokeOpacity:
      The stroke opacity (value between [0,1]).
      
      __Default value:__ `1`
  
    strokeDashOffset:
      The offset (in pixels) into which to begin drawing with the stroke dash array.
  
    strokeDash:
      An array of alternating stroke, space lengths for creating dashed or dotted lines.
  
    stroke:
      Default Stroke Color.  This has higher precedence than config.color
      
      __Default value:__ (None)
  
    size:
      The pixel area each the point/circle/square.
      For example: in the case of circles, the radius is determined in part by the square root of the size value.
      
      __Default value:__ `30`
  
    shape:
      The default symbol shape to use. One of: `"circle"` (default), `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`, or `"triangle-down"`, or a custom SVG path.
      
      __Default value:__ `"circle"`
  
    radius:
      Polar coordinate radial offset, in pixels, of the text label from the origin determined by the `x` and `y` properties.
  
    orient:
      The orientation of a non-stacked bar, tick, area, and line charts.
      The value is either horizontal (default) or vertical.
      - For bar, rule and tick, this determines whether the size of the bar and tick
      should be applied to x or y dimension.
      - For area, this property determines the orient property of the Vega output.
      - For line, this property determines the sort order of the points in the line
      if `config.sortLineBy` is not specified.
      For stacked charts, this is always determined by the orientation of the stack;
      therefore explicitly specified value will be ignored.
  
    opacity:
      The overall opacity (value between [0,1]).
      
      __Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.
  
    limit:
      The maximum length of the text mark in pixels (default 0, indicating no limit). The text value will be automatically truncated if the rendered size exceeds the limit.
  
    interpolate:
      The line interpolation method to use for line and area marks. One of the following:
      - `"linear"`: piecewise linear segments, as in a polyline.
      - `"linear-closed"`: close the linear segments to form a polygon.
      - `"step"`: alternate between horizontal and vertical segments, as in a step function.
      - `"step-before"`: alternate between vertical and horizontal segments, as in a step function.
      - `"step-after"`: alternate between horizontal and vertical segments, as in a step function.
      - `"basis"`: a B-spline, with control point duplication on the ends.
      - `"basis-open"`: an open B-spline; may not intersect the start or end.
      - `"basis-closed"`: a closed B-spline, as in a loop.
      - `"cardinal"`: a Cardinal spline, with control point duplication on the ends.
      - `"cardinal-open"`: an open Cardinal spline; may not intersect the start or end, but will intersect other control points.
      - `"cardinal-closed"`: a closed Cardinal spline, as in a loop.
      - `"bundle"`: equivalent to basis, except the tension parameter is used to straighten the spline.
      - `"monotone"`: cubic interpolation that preserves monotonicity in y.
  
    fontWeight:
      The font weight (e.g., `"bold"`).
  
    fontStyle:
      The font style (e.g., `"italic"`).
  
    fontSize:
      The font size, in pixels.
  
    font:
      The typeface to set the text in (e.g., `"Helvetica Neue"`).
  
    filled:
      Whether the mark's color should be used as fill color instead of stroke color.
      
      __Default value:__ `true` for all marks except `point` and `false` for `point`.
      
      __Applicable for:__ `bar`, `point`, `circle`, `square`, and `area` marks.
  
    fillOpacity:
      The fill opacity (value between [0,1]).
      
      __Default value:__ `1`
  
    fill:
      Default Fill Color.  This has higher precedence than config.color
      
      __Default value:__ (None)
  
    dy:
      The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.
  
    dx:
      The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.
  
    discreteBandSize:
      The size of the bars.  If unspecified, the default size is  `bandSize-1`,
      which provides 1 pixel offset between bars.
  
    continuousBandSize:
      The default size of the bars on continuous scales.
      
      __Default value:__ `2`
  
    color:
      Default color.  Note that `fill` and `stroke` have higher precedence than `color` and will override `color`.
      
      __Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`
  
    binSpacing:
      Offset between bar for binned field.  Ideal value for this is either 0 (Preferred by statisticians) or 1 (Vega-Lite Default, D3 example style).
      
      __Default value:__ `1`
  
    baseline:
      The vertical alignment of the text. One of `"top"`, `"middle"`, `"bottom"`.
      
      __Default value:__ `"middle"`
  
    angle:
      The rotation angle of the text, in degrees.
  
    align:
      The horizontal alignment of the text. One of `"left"`, `"right"`, `"center"`.
  *)
 let to_yojson
 x =
 `Assoc
 (List.filter
 (fun
 (k,v)  ->
 match v
 with
 | 
 `Null ->
 false
 | 
 _ -> true)
 [
 ("align",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
HorizontalAlign.t)
  ->
 (HorizontalAlign.to_yojson
 x : Yojson.Safe.json)))
 v))
 x.align));
 ("angle",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
 x.angle));
 ("baseline",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
VerticalAlign.t)
  ->
 (VerticalAlign.to_yojson
 x : Yojson.Safe.json)))
 v))
 x.baseline));
 ("binSpacing",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
 x.binSpacing));
 ("color",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (s :
 string) 
 ->
 (`String
 s : Yojson.Safe.json)))
 v))
 x.color));
 ("continuousBandSize",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
 x.continuousBandSize));
 ("discreteBandSize",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
 x.discreteBandSize));
 ("dx",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v)) x.dx));
 ("dy",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v)) x.dy));
 ("fill",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (s :
 string) 
 ->
 (`String
 s : Yojson.Safe.json)))
 v))
 x.fill));
 ("fillOpacity",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
 x.fillOpacity));
 ("filled",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (b :
 bool)  ->
 (`Bool b : 
Yojson.Safe.json)))
 v))
 x.filled));
 ("font",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (s :
 string) 
 ->
 (`String
 s : Yojson.Safe.json)))
 v))
 x.font));
 ("fontSize",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
 x.fontSize));
 ("fontStyle",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
FontStyle.t)
  ->
 (FontStyle.to_yojson
 x : Yojson.Safe.json)))
 v))
 x.fontStyle));
 ("fontWeight",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
BarConfig_FontWeight_Variant.t)
  ->
 (BarConfig_FontWeight_Variant.to_yojson
 x : Yojson.Safe.json)))
 v))
 x.fontWeight));
 ("interpolate",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
Interpolate.t)
  ->
 (Interpolate.to_yojson
 x : Yojson.Safe.json)))
 v))
 x.interpolate));
 ("limit",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
 x.limit));
 ("opacity",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
 x.opacity));
 ("orient",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
Orient.t)
  ->
 (Orient.to_yojson
 x : Yojson.Safe.json)))
 v))
 x.orient));
 ("radius",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
 x.radius));
 ("shape",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (s :
 string) 
 ->
 (`String
 s : Yojson.Safe.json)))
 v))
 x.shape));
 ("size",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
 x.size));
 ("stroke",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (s :
 string) 
 ->
 (`String
 s : Yojson.Safe.json)))
 v))
 x.stroke));
 ("strokeDash",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (l :
 int list)
  ->
 let yojson_of_el
 (i : int)
 =
 (`Int i : 
Yojson.Safe.json)
  in
 (`List
 (List.map
 yojson_of_el
 l) : 
Yojson.Safe.json)))
 v))
 x.strokeDash));
 ("strokeDashOffset",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
 x.strokeDashOffset));
 ("strokeOpacity",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
 x.strokeOpacity));
 ("strokeWidth",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
 x.strokeWidth));
 ("tension",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
 x.tension));
 ("text",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (s :
 string) 
 ->
 (`String
 s : Yojson.Safe.json)))
 v))
 x.text));
 ("theta",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
x.theta))])                                                                     
 let make
 ?(theta=
None) 
 ?(text=
None) 
 ?(tension=
None) 
 ?(strokeWidth=
None) 
 ?(strokeOpacity=
None) 
 ?(strokeDashOffset=
None) 
 ?(strokeDash=
None) 
 ?(stroke=
None) 
 ?(size=
None) 
 ?(shape=
None) 
 ?(radius=
None) 
 ?(orient=
None) 
 ?(opacity=
None) 
 ?(limit=
None) 
 ?(interpolate=
None) 
 ?(fontWeight=
None) 
 ?(fontStyle=
None) 
 ?(fontSize=
None) 
 ?(font=
None) 
 ?(filled=
None) 
 ?(fillOpacity=
None) 
 ?(fill=
None) 
 ?(dy=
None) 
 ?(dx=
None) 
 ?(discreteBandSize=
None) 
 ?(continuousBandSize=
None) 
 ?(color=
None) 
 ?(binSpacing=
None) 
 ?(baseline=
None) 
 ?(angle=
None) 
 ?(align=
None)  ()
 =
 {
 align;
 angle;
 baseline;
 binSpacing;
 color;
 continuousBandSize;
 discreteBandSize;
 dx;
 dy;
 fill;
 fillOpacity;
 filled;
 font;
 fontSize;
 fontStyle;
 fontWeight;
 interpolate;
 limit;
 opacity;
 orient;
 radius;
 shape;
 size;
 stroke;
 strokeDash;
 strokeDashOffset;
 strokeOpacity;
 strokeWidth;
 tension;
 text;
 theta
 } 
end
and
BarConfig_FontWeight_Variant:sig
  type t =
    [ `FontWeightNumber of FontWeightNumber.t 
    | `FontWeight of FontWeight.t ]
  val to_yojson : t -> Yojson.Safe.json
end =
struct
  type t =
    [ `FontWeightNumber of FontWeightNumber.t 
    | `FontWeight of FontWeight.t ]

  let to_yojson =
    function
    | `FontWeightNumber v ->
        ((fun (x : FontWeightNumber.t)  ->
            (FontWeightNumber.to_yojson x : Yojson.Safe.json))) v
    | `FontWeight v ->
        ((fun (x : FontWeight.t)  ->
(FontWeight.to_yojson x : Yojson.Safe.json))) v       
end and
BaseBin:sig
  type nonrec t =
    {
    steps: int list option ;
    step: int option ;
    nice: bool option ;
    minstep: int option ;
    maxbins: int option ;
    divide: int list option ;
    base: int option }
  val to_yojson : t -> Yojson.Safe.json
  val make :
    ?steps:int list option ->
      ?step:int option ->
        ?nice:bool option ->
          ?minstep:int option ->
            ?maxbins:int option ->
              ?divide:int list option ->
                ?base:int option -> unit -> t
end =
struct
  type nonrec t =
    {
    steps: int list option ;
    step: int option ;
    nice: bool option ;
    minstep: int option ;
    maxbins: int option ;
    divide: int list option ;
    base: int option }

  (** Fields
  
    steps:
      An array of allowable step sizes to choose from.
  
    step:
      An exact step size to use between bins.
      
      __Note:__ If provided, options such as maxbins will be ignored.
  
    nice:
      If true (the default), attempts to make the bin boundaries use human-friendly boundaries, such as multiples of ten.
  
    minstep:
      A minimum allowable step size (particularly useful for integer values).
  
    maxbins:
      Maximum number of bins.
      
      __Default value:__ `6` for `row`, `column` and `shape` channels; `10` for other channels
  
    divide:
      Scale factors indicating allowable subdivisions. The default value is [5, 2], which indicates that for base 10 numbers (the default base), the method may consider dividing bin sizes by 5 and/or 2. For example, for an initial step size of 10, the method can check if bin sizes of 2 (= 10/5), 5 (= 10/2), or 1 (= 10/(5*2)) might also satisfy the given constraints.
      
      __Default value:__ `[5, 2]`
  
    base:
      The number base to use for automatic bin determination (default is base 10).
      
      __Default value:__ `10`
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  -> match v with | `Null -> false | _ -> true)
         [("base",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun (i : int)  -> (`Int i : Yojson.Safe.json))) v))
               x.base));
         ("divide",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (l : int list)  ->
                      let yojson_of_el (i : int) =
                        (`Int i : Yojson.Safe.json)  in
                      (`List (List.map yojson_of_el l) : Yojson.Safe.json)))
                    v)) x.divide));
         ("maxbins",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json))) v))
              x.maxbins));
         ("minstep",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json))) v))
              x.minstep));
         ("nice",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (b : bool)  -> (`Bool b : Yojson.Safe.json)))
                    v)) x.nice));
         ("step",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json))) v))
              x.step));
         ("steps",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (l : int list)  ->
                      let yojson_of_el (i : int) =
                        (`Int i : Yojson.Safe.json)  in
                      (`List (List.map yojson_of_el l) : Yojson.Safe.json)))
v)) x.steps))])            
  let make ?(steps= None)  ?(step= None)  ?(nice= None)  ?(minstep=
None)  ?(maxbins= None)  ?(divide= None)  ?(base= None)  () =
    { base; divide; maxbins; minstep; nice; step; steps } 
end and
BaseSelectionDef:sig
  type nonrec t =
    {
    resolve: SelectionResolution.t option ;
    on: VgEventStream.t option ;
    fields: string list option ;
    encodings: SingleDefChannel.t list option }
  val to_yojson : t -> Yojson.Safe.json
  val make :
    ?resolve:SelectionResolution.t option ->
      ?on:VgEventStream.t option ->
        ?fields:string list option ->
          ?encodings:SingleDefChannel.t list
            option -> unit -> t
end =
struct
  type nonrec t =
    {
    resolve: SelectionResolution.t option ;
    on: VgEventStream.t option ;
    fields: string list option ;
    encodings: SingleDefChannel.t list option }

  (** Fields
  
    resolve:
      With layered and multi-view displays, a strategy that determines how
      selections' data queries are resolved when applied in a filter transform,
      conditional encoding rule, or scale domain.
  
    on:
      A [Vega event stream](https://vega.github.io/vega/docs/event-streams/) (object or selector) that triggers the selection.
      For interval selections, the event stream must specify a [start and end](https://vega.github.io/vega/docs/event-streams/#between-filters).
  
    fields:
      An array of field names whose values must match for a data tuple to
      fall within the selection.
  
    encodings:
      An array of encoding channels. The corresponding data field values
      must match for a data tuple to fall within the selection.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  -> match v with | `Null -> false | _ -> true)
         [("encodings",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun (l : SingleDefChannel.t list)  ->
                       let yojson_of_el (x : SingleDefChannel.t)
                         =
                         (SingleDefChannel.to_yojson x : 
Yojson.Safe.json)  in
                       (`List (List.map yojson_of_el l) : 
Yojson.Safe.json))) v)) x.encodings));
         ("fields",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (l : string list)  ->
                      let yojson_of_el (s : string) =
                        (`String s : Yojson.Safe.json)  in
                      (`List (List.map yojson_of_el l) : 
Yojson.Safe.json))) v)) x.fields));
         ("on",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : VgEventStream.t)  ->
                      (VgEventStream.to_yojson x : Yojson.Safe.json)))
                    v)) x.on));
         ("resolve",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : SelectionResolution.t)  ->
                      (SelectionResolution.to_yojson x : 
Yojson.Safe.json))) v)) x.resolve))])                 
  let make ?(resolve= None)  ?(on= None)  ?(fields= None) 
    ?(encodings= None)  () = { encodings; fields; on; resolve } 
end and
BaseSpec:sig
  type nonrec t =
    {
    transform: Transform.t list option ;
    title: BaseSpec_Title_Variant.t option ;
    name: string option ;
    description: string option ;
    data: Data.t option }
  val to_yojson : t -> Yojson.Safe.json
  val make :
    ?transform:Transform.t list option ->
      ?title:BaseSpec_Title_Variant.t option ->
        ?name:string option ->
          ?description:string option ->
            ?data:Data.t option -> unit -> t
end =
struct
  type nonrec t =
    {
    transform: Transform.t list option ;
    title: BaseSpec_Title_Variant.t option ;
    name: string option ;
    description: string option ;
    data: Data.t option }

  (** Fields
  
    transform:
      An array of data transformations such as filter and new field calculation.
  
    title:
      Title for the plot.
  
    name:
      Name of the visualization for later reference.
  
    description:
      An optional description of this mark for commenting purpose.
  
    data:
      An object describing the data source
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with | `Null -> false | _ -> true)
         [("data",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun (x : Data.t)  ->
                       (Data.to_yojson x : Yojson.Safe.json)))
                     v)) x.data));
         ("description",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json))) v))
              x.description));
         ("name",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json))) v))
              x.name));
         ("title",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : BaseSpec_Title_Variant.t)  ->
                      (BaseSpec_Title_Variant.to_yojson x : 
Yojson.Safe.json))) v)) x.title));
         ("transform",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (l : Transform.t list)  ->
                      let yojson_of_el (x : Transform.t) =
                        (Transform.to_yojson x : Yojson.Safe.json)
                         in
                      (`List (List.map yojson_of_el l) : 
Yojson.Safe.json))) v)) x.transform))])                      
  let make ?(transform= None)  ?(title= None)  ?(name= None)
     ?(description= None)  ?(data= None)  () =
    { data; description; name; title; transform } 
end and
BaseSpec_Title_Variant:sig
  type t =
    [
      `TitleParams of
TitleParams.t 
    | `String of string ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [ `TitleParams of TitleParams.t 
    | `String of string ]

  let to_yojson =
    function
    | `TitleParams v ->
        ((fun (x : TitleParams.t)  ->
            (TitleParams.to_yojson x : Yojson.Safe.json)))
          v
    | `String v ->
        ((fun (s : string)  ->
(`String s : Yojson.Safe.json))) v                           
end and
BinParams:sig
  type nonrec t =
    {
    steps: int list option ;
    step: int option ;
    nice: bool option ;
    minstep: int option ;
    maxbins: int option ;
    extent: int list option ;
    divide: int list option ;
    base: int option }
  val to_yojson : t -> Yojson.Safe.json
  val make :
    ?steps:int list option ->
      ?step:int option ->
        ?nice:bool option ->
          ?minstep:int option ->
            ?maxbins:int option ->
              ?extent:int list option ->
                ?divide:int list option
                  ->
                  ?base:int option ->
                    unit -> t
end =
struct
  type nonrec t =
    {
    steps: int list option ;
    step: int option ;
    nice: bool option ;
    minstep: int option ;
    maxbins: int option ;
    extent: int list option ;
    divide: int list option ;
    base: int option }

  (** Binning properties or boolean flag for determining whether to bin data or not.
  
  
  Fields:
  
    steps:
      An array of allowable step sizes to choose from.
  
    step:
      An exact step size to use between bins.
      
      __Note:__ If provided, options such as maxbins will be ignored.
  
    nice:
      If true (the default), attempts to make the bin boundaries use human-friendly boundaries, such as multiples of ten.
  
    minstep:
      A minimum allowable step size (particularly useful for integer values).
  
    maxbins:
      Maximum number of bins.
      
      __Default value:__ `6` for `row`, `column` and `shape` channels; `10` for other channels
  
    extent:
      A two-element (`[min, max]`) array indicating the range of desired bin values.
  
    divide:
      Scale factors indicating allowable subdivisions. The default value is [5, 2], which indicates that for base 10 numbers (the default base), the method may consider dividing bin sizes by 5 and/or 2. For example, for an initial step size of 10, the method can check if bin sizes of 2 (= 10/5), 5 (= 10/2), or 1 (= 10/(5*2)) might also satisfy the given constraints.
      
      __Default value:__ `[5, 2]`
  
    base:
      The number base to use for automatic bin determination (default is base 10).
      
      __Default value:__ `10`
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null -> false
            | _ -> true)
         [("base",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun (i : int)  ->
                       (`Int i : Yojson.Safe.json)))
                     v)) x.base));
         ("divide",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (l : int list)  ->
                      let yojson_of_el (i : int) =
                        (`Int i : Yojson.Safe.json)
                         in
                      (`List
                         (List.map yojson_of_el l) : 
Yojson.Safe.json))) v))
              x.divide));
         ("extent",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (l : int list)  ->
                      let yojson_of_el (i : int) =
                        (`Int i : Yojson.Safe.json)
                         in
                      (`List
                         (List.map yojson_of_el l) : 
Yojson.Safe.json))) v))
              x.extent));
         ("maxbins",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.maxbins));
         ("minstep",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.minstep));
         ("nice",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (b : bool)  ->
                      (`Bool b : Yojson.Safe.json)))
                    v)) x.nice));
         ("step",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.step));
         ("steps",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (l : int list)  ->
                      let yojson_of_el (i : int) =
                        (`Int i : Yojson.Safe.json)
                         in
                      (`List
                         (List.map yojson_of_el l) : 
Yojson.Safe.json))) v))
x.steps))])                                
  let make ?(steps= None)  ?(step= None)  ?(nice=
None)  ?(minstep= None)  ?(maxbins= None) 
    ?(extent= None)  ?(divide= None)  ?(base=
None)  () =
    {
      base;
      divide;
      extent;
      maxbins;
      minstep;
      nice;
      step;
      steps
    } 
end and
BinTransform:sig
  type nonrec t =
    {
    field: string ;
    bin:
BinTransform_Bin_Variant.t ;
    as_: string }
  val to_yojson :
    t -> Yojson.Safe.json
  val make :
    string ->
BinTransform_Bin_Variant.t
        -> string -> t
end =
struct
  type nonrec t =
    {
    field: string ;
    bin: BinTransform_Bin_Variant.t ;
    as_: string }

  (** Fields
  
    field:
      The data field to bin.
  
    bin:
      An object indicating bin properties, or simply `true` for using default bin parameters.
  
    as:
      The output fields at which to write the start and end bin values.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null -> false
            | _ -> true)
         [("as",
            (((fun (s : string)  ->
                 (`String s : Yojson.Safe.json)))
               x.as_));
         ("bin",
           (((fun
                (x :
BinTransform_Bin_Variant.t)
                 ->
                (BinTransform_Bin_Variant.to_yojson
                   x : Yojson.Safe.json)))
              x.bin));
         ("field",
           (((fun (s : string)  ->
                (`String s : Yojson.Safe.json)))
x.field))])                                     
  let make field bin as_ =
    { as_; bin; field } 
end and
BinTransform_Bin_Variant:sig
  type t =
    [
      `BinParams
      of
BinParams.t
       | 
      `Boolean
      of 
      bool ]
  val to_yojson
    :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [ `BinParams of BinParams.t 
    | `Boolean of bool ]

  let to_yojson =
    function
    | `BinParams v ->
        ((fun (x : BinParams.t)  ->
            (BinParams.to_yojson x : 
Yojson.Safe.json))) v
    | `Boolean v ->
        ((fun (b : bool)  ->
            (`Bool b : Yojson.Safe.json)))
v                                          
end and
BoxPlotConfig:sig
  type nonrec t =
    {
    theta: int option ;
    text:
      string option ;
    tension:
      int option ;
    strokeWidth:
      int option ;
    strokeOpacity:
      int option ;
    strokeDashOffset:
      int option ;
    strokeDash:
      int list option ;
    stroke:
      string option ;
    size: int option ;
    shape:
      string option ;
    radius:
      int option ;
    orient:
Orient.t option ;
    opacity:
      int option ;
    limit: int option ;
    interpolate:
Interpolate.t
        option
      ;
    fontWeight:
BoxPlotConfig_FontWeight_Variant.t
        option
      ;
    fontStyle:
FontStyle.t
        option
      ;
    fontSize:
      int option ;
    font:
      string option ;
    filled:
      bool option ;
    fillOpacity:
      int option ;
    fill:
      string option ;
    dy: int option ;
    dx: int option ;
    color:
      string option ;
    baseline:
VerticalAlign.t
        option
      ;
    angle: int option ;
    align:
HorizontalAlign.t
        option
      }
  val to_yojson :
    t ->
Yojson.Safe.json
  val make :
    ?theta:int option
      ->
      ?text:string
        option ->
        ?tension:int
          option ->
          ?strokeWidth:int
            option ->
            ?strokeOpacity:int
            option ->
            ?strokeDashOffset:int
            option ->
            ?strokeDash:int
            list
            option ->
            ?stroke:string
            option ->
            ?size:int
            option ->
            ?shape:string
            option ->
            ?radius:int
            option ->
            ?orient:Orient.t
            option ->
            ?opacity:int
            option ->
            ?limit:int
            option ->
            ?interpolate:Interpolate.t
            option ->
            ?fontWeight:BoxPlotConfig_FontWeight_Variant.t
            option ->
            ?fontStyle:FontStyle.t
            option ->
            ?fontSize:int
            option ->
            ?font:string
            option ->
            ?filled:bool
            option ->
            ?fillOpacity:int
            option ->
            ?fill:string
            option ->
            ?dy:int
            option ->
            ?dx:int
            option ->
            ?color:string
            option ->
            ?baseline:VerticalAlign.t
            option ->
            ?angle:int
            option ->
            ?align:HorizontalAlign.t
            option ->
            unit -> t
end =
struct
  type nonrec t =
    {
    theta: int option ;
    text: string option ;
    tension: int option ;
    strokeWidth: int option ;
    strokeOpacity: int option ;
    strokeDashOffset: int option ;
    strokeDash: int list option ;
    stroke: string option ;
    size: int option ;
    shape: string option ;
    radius: int option ;
    orient: Orient.t option ;
    opacity: int option ;
    limit: int option ;
    interpolate:
Interpolate.t option ;
    fontWeight:
BoxPlotConfig_FontWeight_Variant.t
        option
      ;
    fontStyle: FontStyle.t option ;
    fontSize: int option ;
    font: string option ;
    filled: bool option ;
    fillOpacity: int option ;
    fill: string option ;
    dy: int option ;
    dx: int option ;
    color: string option ;
    baseline:
VerticalAlign.t option ;
    angle: int option ;
    align: HorizontalAlign.t option }

  (** Fields
  
    theta:
      Polar coordinate angle, in radians, of the text label from the origin determined by the `x` and `y` properties. Values for `theta` follow the same convention of `arc` mark `startAngle` and `endAngle` properties: angles are measured in radians, with `0` indicating "north".
  
    text:
      Placeholder text if the `text` channel is not specified
  
    tension:
      Depending on the interpolation type, sets the tension parameter (for line and area marks).
  
    strokeWidth:
      The stroke width, in pixels.
  
    strokeOpacity:
      The stroke opacity (value between [0,1]).
      
      __Default value:__ `1`
  
    strokeDashOffset:
      The offset (in pixels) into which to begin drawing with the stroke dash array.
  
    strokeDash:
      An array of alternating stroke, space lengths for creating dashed or dotted lines.
  
    stroke:
      Default Stroke Color.  This has higher precedence than config.color
      
      __Default value:__ (None)
  
    size:
      Size of the box and mid tick of a box plot 
  
    shape:
      The default symbol shape to use. One of: `"circle"` (default), `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`, or `"triangle-down"`, or a custom SVG path.
      
      __Default value:__ `"circle"`
  
    radius:
      Polar coordinate radial offset, in pixels, of the text label from the origin determined by the `x` and `y` properties.
  
    orient:
      The orientation of a non-stacked bar, tick, area, and line charts.
      The value is either horizontal (default) or vertical.
      - For bar, rule and tick, this determines whether the size of the bar and tick
      should be applied to x or y dimension.
      - For area, this property determines the orient property of the Vega output.
      - For line, this property determines the sort order of the points in the line
      if `config.sortLineBy` is not specified.
      For stacked charts, this is always determined by the orientation of the stack;
      therefore explicitly specified value will be ignored.
  
    opacity:
      The overall opacity (value between [0,1]).
      
      __Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.
  
    limit:
      The maximum length of the text mark in pixels (default 0, indicating no limit). The text value will be automatically truncated if the rendered size exceeds the limit.
  
    interpolate:
      The line interpolation method to use for line and area marks. One of the following:
      - `"linear"`: piecewise linear segments, as in a polyline.
      - `"linear-closed"`: close the linear segments to form a polygon.
      - `"step"`: alternate between horizontal and vertical segments, as in a step function.
      - `"step-before"`: alternate between vertical and horizontal segments, as in a step function.
      - `"step-after"`: alternate between horizontal and vertical segments, as in a step function.
      - `"basis"`: a B-spline, with control point duplication on the ends.
      - `"basis-open"`: an open B-spline; may not intersect the start or end.
      - `"basis-closed"`: a closed B-spline, as in a loop.
      - `"cardinal"`: a Cardinal spline, with control point duplication on the ends.
      - `"cardinal-open"`: an open Cardinal spline; may not intersect the start or end, but will intersect other control points.
      - `"cardinal-closed"`: a closed Cardinal spline, as in a loop.
      - `"bundle"`: equivalent to basis, except the tension parameter is used to straighten the spline.
      - `"monotone"`: cubic interpolation that preserves monotonicity in y.
  
    fontWeight:
      The font weight (e.g., `"bold"`).
  
    fontStyle:
      The font style (e.g., `"italic"`).
  
    fontSize:
      The font size, in pixels.
  
    font:
      The typeface to set the text in (e.g., `"Helvetica Neue"`).
  
    filled:
      Whether the mark's color should be used as fill color instead of stroke color.
      
      __Default value:__ `true` for all marks except `point` and `false` for `point`.
      
      __Applicable for:__ `bar`, `point`, `circle`, `square`, and `area` marks.
  
    fillOpacity:
      The fill opacity (value between [0,1]).
      
      __Default value:__ `1`
  
    fill:
      Default Fill Color.  This has higher precedence than config.color
      
      __Default value:__ (None)
  
    dy:
      The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.
  
    dx:
      The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.
  
    color:
      Default color.  Note that `fill` and `stroke` have higher precedence than `color` and will override `color`.
      
      __Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`
  
    baseline:
      The vertical alignment of the text. One of `"top"`, `"middle"`, `"bottom"`.
      
      __Default value:__ `"middle"`
  
    angle:
      The rotation angle of the text, in degrees.
  
    align:
      The horizontal alignment of the text. One of `"left"`, `"right"`, `"center"`.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null -> false
            | _ -> true)
         [("align",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun
                       (x :
HorizontalAlign.t)
                        ->
                       (HorizontalAlign.to_yojson
                          x : 
Yojson.Safe.json)))
                     v)) x.align));
         ("angle",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int) 
                      ->
                      (`Int i : 
Yojson.Safe.json)))
                    v)) x.angle));
         ("baseline",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
VerticalAlign.t)
                       ->
                      (VerticalAlign.to_yojson
                         x : 
Yojson.Safe.json)))
                    v)) x.baseline));
         ("color",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (s : string) 
                      ->
                      (`String s : 
Yojson.Safe.json)))
                    v)) x.color));
         ("dx",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int) 
                      ->
                      (`Int i : 
Yojson.Safe.json)))
                    v)) x.dx));
         ("dy",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int) 
                      ->
                      (`Int i : 
Yojson.Safe.json)))
                    v)) x.dy));
         ("fill",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (s : string) 
                      ->
                      (`String s : 
Yojson.Safe.json)))
                    v)) x.fill));
         ("fillOpacity",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int) 
                      ->
                      (`Int i : 
Yojson.Safe.json)))
                    v))
              x.fillOpacity));
         ("filled",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (b : bool) 
                      ->
                      (`Bool b : 
Yojson.Safe.json)))
                    v)) x.filled));
         ("font",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (s : string) 
                      ->
                      (`String s : 
Yojson.Safe.json)))
                    v)) x.font));
         ("fontSize",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int) 
                      ->
                      (`Int i : 
Yojson.Safe.json)))
                    v)) x.fontSize));
         ("fontStyle",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
FontStyle.t)
                       ->
                      (FontStyle.to_yojson
                         x : 
Yojson.Safe.json)))
                    v)) x.fontStyle));
         ("fontWeight",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
BoxPlotConfig_FontWeight_Variant.t)
                       ->
                      (BoxPlotConfig_FontWeight_Variant.to_yojson
                         x : 
Yojson.Safe.json)))
                    v))
              x.fontWeight));
         ("interpolate",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
Interpolate.t)
                       ->
                      (Interpolate.to_yojson
                         x : 
Yojson.Safe.json)))
                    v))
              x.interpolate));
         ("limit",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int) 
                      ->
                      (`Int i : 
Yojson.Safe.json)))
                    v)) x.limit));
         ("opacity",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int) 
                      ->
                      (`Int i : 
Yojson.Safe.json)))
                    v)) x.opacity));
         ("orient",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
Orient.t)
                       ->
                      (Orient.to_yojson
                         x : 
Yojson.Safe.json)))
                    v)) x.orient));
         ("radius",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int) 
                      ->
                      (`Int i : 
Yojson.Safe.json)))
                    v)) x.radius));
         ("shape",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (s : string) 
                      ->
                      (`String s : 
Yojson.Safe.json)))
                    v)) x.shape));
         ("size",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int) 
                      ->
                      (`Int i : 
Yojson.Safe.json)))
                    v)) x.size));
         ("stroke",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (s : string) 
                      ->
                      (`String s : 
Yojson.Safe.json)))
                    v)) x.stroke));
         ("strokeDash",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (l :
                        int list)
                       ->
                      let yojson_of_el
                        (i : int) =
                        (`Int i : 
Yojson.Safe.json)
                         in
                      (`List
                         (List.map
                          yojson_of_el
                          l) : 
Yojson.Safe.json)))
                    v))
              x.strokeDash));
         ("strokeDashOffset",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int) 
                      ->
                      (`Int i : 
Yojson.Safe.json)))
                    v))
              x.strokeDashOffset));
         ("strokeOpacity",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int) 
                      ->
                      (`Int i : 
Yojson.Safe.json)))
                    v))
              x.strokeOpacity));
         ("strokeWidth",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int) 
                      ->
                      (`Int i : 
Yojson.Safe.json)))
                    v))
              x.strokeWidth));
         ("tension",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int) 
                      ->
                      (`Int i : 
Yojson.Safe.json)))
                    v)) x.tension));
         ("text",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (s : string) 
                      ->
                      (`String s : 
Yojson.Safe.json)))
                    v)) x.text));
         ("theta",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int) 
                      ->
                      (`Int i : 
Yojson.Safe.json)))
v)) x.theta))])                                               
  let make ?(theta= None)  ?(text=
None)  ?(tension= None) 
    ?(strokeWidth= None) 
    ?(strokeOpacity= None) 
    ?(strokeDashOffset= None) 
    ?(strokeDash= None)  ?(stroke=
None)  ?(size= None)  ?(shape=
None)  ?(radius= None) 
    ?(orient= None)  ?(opacity=
None)  ?(limit= None) 
    ?(interpolate= None) 
    ?(fontWeight= None) 
    ?(fontStyle= None)  ?(fontSize=
None)  ?(font= None)  ?(filled=
None)  ?(fillOpacity= None) 
    ?(fill= None)  ?(dy= None) 
    ?(dx= None)  ?(color= None) 
    ?(baseline= None)  ?(angle=
None)  ?(align= None)  () =
    {
      align;
      angle;
      baseline;
      color;
      dx;
      dy;
      fill;
      fillOpacity;
      filled;
      font;
      fontSize;
      fontStyle;
      fontWeight;
      interpolate;
      limit;
      opacity;
      orient;
      radius;
      shape;
      size;
      stroke;
      strokeDash;
      strokeDashOffset;
      strokeOpacity;
      strokeWidth;
      tension;
      text;
      theta
    } 
end and
BoxPlotConfigMixins:sig
 type nonrec t =
 {
 boxWhisker:
MarkConfig.t
 option ;
 boxMid:
MarkConfig.t
 option ;
 box:
BoxPlotConfig.t
 option }
 val
 to_yojson
 :
 t ->
Yojson.Safe.json
 val make
 :
 ?boxWhisker:MarkConfig.t
 option ->
 ?boxMid:MarkConfig.t
 option ->
 ?box:BoxPlotConfig.t
 option ->
 unit -> t
end =
struct
  type nonrec t =
    {
    boxWhisker:
MarkConfig.t option ;
    boxMid:
MarkConfig.t option ;
    box:
BoxPlotConfig.t option }

  (** Fields
  
    box:
      Box Config 
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null -> false
            | _ -> true)
         [("box",
            (((function
               | None  ->
                   `Null
               | Some v ->
                   ((fun
                     (x :
BoxPlotConfig.t)
                      ->
                     (BoxPlotConfig.to_yojson
                     x : 
Yojson.Safe.json)))
                     v)) x.box));
         ("boxMid",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                     (x :
MarkConfig.t)
                      ->
                     (MarkConfig.to_yojson
                     x : 
Yojson.Safe.json)))
                    v))
              x.boxMid));
         ("boxWhisker",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                     (x :
MarkConfig.t)
                      ->
                     (MarkConfig.to_yojson
                     x : 
Yojson.Safe.json)))
                    v))
x.boxWhisker))])                                                    
  let make ?(boxWhisker= None)
     ?(boxMid= None)  ?(box=
None)  () =
    { box; boxMid; boxWhisker
    } 
end and
BoxPlotConfig_FontWeight_Variant:
                                                    sig
  type t =
    [
      `FontWeightNumber
        of
FontWeightNumber.t
         | `FontWeight of
FontWeight.t ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [
      `FontWeightNumber
        of
FontWeightNumber.t
         | `FontWeight of
FontWeight.t ]

  let to_yojson =
    function
    | `FontWeightNumber v
        ->
        ((fun
            (x :
FontWeightNumber.t)
             ->
            (FontWeightNumber.to_yojson
               x : 
Yojson.Safe.json)))
          v
    | `FontWeight v ->
        ((fun
            (x :
FontWeight.t)
             ->
            (FontWeight.to_yojson
               x : 
Yojson.Safe.json)))
v                                                         
end and
BrushConfig:
                                                         sig
  type nonrec t =
    {
    strokeWidth:
      int option ;
    strokeOpacity:
      int option ;
    strokeDashOffset:
      int option ;
    strokeDash:
      int list
        option
      ;
    stroke:
      string option ;
    fillOpacity:
      int option ;
    fill:
      string option }
  val to_yojson :
    t ->
Yojson.Safe.json
  val make :
    ?strokeWidth:int
      option ->
      ?strokeOpacity:int
        option ->
        ?strokeDashOffset:int
          option ->
          ?strokeDash:int
           list
           option ->
           ?stroke:string
           option ->
           ?fillOpacity:int
           option ->
           ?fill:string
           option ->
           unit -> t
end =
struct
  type nonrec t =
    {
    strokeWidth:
      int option ;
    strokeOpacity:
      int option ;
    strokeDashOffset:
      int option ;
    strokeDash:
      int list
        option
      ;
    stroke:
      string option ;
    fillOpacity:
      int option ;
    fill:
      string option }

  (** Fields
  
    strokeWidth:
      The stroke width of the interval mark.
  
    strokeOpacity:
      The stroke opacity of the interval mark (a value between 0 and 1).
  
    strokeDashOffset:
      The offset (in pixels) with which to begin drawing the stroke dash array.
  
    strokeDash:
      An array of alternating stroke and space lengths,
      for creating dashed or dotted lines.
  
    stroke:
      The stroke color of the interval mark.
      
      __Default value:__ `#ffffff`
  
    fillOpacity:
      The fill opacity of the interval mark (a value between 0 and 1).
      
      __Default value:__ `0.125`
  
    fill:
      The fill color of the interval mark.
      
      __Default value:__ `#333333`
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun 
           (k,v)  ->
           match v
           with
           | 
           `Null ->
           false
           | 
           _ -> true)
         [("fill",
           (((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (s :
           string) 
           ->
           (`String
           s : Yojson.Safe.json)))
           v))
           x.fill));
         ("fillOpacity",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (i : int)
            ->
           (`Int i : 
Yojson.Safe.json)))
           v))
           x.fillOpacity));
         ("stroke",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (s :
           string) 
           ->
           (`String
           s : Yojson.Safe.json)))
           v))
           x.stroke));
         ("strokeDash",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (l :
           int list)
            ->
           let yojson_of_el
           (i : int)
           =
           (`Int i : 
Yojson.Safe.json)
            in
           (`List
           (List.map
           yojson_of_el
           l) : 
Yojson.Safe.json)))
           v))
           x.strokeDash));
         ("strokeDashOffset",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (i : int)
            ->
           (`Int i : 
Yojson.Safe.json)))
           v))
           x.strokeDashOffset));
         ("strokeOpacity",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (i : int)
            ->
           (`Int i : 
Yojson.Safe.json)))
           v))
           x.strokeOpacity));
         ("strokeWidth",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (i : int)
            ->
           (`Int i : 
Yojson.Safe.json)))
           v))
x.strokeWidth))])                                                              
  let make
    ?(strokeWidth=
None) 
    ?(strokeOpacity=
None) 
    ?(strokeDashOffset=
None) 
    ?(strokeDash=
None)  ?(stroke=
None) 
    ?(fillOpacity=
None)  ?(fill=
None)  () =
    {
      fill;
      fillOpacity;
      stroke;
      strokeDash;
      strokeDashOffset;
      strokeOpacity;
      strokeWidth
    } 
end and
CalculateTransform:
                                                              sig
  type nonrec t =
    {
    calculate:
      string ;
    as_: string }
  val to_yojson
    :
    t ->
Yojson.Safe.json
  val make :
    string ->
      string ->
      t
end =
struct
  type nonrec t =
    {
    calculate:
      string ;
    as_: string }

  (** Fields
  
    calculate:
      A string containing a Vega Expression. Use the variable `datum` to refer to the current data object.
  
    as:
      The field for storing the computed formula value.
  *)
  let to_yojson
    x =
    `Assoc
      (
List.filter
      (fun
      (k,v)  ->
      match v
      with
      | 
      `Null ->
      false
      | 
      _ -> true)
      [
      ("as",
      (((fun
      (s :
      string) 
      ->
      (`String
      s : Yojson.Safe.json)))
      x.as_));
      ("calculate",
      (((fun
      (s :
      string) 
      ->
      (`String
      s : Yojson.Safe.json)))
x.calculate))])                                                                   
  let make
    calculate
    as_ =
    {
      as_;
      calculate
    } 
end and
CompositeMarkConfigMixins:
                                                                   sig
 type t =
BoxPlotConfigMixins.t
 val
 to_yojson
 :
 t ->
Yojson.Safe.json
end =
struct
 type t =
BoxPlotConfigMixins.t

 let to_yojson
 (x :
BoxPlotConfigMixins.t)
 =
 (BoxPlotConfigMixins.to_yojson
 x : 
Yojson.Safe.json)                                                                     
end
and
CompositeUnitSpec:sig
  type t = CompositeUnitSpecAlias.t
  val to_yojson : t -> Yojson.Safe.json
end =
struct
  type t = CompositeUnitSpecAlias.t

  let to_yojson (x : CompositeUnitSpecAlias.t) =
    (CompositeUnitSpecAlias.to_yojson x : Yojson.Safe.json) 
end and
CompositeUnitSpecAlias:sig
  type nonrec t =
    {
    width: int option ;
    transform: Transform.t list option ;
    title:
CompositeUnitSpecAlias_Title_Variant.t
        option
      ;
    selection:
CompositeUnitSpecAlias_Selection_Record.t
        option
      ;
    name: string option ;
    mark: AnyMark.t ;
    height: int option ;
    encoding: Encoding.t ;
    description: string option ;
    data: Data.t option }
  val to_yojson : t -> Yojson.Safe.json
  val make :
    ?width:int option ->
      ?transform:Transform.t list option ->
        ?title:CompositeUnitSpecAlias_Title_Variant.t
          option ->
          ?selection:CompositeUnitSpecAlias_Selection_Record.t
            option ->
            ?name:string option ->
              ?height:int option ->
                ?description:string option ->
                  ?data:Data.t option ->
AnyMark.t ->
Encoding.t -> t
end =
struct
  type nonrec t =
    {
    width: int option ;
    transform: Transform.t list option ;
    title: CompositeUnitSpecAlias_Title_Variant.t option ;
    selection: CompositeUnitSpecAlias_Selection_Record.t option ;
    name: string option ;
    mark: AnyMark.t ;
    height: int option ;
    encoding: Encoding.t ;
    description: string option ;
    data: Data.t option }

  (** Fields
  
    width:
      The width of a visualization.
      
      __Default value:__ This will be determined by the following rules:
      
      - For x-axis with a continuous (non-ordinal) scale, the width will be the value of [`config.view.width`](spec.html#config).
      - For x-axis with an ordinal scale: if [`rangeStep`](scale.html#ordinal) is a numeric value (default), the width is determined by the value of `rangeStep` and the cardinality of the field mapped to x-channel.   Otherwise, if the `rangeStep` is `null`, the width will be the value of [`config.view.width`](spec.html#config).
      - If no field is mapped to `x` channel, the `width` will be the value of [`config.scale.textXRangeStep`](size.html#default-width-and-height) for `text` mark and the value of `rangeStep` for other marks.
      
      __Note:__ For plot with `row` and `column` channels, this represents the width of a single view.
      
      __See also:__ The documentation for [width and height](size.html) contains more examples.
  
    transform:
      An array of data transformations such as filter and new field calculation.
  
    title:
      Title for the plot.
  
    selection:
      A key-value mapping between selection names and definitions.
  
    name:
      Name of the visualization for later reference.
  
    mark:
      A string describing the mark type (one of `"bar"`, `"circle"`, `"square"`, `"tick"`, `"line"`,
      `"area"`, `"point"`, `"rule"`, and `"text"`) or a [mark definition object](mark.html#mark-def).
  
    height:
      The height of a visualization.
      
      __Default value:__
      - For y-axis with a continuous (non-ordinal) scale, the height will be the value of [`config.view.height`](spec.html#config).
      - For y-axis with an ordinal scale: if [`rangeStep`](scale.html#ordinal) is a numeric value (default), the height is determined by the value of `rangeStep` and the cardinality of the field mapped to y-channel.   Otherwise, if the `rangeStep` is `null`, the height will be the value of [`config.view.height`](spec.html#config).
      - If no field is mapped to `x` channel, the `height` will be the value of `rangeStep`.
      
      __Note__: For plot with `row` and `column` channels, this represents the height of a single view.
      
      __See also:__ The documentation for [width and height](size.html) contains more examples.
  
    encoding:
      A key-value mapping between encoding channels and definition of fields.
  
    description:
      An optional description of this mark for commenting purpose.
  
    data:
      An object describing the data source
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  -> match v with | `Null -> false | _ -> true)
         [("data",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun (x : Data.t)  ->
                       (Data.to_yojson x : Yojson.Safe.json))) v))
               x.data));
         ("description",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json))) v))
              x.description));
         ("encoding",
           (((fun (x : Encoding.t)  ->
                (Encoding.to_yojson x : Yojson.Safe.json))) x.encoding));
         ("height",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json))) v))
              x.height));
         ("mark",
           (((fun (x : AnyMark.t)  ->
                (AnyMark.to_yojson x : Yojson.Safe.json))) x.mark));
         ("name",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json))) v)) x.name));
         ("selection",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x : CompositeUnitSpecAlias_Selection_Record.t) 
                      ->
                      (CompositeUnitSpecAlias_Selection_Record.to_yojson
                         x : Yojson.Safe.json))) v)) x.selection));
         ("title",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : CompositeUnitSpecAlias_Title_Variant.t) 
                      ->
                      (CompositeUnitSpecAlias_Title_Variant.to_yojson
                         x : Yojson.Safe.json))) v)) x.title));
         ("transform",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (l : Transform.t list)  ->
                      let yojson_of_el (x : Transform.t) =
                        (Transform.to_yojson x : Yojson.Safe.json)  in
                      (`List (List.map yojson_of_el l) : Yojson.Safe.json)))
                    v)) x.transform));
         ("width",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json))) v))
x.width))])            
  let make ?(width= None)  ?(transform= None)  ?(title= None) 
    ?(selection= None)  ?(name= None)  ?(height= None)  ?(description=
None)  ?(data= None)  mark encoding =
    {
      encoding;
      mark;
      data;
      description;
      height;
      name;
      selection;
      title;
      transform;
      width
    } 
end and
CompositeUnitSpecAlias_Selection_Record:sig
  type nonrec t =
    {
    selectionDef:
SelectionDef.t
        option
      }
  val to_yojson :
    t -> Yojson.Safe.json
  val make :
    ?selectionDef:SelectionDef.t
      option -> unit -> t
end =
struct
  type nonrec t = {
    selectionDef: SelectionDef.t option }

  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  -> match v with | `Null -> false | _ -> true)
         [("selectionDef",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun (x : SelectionDef.t)  ->
                       (SelectionDef.to_yojson x : Yojson.Safe.json)))
v)) x.selectionDef))])                 
  let make ?(selectionDef= None)  () = { selectionDef } 
end and
CompositeUnitSpecAlias_Title_Variant:sig
  type t =
    [
      `TitleParams of
TitleParams.t 
    | `String of string ]
  val to_yojson :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [ `TitleParams of TitleParams.t  | `String of string ]

  let to_yojson =
    function
    | `TitleParams v ->
        ((fun (x : TitleParams.t)  ->
            (TitleParams.to_yojson x : Yojson.Safe.json))) v
    | `String v ->
        ((fun (s : string)  ->
(`String s : Yojson.Safe.json))) v                      
end and
ConditionLegendFieldDef:sig
  type nonrec t =
    {
    type_: Type.t ;
    timeUnit: TimeUnit.t option ;
    sort:
ConditionLegendFieldDef_Sort_Variant_1.t
        option
      ;
    selection:
SelectionOperand.t ;
    scale: Scale.t option ;
    legend:
ConditionLegendFieldDef_Legend_Variant.t
        option
      ;
    field: Field.t option ;
    bin:
ConditionLegendFieldDef_Bin_Variant.t
        option
      ;
    aggregate:
Aggregate.t option }
  val to_yojson :
    t -> Yojson.Safe.json
  val make :
    ?timeUnit:TimeUnit.t option
      ->
      ?sort:ConditionLegendFieldDef_Sort_Variant_1.t
        option ->
        ?scale:Scale.t option
          ->
          ?legend:ConditionLegendFieldDef_Legend_Variant.t
            option ->
            ?field:Field.t
              option ->
              ?bin:ConditionLegendFieldDef_Bin_Variant.t
                option ->
                ?aggregate:Aggregate.t
                  option ->
Type.t ->
SelectionOperand.t
                      -> 
                      t
end =
struct
  type nonrec t =
    {
    type_: Type.t ;
    timeUnit: TimeUnit.t option ;
    sort:
ConditionLegendFieldDef_Sort_Variant_1.t option ;
    selection: SelectionOperand.t ;
    scale: Scale.t option ;
    legend:
ConditionLegendFieldDef_Legend_Variant.t option ;
    field: Field.t option ;
    bin: ConditionLegendFieldDef_Bin_Variant.t option ;
    aggregate: Aggregate.t option }

  (** Fields
  
    type:
      The encoded field's type of measurement. This can be either a full type
      name (`"quantitative"`, `"temporal"`, `"ordinal"`,  and `"nominal"`).
  
    timeUnit:
      Time unit for a `temporal` field  (e.g., `year`, `yearmonth`, `month`, `hour`).
      
      __Default value:__ `undefined` (None)
  
    sort:
      Sort order for the encoded field.
      Supported `sort` values include `"ascending"`, `"descending"` and `null` (no sorting).
      For fields with discrete domains, `sort` can also be a [sort field definition object](sort.html#sort-field).
      
      __Default value:__ `"ascending"`
  
    selection:
      A [selection name](selection.html), or a series of [composed selections](selection.html#compose).
  
    scale:
      An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.
      
      __Default value:__ If undefined, default [scale properties](scale.html) are applied.
  
    legend:
      An object defining properties of the legend.
      If `null`, the legend for the encoding channel will be removed.
      
      __Default value:__ If undefined, default [legend properties](legend.html) are applied.
  
    field:
      __Required.__ A string defining the name of the field from which to pull a data value
      or an object defining iterated values from the [`repeat`](repeat.html) operator.
      
      __Note:__ `field` is not required if `aggregate` is `count`.
  
    bin:
      A flag for binning a `quantitative` field, or [an object defining binning parameters](bin.html#params).
      If `true`, default [binning parameters](bin.html) will be applied.
      
      __Default value:__ `false`
  
    aggregate:
      Aggregation function for the field
      (e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).
      
      __Default value:__ `undefined` (None)
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with | `Null -> false | _ -> true)
         [("aggregate",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun (x : Aggregate.t)  ->
                       (Aggregate.to_yojson x : 
Yojson.Safe.json))) v))
               x.aggregate));
         ("bin",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
ConditionLegendFieldDef_Bin_Variant.t)
                       ->
                      (ConditionLegendFieldDef_Bin_Variant.to_yojson
                         x : Yojson.Safe.json))) v))
              x.bin));
         ("field",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : Field.t)  ->
                      (Field.to_yojson x : Yojson.Safe.json)))
                    v)) x.field));
         ("legend",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
ConditionLegendFieldDef_Legend_Variant.t)
                       ->
                      (ConditionLegendFieldDef_Legend_Variant.to_yojson
                         x : Yojson.Safe.json))) v))
              x.legend));
         ("scale",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : Scale.t)  ->
                      (Scale.to_yojson x : Yojson.Safe.json)))
                    v)) x.scale));
         ("selection",
           (((fun (x : SelectionOperand.t)  ->
                (SelectionOperand.to_yojson x : 
Yojson.Safe.json))) x.selection));
         ("sort",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
ConditionLegendFieldDef_Sort_Variant_1.t)
                       ->
                      (ConditionLegendFieldDef_Sort_Variant_1.to_yojson
                         x : Yojson.Safe.json))) v))
              x.sort));
         ("timeUnit",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : TimeUnit.t)  ->
                      (TimeUnit.to_yojson x : Yojson.Safe.json)))
                    v)) x.timeUnit));
         ("type",
           (((fun (x : Type.t)  ->
                (Type.to_yojson x : Yojson.Safe.json)))
x.type_))])                           
  let make ?(timeUnit= None)  ?(sort= None)  ?(scale=
None)  ?(legend= None)  ?(field= None)  ?(bin=
None)  ?(aggregate= None)  type_ selection =
    {
      selection;
      type_;
      aggregate;
      bin;
      field;
      legend;
      scale;
      sort;
      timeUnit
    } 
end and
ConditionLegendFieldDef_Bin_Variant:sig
  type t =
    [
     `BinParams
     of
BinParams.t
      | 
     `Boolean
     of 
     bool ]
  val
    to_yojson
    :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [ `BinParams of BinParams.t 
    | `Boolean of bool ]

  let to_yojson =
    function
    | `BinParams v ->
        ((fun (x : BinParams.t)  ->
            (BinParams.to_yojson x : Yojson.Safe.json)))
          v
    | `Boolean v ->
        ((fun (b : bool)  ->
(`Bool b : Yojson.Safe.json))) v                                
end and
ConditionLegendFieldDef_Legend_Variant:
                                sig
  type t = [ `Legend of Legend.t ] option
  val to_yojson : t -> Yojson.Safe.json
end =
struct
  type t = [ `Legend of Legend.t ] option

  let to_yojson =
    function
    | None -> `Null
    | Some (`Legend v) ->
        ((fun (x : Legend.t)  ->
            (Legend.to_yojson x : Yojson.Safe.json)))
v                                     
end and
ConditionLegendFieldDef_Sort_Variant:
                                     sig
  type t =
    [ `SortField of SortField.t 
    | `SortOrder of SortOrder.t ]
  val to_yojson : t -> Yojson.Safe.json
end =
struct
  type t =
    [ `SortField of SortField.t 
    | `SortOrder of SortOrder.t ]

  let to_yojson =
    function
    | `SortField v ->
        ((fun (x : SortField.t)  ->
            (SortField.to_yojson x : 
Yojson.Safe.json))) v
    | `SortOrder v ->
        ((fun (x : SortOrder.t)  ->
            (SortOrder.to_yojson x : 
Yojson.Safe.json))) v                                          
end and
ConditionLegendFieldDef_Sort_Variant_1:
                                          sig
  type t =
    [
      `ConditionLegendFieldDef_Sort_Variant
        of
ConditionLegendFieldDef_Sort_Variant.t
        ]
      option
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [
      `ConditionLegendFieldDef_Sort_Variant
        of
ConditionLegendFieldDef_Sort_Variant.t
        ]
      option

  let to_yojson =
    function
    | None -> `Null
    | Some
        (`ConditionLegendFieldDef_Sort_Variant
           v)
        ->
        ((fun
            (x :
ConditionLegendFieldDef_Sort_Variant.t)
             ->
            (ConditionLegendFieldDef_Sort_Variant.to_yojson
               x : Yojson.Safe.json)))
v                                               
end and
ConditionTextFieldDef:
                                               sig
  type nonrec t =
    {
    type_: Type.t ;
    timeUnit:
TimeUnit.t option ;
    selection:
SelectionOperand.t ;
    format: string option ;
    field: Field.t option ;
    bin:
ConditionTextFieldDef_Bin_Variant.t
        option
      ;
    aggregate:
Aggregate.t option }
  val to_yojson :
    t -> Yojson.Safe.json
  val make :
    ?timeUnit:TimeUnit.t
      option ->
      ?format:string option ->
        ?field:Field.t option
          ->
          ?bin:ConditionTextFieldDef_Bin_Variant.t
            option ->
            ?aggregate:Aggregate.t
              option ->
Type.t ->
SelectionOperand.t
                  -> t
end =
struct
  type nonrec t =
    {
    type_: Type.t ;
    timeUnit:
TimeUnit.t option ;
    selection:
SelectionOperand.t ;
    format: string option ;
    field: Field.t option ;
    bin:
ConditionTextFieldDef_Bin_Variant.t
        option
      ;
    aggregate:
Aggregate.t option }

  (** Fields
  
    type:
      The encoded field's type of measurement. This can be either a full type
      name (`"quantitative"`, `"temporal"`, `"ordinal"`,  and `"nominal"`).
  
    timeUnit:
      Time unit for a `temporal` field  (e.g., `year`, `yearmonth`, `month`, `hour`).
      
      __Default value:__ `undefined` (None)
  
    selection:
      A [selection name](selection.html), or a series of [composed selections](selection.html#compose).
  
    format:
      The [formatting pattern](format.html) for a text field. If not defined, this will be determined automatically.
  
    field:
      __Required.__ A string defining the name of the field from which to pull a data value
      or an object defining iterated values from the [`repeat`](repeat.html) operator.
      
      __Note:__ `field` is not required if `aggregate` is `count`.
  
    bin:
      A flag for binning a `quantitative` field, or [an object defining binning parameters](bin.html#params).
      If `true`, default [binning parameters](bin.html) will be applied.
      
      __Default value:__ `false`
  
    aggregate:
      Aggregation function for the field
      (e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).
      
      __Default value:__ `undefined` (None)
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null -> false
            | _ -> true)
         [("aggregate",
            (((function
               | None  ->
                   `Null
               | Some v ->
                   ((fun
                     (x :
Aggregate.t)
                      ->
                     (Aggregate.to_yojson
                     x : 
Yojson.Safe.json)))
                     v))
               x.aggregate));
         ("bin",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                     (x :
ConditionTextFieldDef_Bin_Variant.t)
                      ->
                     (ConditionTextFieldDef_Bin_Variant.to_yojson
                     x : 
Yojson.Safe.json)))
                    v)) x.bin));
         ("field",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                     (x :
Field.t) 
                     ->
                     (Field.to_yojson
                     x : 
Yojson.Safe.json)))
                    v))
              x.field));
         ("format",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                     (s :
                     string) 
                     ->
                     (`String
                     s : 
Yojson.Safe.json)))
                    v))
              x.format));
         ("selection",
           (((fun
                (x :
SelectionOperand.t)
                 ->
                (SelectionOperand.to_yojson
                   x : 
Yojson.Safe.json)))
              x.selection));
         ("timeUnit",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                     (x :
TimeUnit.t)
                      ->
                     (TimeUnit.to_yojson
                     x : 
Yojson.Safe.json)))
                    v))
              x.timeUnit));
         ("type",
           (((fun (x : Type.t)
                 ->
                (Type.to_yojson
                   x : 
Yojson.Safe.json)))
x.type_))])                                                    
  let make ?(timeUnit= None) 
    ?(format= None)  ?(field=
None)  ?(bin= None) 
    ?(aggregate= None)  type_
    selection =
    {
      selection;
      type_;
      aggregate;
      bin;
      field;
      format;
      timeUnit
    } 
end and
ConditionTextFieldDef_Bin_Variant:
                                                    sig
  type t =
    [
      `BinParams of
BinParams.t 
    | `Boolean of bool ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [
      `BinParams of
BinParams.t 
    | `Boolean of bool ]

  let to_yojson =
    function
    | `BinParams v ->
        ((fun
            (x :
BinParams.t)
             ->
            (BinParams.to_yojson
               x : 
Yojson.Safe.json)))
          v
    | `Boolean v ->
        ((fun (b : bool) 
            ->
            (`Bool b : 
Yojson.Safe.json)))
v                                                         
end and
ConditionValueDef:
                                                         sig
  type nonrec t =
    {
    value:
ConditionValueDef_Value_Variant.t
      ;
    selection:
SelectionOperand.t
      }
  val to_yojson :
    t ->
Yojson.Safe.json
  val make :
ConditionValueDef_Value_Variant.t
      ->
SelectionOperand.t
        -> t
end =
struct
  type nonrec t =
    {
    value:
ConditionValueDef_Value_Variant.t
      ;
    selection:
SelectionOperand.t
      }

  (** Fields
  
    value:
      A constant value in visual domain.
  
    selection:
      A [selection name](selection.html), or a series of [composed selections](selection.html#compose).
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun 
           (k,v)  ->
           match v
           with
           | 
           `Null ->
           false
           | 
           _ -> true)
         [("selection",
           (((fun
           (x :
SelectionOperand.t)
            ->
           (SelectionOperand.to_yojson
           x : Yojson.Safe.json)))
           x.selection));
         ("value",
           (
           ((fun
           (x :
ConditionValueDef_Value_Variant.t)
            ->
           (ConditionValueDef_Value_Variant.to_yojson
           x : Yojson.Safe.json)))
x.value))])                                                              
  let make value
    selection =
    {
      selection;
      value
    } 
end and
ConditionValueDef_Value_Variant:
                                                              sig
  type t =
    [
      `Num of
      int 
    | `String
      of 
      string 
    | `Bool of
      bool ]
  val to_yojson
    :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [
      `Num of
      int 
    | `String
      of 
      string 
    | `Bool of
      bool ]

  let to_yojson
    =
    function
    | `Num v ->
      ((fun
      (i : int)
       ->
      (`Int i : 
Yojson.Safe.json)))
      v
    | `String v
      ->
      ((fun
      (s :
      string) 
      ->
      (`String
      s : Yojson.Safe.json)))
      v
    | `Bool v
      ->
      ((fun
      (b :
      bool)  ->
      (`Bool b : 
Yojson.Safe.json)))
v                                                                   
end and
ConditionalLegendFieldDef:
                                                                   sig
 type nonrec t =
 {
 type_:
Type.t ;
 timeUnit:
TimeUnit.t
 option ;
 sort:
ConditionalLegendFieldDef_Sort_Variant_1.t
 option ;
 scale:
Scale.t
 option ;
 legend:
ConditionalLegendFieldDef_Legend_Variant.t
 option ;
 field:
Field.t
 option ;
 condition:
ConditionValueDef.t
 option ;
 bin:
ConditionalLegendFieldDef_Bin_Variant.t
 option ;
 aggregate:
Aggregate.t
 option }
 val
 to_yojson
 :
 t ->
Yojson.Safe.json
 val make
 :
 ?timeUnit:TimeUnit.t
 option ->
 ?sort:ConditionalLegendFieldDef_Sort_Variant_1.t
 option ->
 ?scale:Scale.t
 option ->
 ?legend:ConditionalLegendFieldDef_Legend_Variant.t
 option ->
 ?field:Field.t
 option ->
 ?condition:ConditionValueDef.t
 option ->
 ?bin:ConditionalLegendFieldDef_Bin_Variant.t
 option ->
 ?aggregate:Aggregate.t
 option ->
Type.t ->
 t
end =
struct
 type nonrec t =
 {
 type_:
Type.t ;
 timeUnit:
TimeUnit.t
 option ;
 sort:
ConditionalLegendFieldDef_Sort_Variant_1.t
 option ;
 scale:
Scale.t
 option ;
 legend:
ConditionalLegendFieldDef_Legend_Variant.t
 option ;
 field:
Field.t
 option ;
 condition:
ConditionValueDef.t
 option ;
 bin:
ConditionalLegendFieldDef_Bin_Variant.t
 option ;
 aggregate:
Aggregate.t
 option }

  (** A FieldDef with ConditionValueDef
  {
     condition: {value: ...},
     field: ...,
     ...
  }
  
  
  Fields:
  
    type:
      The encoded field's type of measurement. This can be either a full type
      name (`"quantitative"`, `"temporal"`, `"ordinal"`,  and `"nominal"`).
  
    timeUnit:
      Time unit for a `temporal` field  (e.g., `year`, `yearmonth`, `month`, `hour`).
      
      __Default value:__ `undefined` (None)
  
    sort:
      Sort order for the encoded field.
      Supported `sort` values include `"ascending"`, `"descending"` and `null` (no sorting).
      For fields with discrete domains, `sort` can also be a [sort field definition object](sort.html#sort-field).
      
      __Default value:__ `"ascending"`
  
    scale:
      An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.
      
      __Default value:__ If undefined, default [scale properties](scale.html) are applied.
  
    legend:
      An object defining properties of the legend.
      If `null`, the legend for the encoding channel will be removed.
      
      __Default value:__ If undefined, default [legend properties](legend.html) are applied.
  
    field:
      __Required.__ A string defining the name of the field from which to pull a data value
      or an object defining iterated values from the [`repeat`](repeat.html) operator.
      
      __Note:__ `field` is not required if `aggregate` is `count`.
  
    condition:
      A value definition with a selection predicate.
      
      __Note:__ A field definition's `condition` property can only be a [value definition](encoding.html#value)
      since Vega-Lite only allows at mosty  one encoded field per encoding channel.
  
    bin:
      A flag for binning a `quantitative` field, or [an object defining binning parameters](bin.html#params).
      If `true`, default [binning parameters](bin.html) will be applied.
      
      __Default value:__ `false`
  
    aggregate:
      Aggregation function for the field
      (e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).
      
      __Default value:__ `undefined` (None)
  *)
 let to_yojson
 x =
 `Assoc
 (List.filter
 (fun
 (k,v)  ->
 match v
 with
 | 
 `Null ->
 false
 | 
 _ -> true)
 [
 ("aggregate",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
Aggregate.t)
  ->
 (Aggregate.to_yojson
 x : Yojson.Safe.json)))
 v))
 x.aggregate));
 ("bin",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
ConditionalLegendFieldDef_Bin_Variant.t)
  ->
 (ConditionalLegendFieldDef_Bin_Variant.to_yojson
 x : Yojson.Safe.json)))
 v)) x.bin));
 ("condition",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
ConditionValueDef.t)
  ->
 (ConditionValueDef.to_yojson
 x : Yojson.Safe.json)))
 v))
 x.condition));
 ("field",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
Field.t) 
 ->
 (Field.to_yojson
 x : Yojson.Safe.json)))
 v))
 x.field));
 ("legend",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
ConditionalLegendFieldDef_Legend_Variant.t)
  ->
 (ConditionalLegendFieldDef_Legend_Variant.to_yojson
 x : Yojson.Safe.json)))
 v))
 x.legend));
 ("scale",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
Scale.t) 
 ->
 (Scale.to_yojson
 x : Yojson.Safe.json)))
 v))
 x.scale));
 ("sort",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
ConditionalLegendFieldDef_Sort_Variant_1.t)
  ->
 (ConditionalLegendFieldDef_Sort_Variant_1.to_yojson
 x : Yojson.Safe.json)))
 v))
 x.sort));
 ("timeUnit",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
TimeUnit.t)
  ->
 (TimeUnit.to_yojson
 x : Yojson.Safe.json)))
 v))
 x.timeUnit));
 ("type",
 (((fun
 (x :
Type.t) 
 ->
 (Type.to_yojson
 x : Yojson.Safe.json)))
x.type_))])                                                                     
 let make
 ?(timeUnit=
None) 
 ?(sort=
None) 
 ?(scale=
None) 
 ?(legend=
None) 
 ?(field=
None) 
 ?(condition=
None) 
 ?(bin=
None) 
 ?(aggregate=
None) 
 type_ =
 {
 type_;
 aggregate;
 bin;
 condition;
 field;
 legend;
 scale;
 sort;
 timeUnit
 } 
end
and
ConditionalLegendFieldDef_Bin_Variant:sig
  type t =
    [ `BinParams of BinParams.t 
    | `Boolean of bool ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t = [ `BinParams of BinParams.t  | `Boolean of bool ]

  let to_yojson =
    function
    | `BinParams v ->
        ((fun (x : BinParams.t)  ->
            (BinParams.to_yojson x : Yojson.Safe.json))) v
    | `Boolean v -> ((fun (b : bool)  -> (`Bool b : Yojson.Safe.json))) v 
end and
ConditionalLegendFieldDef_Legend_Variant:sig
  type t =
    [ `Legend of Legend.t ]
      option
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t = [ `Legend of Legend.t ] option

  let to_yojson =
    function
    | None -> `Null
    | Some (`Legend v) ->
        ((fun (x : Legend.t)  ->
(Legend.to_yojson x : Yojson.Safe.json))) v            
end and
ConditionalLegendFieldDef_Sort_Variant:sig
  type t =
    [
      `SortField of
SortField.t 
    | `SortOrder of
SortOrder.t ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [ `SortField of SortField.t  | `SortOrder of SortOrder.t ]

  let to_yojson =
    function
    | `SortField v ->
        ((fun (x : SortField.t)  ->
            (SortField.to_yojson x : Yojson.Safe.json))) v
    | `SortOrder v ->
        ((fun (x : SortOrder.t)  ->
(SortOrder.to_yojson x : Yojson.Safe.json))) v                 
end and
ConditionalLegendFieldDef_Sort_Variant_1:sig
  type t =
    [
      `ConditionalLegendFieldDef_Sort_Variant
        of
ConditionalLegendFieldDef_Sort_Variant.t
        ]
      option
  val to_yojson :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [
      `ConditionalLegendFieldDef_Sort_Variant of
ConditionalLegendFieldDef_Sort_Variant.t ]
      option

  let to_yojson =
    function
    | None -> `Null
    | Some (`ConditionalLegendFieldDef_Sort_Variant v) ->
        ((fun (x : ConditionalLegendFieldDef_Sort_Variant.t)
             ->
            (ConditionalLegendFieldDef_Sort_Variant.to_yojson
x : Yojson.Safe.json))) v                      
end and
ConditionalLegendValueDef:sig
  type nonrec t =
    {
    value:
ConditionalLegendValueDef_Value_Variant.t
        option
      ;
    condition:
ConditionalLegendValueDef_Condition_Variant.t
        option
      }
  val to_yojson :
    t -> Yojson.Safe.json
  val make :
    ?value:ConditionalLegendValueDef_Value_Variant.t
      option ->
      ?condition:ConditionalLegendValueDef_Condition_Variant.t
        option -> unit -> t
end =
struct
  type nonrec t =
    {
    value:
ConditionalLegendValueDef_Value_Variant.t option ;
    condition:
ConditionalLegendValueDef_Condition_Variant.t
        option
      }

  (** A ValueDef with ConditionValueDef | FieldDef
  {
     condition: {field: ...} | {value: ...},
     value: ...,
  }
  
  
  Fields:
  
    value:
      A constant value in visual domain.
  
    condition:
      A field definition or a value definition with a selection predicate.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with | `Null -> false | _ -> true)
         [("condition",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun
                       (x :
ConditionalLegendValueDef_Condition_Variant.t)
                        ->
                       (ConditionalLegendValueDef_Condition_Variant.to_yojson
                          x : Yojson.Safe.json))) v))
               x.condition));
         ("value",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
ConditionalLegendValueDef_Value_Variant.t)
                       ->
                      (ConditionalLegendValueDef_Value_Variant.to_yojson
                         x : Yojson.Safe.json))) v))
x.value))])                           
  let make ?(value= None)  ?(condition= None)  () =
    { condition; value } 
end and
ConditionalLegendValueDef_Condition_Variant:
                           sig
  type t =
    [ `ConditionValueDef of ConditionValueDef.t 
    | `ConditionLegendFieldDef of
ConditionLegendFieldDef.t ]
  val to_yojson : t -> Yojson.Safe.json
end =
struct
  type t =
    [ `ConditionValueDef of ConditionValueDef.t 
    | `ConditionLegendFieldDef of
ConditionLegendFieldDef.t ]

  let to_yojson =
    function
    | `ConditionValueDef v ->
        ((fun (x : ConditionValueDef.t)  ->
            (ConditionValueDef.to_yojson x : 
Yojson.Safe.json))) v
    | `ConditionLegendFieldDef v ->
        ((fun (x : ConditionLegendFieldDef.t)  ->
            (ConditionLegendFieldDef.to_yojson x : 
Yojson.Safe.json))) v                                
end and
ConditionalLegendValueDef_Value_Variant:
                                sig
  type t =
    [ `Num of int  | `String of string 
    | `Bool of bool ]
  val to_yojson : t -> Yojson.Safe.json
end =
struct
  type t =
    [ `Num of int  | `String of string 
    | `Bool of bool ]

  let to_yojson =
    function
    | `Num v ->
        ((fun (i : int)  ->
            (`Int i : Yojson.Safe.json))) v
    | `String v ->
        ((fun (s : string)  ->
            (`String s : Yojson.Safe.json)))
          v
    | `Bool v ->
        ((fun (b : bool)  ->
(`Bool b : Yojson.Safe.json))) v                                     
end and
ConditionalTextFieldDef:sig
  type nonrec t =
    {
    type_:
Type.t ;
    timeUnit:
TimeUnit.t
       option
      ;
    format:
      string
       option
      ;
    field:
Field.t
       option
      ;
    condition:
ConditionValueDef.t
       option
      ;
    bin:
ConditionalTextFieldDef_Bin_Variant.t
       option
      ;
    aggregate:
Aggregate.t
       option
      }
  val to_yojson
    :
    t ->
Yojson.Safe.json
  val make :
    ?timeUnit:TimeUnit.t
      option ->
      ?format:string
       option ->
       ?field:Field.t
       option ->
       ?condition:ConditionValueDef.t
       option ->
       ?bin:ConditionalTextFieldDef_Bin_Variant.t
       option ->
       ?aggregate:Aggregate.t
       option ->
Type.t ->
       t
end =
struct
  type nonrec t =
    {
    type_: Type.t ;
    timeUnit: TimeUnit.t option ;
    format: string option ;
    field: Field.t option ;
    condition:
ConditionValueDef.t option ;
    bin:
ConditionalTextFieldDef_Bin_Variant.t
        option
      ;
    aggregate: Aggregate.t option }

  (** A FieldDef with ConditionValueDef
  {
     condition: {value: ...},
     field: ...,
     ...
  }
  
  
  Fields:
  
    type:
      The encoded field's type of measurement. This can be either a full type
      name (`"quantitative"`, `"temporal"`, `"ordinal"`,  and `"nominal"`).
  
    timeUnit:
      Time unit for a `temporal` field  (e.g., `year`, `yearmonth`, `month`, `hour`).
      
      __Default value:__ `undefined` (None)
  
    format:
      The [formatting pattern](format.html) for a text field. If not defined, this will be determined automatically.
  
    field:
      __Required.__ A string defining the name of the field from which to pull a data value
      or an object defining iterated values from the [`repeat`](repeat.html) operator.
      
      __Note:__ `field` is not required if `aggregate` is `count`.
  
    condition:
      A value definition with a selection predicate.
      
      __Note:__ A field definition's `condition` property can only be a [value definition](encoding.html#value)
      since Vega-Lite only allows at mosty  one encoded field per encoding channel.
  
    bin:
      A flag for binning a `quantitative` field, or [an object defining binning parameters](bin.html#params).
      If `true`, default [binning parameters](bin.html) will be applied.
      
      __Default value:__ `false`
  
    aggregate:
      Aggregation function for the field
      (e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).
      
      __Default value:__ `undefined` (None)
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null -> false
            | _ -> true)
         [("aggregate",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun
                       (x : Aggregate.t)
                        ->
                       (Aggregate.to_yojson
                          x : Yojson.Safe.json)))
                     v)) x.aggregate));
         ("bin",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
ConditionalTextFieldDef_Bin_Variant.t)
                       ->
                      (ConditionalTextFieldDef_Bin_Variant.to_yojson
                         x : Yojson.Safe.json)))
                    v)) x.bin));
         ("condition",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
ConditionValueDef.t)
                       ->
                      (ConditionValueDef.to_yojson
                         x : Yojson.Safe.json)))
                    v)) x.condition));
         ("field",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : Field.t) 
                      ->
                      (Field.to_yojson x : 
Yojson.Safe.json)))
                    v)) x.field));
         ("format",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : 
Yojson.Safe.json)))
                    v)) x.format));
         ("timeUnit",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : TimeUnit.t)
                       ->
                      (TimeUnit.to_yojson
                         x : Yojson.Safe.json)))
                    v)) x.timeUnit));
         ("type",
           (((fun (x : Type.t)  ->
                (Type.to_yojson x : 
Yojson.Safe.json)))
x.type_))])                                          
  let make ?(timeUnit= None)  ?(format=
None)  ?(field= None)  ?(condition=
None)  ?(bin= None)  ?(aggregate=
None)  type_ =
    {
      type_;
      aggregate;
      bin;
      condition;
      field;
      format;
      timeUnit
    } 
end and
ConditionalTextFieldDef_Bin_Variant:
                                          sig
  type t =
    [ `BinParams of BinParams.t 
    | `Boolean of bool ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [ `BinParams of BinParams.t 
    | `Boolean of bool ]

  let to_yojson =
    function
    | `BinParams v ->
        ((fun (x : BinParams.t)  ->
            (BinParams.to_yojson x : 
Yojson.Safe.json))) v
    | `Boolean v ->
        ((fun (b : bool)  ->
            (`Bool b : Yojson.Safe.json)))
v                                               
end and
ConditionalTextValueDef:
                                               sig
  type nonrec t =
    {
    value:
ConditionalTextValueDef_Value_Variant.t
        option
      ;
    condition:
ConditionalTextValueDef_Condition_Variant.t
        option
      }
  val to_yojson :
    t -> Yojson.Safe.json
  val make :
    ?value:ConditionalTextValueDef_Value_Variant.t
      option ->
      ?condition:ConditionalTextValueDef_Condition_Variant.t
        option -> unit -> t
end =
struct
  type nonrec t =
    {
    value:
ConditionalTextValueDef_Value_Variant.t
        option
      ;
    condition:
ConditionalTextValueDef_Condition_Variant.t
        option
      }

  (** A ValueDef with ConditionValueDef | FieldDef
  {
     condition: {field: ...} | {value: ...},
     value: ...,
  }
  
  
  Fields:
  
    value:
      A constant value in visual domain.
  
    condition:
      A field definition or a value definition with a selection predicate.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null -> false
            | _ -> true)
         [("condition",
            (((function
               | None  ->
                   `Null
               | Some v ->
                   ((fun
                     (x :
ConditionalTextValueDef_Condition_Variant.t)
                      ->
                     (ConditionalTextValueDef_Condition_Variant.to_yojson
                     x : 
Yojson.Safe.json)))
                     v))
               x.condition));
         ("value",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                     (x :
ConditionalTextValueDef_Value_Variant.t)
                      ->
                     (ConditionalTextValueDef_Value_Variant.to_yojson
                     x : 
Yojson.Safe.json)))
                    v))
x.value))])                                                    
  let make ?(value= None) 
    ?(condition= None)  () =
    { condition; value } 
end and
ConditionalTextValueDef_Condition_Variant:
                                                    sig
  type t =
    [
      `ConditionValueDef
        of
ConditionValueDef.t
         | `ConditionTextFieldDef
             of
ConditionTextFieldDef.t
             ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [
      `ConditionValueDef
        of
ConditionValueDef.t
         | `ConditionTextFieldDef
             of
ConditionTextFieldDef.t
             ]

  let to_yojson =
    function
    | `ConditionValueDef
        v ->
        ((fun
            (x :
ConditionValueDef.t)
             ->
            (ConditionValueDef.to_yojson
               x : 
Yojson.Safe.json)))
          v
    | `ConditionTextFieldDef
        v ->
        ((fun
            (x :
ConditionTextFieldDef.t)
             ->
            (ConditionTextFieldDef.to_yojson
               x : 
Yojson.Safe.json)))
v                                                         
end and
ConditionalTextValueDef_Value_Variant:
                                                         sig
  type t =
    [ `Num of int 
    | `String of
        string 
    | `Bool of bool ]
  val to_yojson :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [ `Num of int 
    | `String of
        string 
    | `Bool of bool ]

  let to_yojson =
    function
    | `Num v ->
        ((fun
           (i : int)
            ->
           (`Int i : 
Yojson.Safe.json)))
          v
    | `String v ->
        ((fun
           (s :
           string) 
           ->
           (`String
           s : 
Yojson.Safe.json)))
          v
    | `Bool v ->
        ((fun
           (b :
           bool)  ->
           (`Bool b : 
Yojson.Safe.json)))
v                                                              
end and
Config:
                                                              sig
  type nonrec t =
    {
    view:
ViewConfig.t
      option ;
    title:
VgTitleConfig.t
      option ;
    timeFormat:
      string
      option ;
    tick:
TickConfig.t
      option ;
    text:
TextConfig.t
      option ;
    style:
StyleConfigIndex.t
      option ;
    stack:
StackOffset.t
      option ;
    square:
MarkConfig.t
      option ;
    selection:
SelectionConfig.t
      option ;
    scale:
ScaleConfig.t
      option ;
    rule:
MarkConfig.t
      option ;
    rect:
MarkConfig.t
      option ;
    range:
RangeConfig.t
      option ;
    point:
MarkConfig.t
      option ;
    padding:
Padding.t
      option ;
    numberFormat:
      string
      option ;
    mark:
MarkConfig.t
      option ;
    line:
MarkConfig.t
      option ;
    legend:
LegendConfig.t
      option ;
    invalidValues:
      string
      option ;
    countTitle:
      string
      option ;
    circle:
MarkConfig.t
      option ;
    bar:
BarConfig.t
      option ;
    background:
      string
      option ;
    axisY:
VgAxisConfig.t
      option ;
    axisX:
VgAxisConfig.t
      option ;
    axisTop:
VgAxisConfig.t
      option ;
    axisRight:
VgAxisConfig.t
      option ;
    axisLeft:
VgAxisConfig.t
      option ;
    axisBottom:
VgAxisConfig.t
      option ;
    axisBand:
VgAxisConfig.t
      option ;
    axis:
AxisConfig.t
      option ;
    autoResize:
      bool
      option ;
    area:
MarkConfig.t
      option }
  val to_yojson
    :
    t ->
Yojson.Safe.json
  val make :
    ?view:ViewConfig.t
      option ->
      ?title:VgTitleConfig.t
      option ->
      ?timeFormat:string
      option ->
      ?tick:TickConfig.t
      option ->
      ?text:TextConfig.t
      option ->
      ?style:StyleConfigIndex.t
      option ->
      ?stack:StackOffset.t
      option ->
      ?square:MarkConfig.t
      option ->
      ?selection:SelectionConfig.t
      option ->
      ?scale:ScaleConfig.t
      option ->
      ?rule:MarkConfig.t
      option ->
      ?rect:MarkConfig.t
      option ->
      ?range:RangeConfig.t
      option ->
      ?point:MarkConfig.t
      option ->
      ?padding:Padding.t
      option ->
      ?numberFormat:string
      option ->
      ?mark:MarkConfig.t
      option ->
      ?line:MarkConfig.t
      option ->
      ?legend:LegendConfig.t
      option ->
      ?invalidValues:string
      option ->
      ?countTitle:string
      option ->
      ?circle:MarkConfig.t
      option ->
      ?bar:BarConfig.t
      option ->
      ?background:string
      option ->
      ?axisY:VgAxisConfig.t
      option ->
      ?axisX:VgAxisConfig.t
      option ->
      ?axisTop:VgAxisConfig.t
      option ->
      ?axisRight:VgAxisConfig.t
      option ->
      ?axisLeft:VgAxisConfig.t
      option ->
      ?axisBottom:VgAxisConfig.t
      option ->
      ?axisBand:VgAxisConfig.t
      option ->
      ?axis:AxisConfig.t
      option ->
      ?autoResize:bool
      option ->
      ?area:MarkConfig.t
      option ->
      unit -> t
end =
struct
  type nonrec t =
    {
    view:
ViewConfig.t
      option ;
    title:
VgTitleConfig.t
      option ;
    timeFormat:
      string
      option ;
    tick:
TickConfig.t
      option ;
    text:
TextConfig.t
      option ;
    style:
StyleConfigIndex.t
      option ;
    stack:
StackOffset.t
      option ;
    square:
MarkConfig.t
      option ;
    selection:
SelectionConfig.t
      option ;
    scale:
ScaleConfig.t
      option ;
    rule:
MarkConfig.t
      option ;
    rect:
MarkConfig.t
      option ;
    range:
RangeConfig.t
      option ;
    point:
MarkConfig.t
      option ;
    padding:
Padding.t
      option ;
    numberFormat:
      string
      option ;
    mark:
MarkConfig.t
      option ;
    line:
MarkConfig.t
      option ;
    legend:
LegendConfig.t
      option ;
    invalidValues:
      string
      option ;
    countTitle:
      string
      option ;
    circle:
MarkConfig.t
      option ;
    bar:
BarConfig.t
      option ;
    background:
      string
      option ;
    axisY:
VgAxisConfig.t
      option ;
    axisX:
VgAxisConfig.t
      option ;
    axisTop:
VgAxisConfig.t
      option ;
    axisRight:
VgAxisConfig.t
      option ;
    axisLeft:
VgAxisConfig.t
      option ;
    axisBottom:
VgAxisConfig.t
      option ;
    axisBand:
VgAxisConfig.t
      option ;
    axis:
AxisConfig.t
      option ;
    autoResize:
      bool
      option ;
    area:
MarkConfig.t
      option }

  (** Fields
  
    view:
      Default properties for [single view plots](spec.html#single). 
  
    title:
      Title configuration, which determines default properties for all [titles](title.html). For a full list of title configuration options, please see the [corresponding section of the title documentation](title.html#config).
  
    timeFormat:
      Default datetime format for axis and legend labels. The format can be set directly on each axis and legend. Use [D3's time format pattern](https://github.com/d3/d3-time-format#locale_format).
      
      __Default value:__ `'%b %d, %Y'`.
  
    tick:
      Tick-Specific Config 
  
    text:
      Text-Specific Config 
  
    style:
      An object hash that defines key-value mappings to determine default properties for marks with a given [style](mark.html#mark-def).  The keys represent styles names; the value are valid [mark configuration objects](mark.html#config).  
  
    stack:
      Default stack offset for stackable mark. 
  
    square:
      Square-Specific Config 
  
    selection:
      An object hash for defining default properties for each type of selections. 
  
    scale:
      Scale configuration determines default properties for all [scales](scale.html). For a full list of scale configuration options, please see the [corresponding section of the scale documentation](scale.html#config).
  
    rule:
      Rule-Specific Config 
  
    rect:
      Rect-Specific Config 
  
    range:
      An object hash that defines default range arrays or schemes for using with scales.
      For a full list of scale range configuration options, please see the [corresponding section of the scale documentation](scale.html#config).
  
    point:
      Point-Specific Config 
  
    padding:
      The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle.  If a number, specifies padding for all sides.
      If an object, the value should have the format `{"left": 5, "top": 5, "right": 5, "bottom": 5}` to specify padding for each side of the visualization.
      
      __Default value__: `5`
  
    numberFormat:
      D3 Number format for axis labels and text tables. For example "s" for SI units. Use [D3's number format pattern](https://github.com/d3/d3-format#locale_format).
  
    mark:
      Mark Config 
  
    line:
      Line-Specific Config 
  
    legend:
      Legend configuration, which determines default properties for all [legends](legend.html). For a full list of legend configuration options, please see the [corresponding section of in the legend documentation](legend.html#config).
  
    invalidValues:
      Defines how Vega-Lite should handle invalid values (`null` and `NaN`).
      - If set to `"filter"` (default), all data items with null values are filtered.
      - If `null`, all data items are included. In this case, invalid values will be interpreted as zeroes.
  
    countTitle:
      Default axis and legend title for count fields.
      
      __Default value:__ `'Number of Records'`.
  
    circle:
      Circle-Specific Config 
  
    bar:
      Bar-Specific Config 
  
    background:
      CSS color property to use as the background of visualization.
      
      __Default value:__ none (transparent)
  
    axisY:
      Y-axis specific config.
  
    axisX:
      X-axis specific config.
  
    axisTop:
      Specific axis config for x-axis along the top edge of the chart.
  
    axisRight:
      Specific axis config for y-axis along the right edge of the chart.
  
    axisLeft:
      Specific axis config for y-axis along the left edge of the chart.
  
    axisBottom:
      Specific axis config for x-axis along the bottom edge of the chart.
  
    axisBand:
      Specific axis config for axes with "band" scales.
  
    axis:
      Axis configuration, which determines default properties for all `x` and `y` [axes](axis.html). For a full list of axis configuration options, please see the [corresponding section of the axis documentation](axis.html#axis-config).
  
    autoResize:
      Resize is a boolean indicating if autosize layout should be re-calculated on every update.
      
      __Default value__: `false`
  
    area:
      Area-Specific Config 
  *)
  let to_yojson
    x =
    `Assoc
      (
List.filter
      (fun
      (k,v)  ->
      match v
      with
      | 
      `Null ->
      false
      | 
      _ -> true)
      [
      ("area",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (x :
MarkConfig.t)
       ->
      (MarkConfig.to_yojson
      x : Yojson.Safe.json)))
      v))
      x.area));
      ("autoResize",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (b :
      bool)  ->
      (`Bool b : 
Yojson.Safe.json)))
      v))
      x.autoResize));
      ("axis",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (x :
AxisConfig.t)
       ->
      (AxisConfig.to_yojson
      x : Yojson.Safe.json)))
      v))
      x.axis));
      ("axisBand",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (x :
VgAxisConfig.t)
       ->
      (VgAxisConfig.to_yojson
      x : Yojson.Safe.json)))
      v))
      x.axisBand));
      ("axisBottom",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (x :
VgAxisConfig.t)
       ->
      (VgAxisConfig.to_yojson
      x : Yojson.Safe.json)))
      v))
      x.axisBottom));
      ("axisLeft",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (x :
VgAxisConfig.t)
       ->
      (VgAxisConfig.to_yojson
      x : Yojson.Safe.json)))
      v))
      x.axisLeft));
      ("axisRight",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (x :
VgAxisConfig.t)
       ->
      (VgAxisConfig.to_yojson
      x : Yojson.Safe.json)))
      v))
      x.axisRight));
      ("axisTop",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (x :
VgAxisConfig.t)
       ->
      (VgAxisConfig.to_yojson
      x : Yojson.Safe.json)))
      v))
      x.axisTop));
      ("axisX",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (x :
VgAxisConfig.t)
       ->
      (VgAxisConfig.to_yojson
      x : Yojson.Safe.json)))
      v))
      x.axisX));
      ("axisY",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (x :
VgAxisConfig.t)
       ->
      (VgAxisConfig.to_yojson
      x : Yojson.Safe.json)))
      v))
      x.axisY));
      ("background",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (s :
      string) 
      ->
      (`String
      s : Yojson.Safe.json)))
      v))
      x.background));
      ("bar",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (x :
BarConfig.t)
       ->
      (BarConfig.to_yojson
      x : Yojson.Safe.json)))
      v)) x.bar));
      ("circle",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (x :
MarkConfig.t)
       ->
      (MarkConfig.to_yojson
      x : Yojson.Safe.json)))
      v))
      x.circle));
      ("countTitle",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (s :
      string) 
      ->
      (`String
      s : Yojson.Safe.json)))
      v))
      x.countTitle));
      ("invalidValues",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (s :
      string) 
      ->
      (`String
      s : Yojson.Safe.json)))
      v))
      x.invalidValues));
      ("legend",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (x :
LegendConfig.t)
       ->
      (LegendConfig.to_yojson
      x : Yojson.Safe.json)))
      v))
      x.legend));
      ("line",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (x :
MarkConfig.t)
       ->
      (MarkConfig.to_yojson
      x : Yojson.Safe.json)))
      v))
      x.line));
      ("mark",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (x :
MarkConfig.t)
       ->
      (MarkConfig.to_yojson
      x : Yojson.Safe.json)))
      v))
      x.mark));
      ("numberFormat",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (s :
      string) 
      ->
      (`String
      s : Yojson.Safe.json)))
      v))
      x.numberFormat));
      ("padding",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (x :
Padding.t)
       ->
      (Padding.to_yojson
      x : Yojson.Safe.json)))
      v))
      x.padding));
      ("point",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (x :
MarkConfig.t)
       ->
      (MarkConfig.to_yojson
      x : Yojson.Safe.json)))
      v))
      x.point));
      ("range",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (x :
RangeConfig.t)
       ->
      (RangeConfig.to_yojson
      x : Yojson.Safe.json)))
      v))
      x.range));
      ("rect",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (x :
MarkConfig.t)
       ->
      (MarkConfig.to_yojson
      x : Yojson.Safe.json)))
      v))
      x.rect));
      ("rule",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (x :
MarkConfig.t)
       ->
      (MarkConfig.to_yojson
      x : Yojson.Safe.json)))
      v))
      x.rule));
      ("scale",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (x :
ScaleConfig.t)
       ->
      (ScaleConfig.to_yojson
      x : Yojson.Safe.json)))
      v))
      x.scale));
      ("selection",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (x :
SelectionConfig.t)
       ->
      (SelectionConfig.to_yojson
      x : Yojson.Safe.json)))
      v))
      x.selection));
      ("square",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (x :
MarkConfig.t)
       ->
      (MarkConfig.to_yojson
      x : Yojson.Safe.json)))
      v))
      x.square));
      ("stack",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (x :
StackOffset.t)
       ->
      (StackOffset.to_yojson
      x : Yojson.Safe.json)))
      v))
      x.stack));
      ("style",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (x :
StyleConfigIndex.t)
       ->
      (StyleConfigIndex.to_yojson
      x : Yojson.Safe.json)))
      v))
      x.style));
      ("text",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (x :
TextConfig.t)
       ->
      (TextConfig.to_yojson
      x : Yojson.Safe.json)))
      v))
      x.text));
      ("tick",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (x :
TickConfig.t)
       ->
      (TickConfig.to_yojson
      x : Yojson.Safe.json)))
      v))
      x.tick));
      ("timeFormat",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (s :
      string) 
      ->
      (`String
      s : Yojson.Safe.json)))
      v))
      x.timeFormat));
      ("title",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (x :
VgTitleConfig.t)
       ->
      (VgTitleConfig.to_yojson
      x : Yojson.Safe.json)))
      v))
      x.title));
      ("view",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (x :
ViewConfig.t)
       ->
      (ViewConfig.to_yojson
      x : Yojson.Safe.json)))
      v))
x.view))])                                                                   
  let make
    ?(view=
None) 
    ?(title=
None) 
    ?(timeFormat=
None) 
    ?(tick=
None) 
    ?(text=
None) 
    ?(style=
None) 
    ?(stack=
None) 
    ?(square=
None) 
    ?(selection=
None) 
    ?(scale=
None) 
    ?(rule=
None) 
    ?(rect=
None) 
    ?(range=
None) 
    ?(point=
None) 
    ?(padding=
None) 
    ?(numberFormat=
None) 
    ?(mark=
None) 
    ?(line=
None) 
    ?(legend=
None) 
    ?(invalidValues=
None) 
    ?(countTitle=
None) 
    ?(circle=
None) 
    ?(bar=
None) 
    ?(background=
None) 
    ?(axisY=
None) 
    ?(axisX=
None) 
    ?(axisTop=
None) 
    ?(axisRight=
None) 
    ?(axisLeft=
None) 
    ?(axisBottom=
None) 
    ?(axisBand=
None) 
    ?(axis=
None) 
    ?(autoResize=
None) 
    ?(area=
None)  () =
    {
      area;
      autoResize;
      axis;
      axisBand;
      axisBottom;
      axisLeft;
      axisRight;
      axisTop;
      axisX;
      axisY;
      background;
      bar;
      circle;
      countTitle;
      invalidValues;
      legend;
      line;
      mark;
      numberFormat;
      padding;
      point;
      range;
      rect;
      rule;
      scale;
      selection;
      square;
      stack;
      style;
      text;
      tick;
      timeFormat;
      title;
      view
    } 
end and
CsvDataFormat:
                                                                   sig
 type nonrec t =
 {
 type_:
 string
 option ;
 parse:
CsvDataFormat_Parse_Variant.t
 option }
 val
 to_yojson
 :
 t ->
Yojson.Safe.json
 val make
 :
 ?type_:string
 option ->
 ?parse:CsvDataFormat_Parse_Variant.t
 option ->
 unit -> t
end =
struct
 type nonrec t =
 {
 type_:
 string
 option ;
 parse:
CsvDataFormat_Parse_Variant.t
 option }

  (** Fields
  
    type:
      Type of input data: `"json"`, `"csv"`, `"tsv"`.
      The default format type is determined by the extension of the file URL.
      If no extension is detected, `"json"` will be used by default.
  
    parse:
      If set to auto (the default), perform automatic type inference to determine the desired data types.
      Alternatively, a parsing directive object can be provided for explicit data types. Each property of the object corresponds to a field name, and the value to the desired data type (one of `"number"`, `"boolean"` or `"date"`).
      For example, `"parse": {"modified_on": "date"}` parses the `modified_on` field in each input record a Date value.
      
      For `"date"`, we parse data based using Javascript's [`Date.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse).
      For Specific date formats can be provided (e.g., `{foo: 'date:"%m%d%Y"'}`), using the [d3-time-format syntax](https://github.com/d3/d3-time-format#locale_format). UTC date format parsing is supported similarly (e.g., `{foo: 'utc:"%m%d%Y"'}`). See more about [UTC time](timeunit.html#utc)
  *)
 let to_yojson
 x =
 `Assoc
 (List.filter
 (fun
 (k,v)  ->
 match v
 with
 | 
 `Null ->
 false
 | 
 _ -> true)
 [
 ("parse",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
CsvDataFormat_Parse_Variant.t)
  ->
 (CsvDataFormat_Parse_Variant.to_yojson
 x : Yojson.Safe.json)))
 v))
 x.parse));
 ("type",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (s :
 string) 
 ->
 (`String
 s : Yojson.Safe.json)))
 v))
x.type_))])                                                                     
 let make
 ?(type_=
None) 
 ?(parse=
None)  ()
 =
 {
 parse;
 type_
 } 
end
and
CsvDataFormat_Parse_Variant:sig
  type t =
    [ `JSON of Yojson.Safe.json  | `Auto ]
  val to_yojson : t -> Yojson.Safe.json
end =
struct
  type t = [ `JSON of Yojson.Safe.json  | `Auto ]

  let to_yojson =
    function
    | `JSON v ->
        ((fun (j : Yojson.Safe.json)  -> (j : Yojson.Safe.json))) v
    | `Auto -> `String "auto" 
end and
Data:sig
  type t =
    [ `NamedData of NamedData.t  | `InlineData of InlineData.t 
    | `UrlData of UrlData.t ]
  val to_yojson : t -> Yojson.Safe.json
end =
struct
  type t =
    [ `NamedData of NamedData.t  | `InlineData of InlineData.t 
    | `UrlData of UrlData.t ]

  let to_yojson =
    function
    | `NamedData v ->
        ((fun (x : NamedData.t)  ->
            (NamedData.to_yojson x : Yojson.Safe.json))) v
    | `InlineData v ->
        ((fun (x : InlineData.t)  ->
            (InlineData.to_yojson x : Yojson.Safe.json))) v
    | `UrlData v ->
        ((fun (x : UrlData.t)  ->
(UrlData.to_yojson x : Yojson.Safe.json))) v            
end and
DataFormat:sig
  type t =
    [ `TopoDataFormat of TopoDataFormat.t 
    | `JsonDataFormat of JsonDataFormat.t 
    | `CsvDataFormat of CsvDataFormat.t ]
  val to_yojson : t -> Yojson.Safe.json
end =
struct
  type t =
    [ `TopoDataFormat of TopoDataFormat.t 
    | `JsonDataFormat of JsonDataFormat.t 
    | `CsvDataFormat of CsvDataFormat.t ]

  let to_yojson =
    function
    | `TopoDataFormat v ->
        ((fun (x : TopoDataFormat.t)  ->
            (TopoDataFormat.to_yojson x : Yojson.Safe.json))) v
    | `JsonDataFormat v ->
        ((fun (x : JsonDataFormat.t)  ->
            (JsonDataFormat.to_yojson x : Yojson.Safe.json))) v
    | `CsvDataFormat v ->
        ((fun (x : CsvDataFormat.t)  ->
(CsvDataFormat.to_yojson x : Yojson.Safe.json))) v                 
end and
DataFormatBase:sig
  type nonrec t =
    {
    type_: DataFormatType.t option ;
    parse:
DataFormatBase_Parse_Variant.t option }
  val to_yojson : t -> Yojson.Safe.json
  val make :
    ?type_:DataFormatType.t option ->
      ?parse:DataFormatBase_Parse_Variant.t
        option -> unit -> t
end =
struct
  type nonrec t =
    {
    type_: DataFormatType.t option ;
    parse: DataFormatBase_Parse_Variant.t option }

  (** Fields
  
    type:
      Type of input data: `"json"`, `"csv"`, `"tsv"`.
      The default format type is determined by the extension of the file URL.
      If no extension is detected, `"json"` will be used by default.
  
    parse:
      If set to auto (the default), perform automatic type inference to determine the desired data types.
      Alternatively, a parsing directive object can be provided for explicit data types. Each property of the object corresponds to a field name, and the value to the desired data type (one of `"number"`, `"boolean"` or `"date"`).
      For example, `"parse": {"modified_on": "date"}` parses the `modified_on` field in each input record a Date value.
      
      For `"date"`, we parse data based using Javascript's [`Date.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse).
      For Specific date formats can be provided (e.g., `{foo: 'date:"%m%d%Y"'}`), using the [d3-time-format syntax](https://github.com/d3/d3-time-format#locale_format). UTC date format parsing is supported similarly (e.g., `{foo: 'utc:"%m%d%Y"'}`). See more about [UTC time](timeunit.html#utc)
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with | `Null -> false | _ -> true)
         [("parse",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun
                       (x : DataFormatBase_Parse_Variant.t) 
                       ->
                       (DataFormatBase_Parse_Variant.to_yojson
                          x : Yojson.Safe.json))) v))
               x.parse));
         ("type",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : DataFormatType.t)  ->
                      (DataFormatType.to_yojson x : 
Yojson.Safe.json))) v)) x.type_))])                      
  let make ?(type_= None)  ?(parse= None)  () =
    { parse; type_ } 
end and
DataFormatBase_Parse_Variant:sig
  type t =
    [
      `JSON of
Yojson.Safe.json 
    | `Auto ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t = [ `JSON of Yojson.Safe.json  | `Auto ]

  let to_yojson =
    function
    | `JSON v ->
        ((fun (j : Yojson.Safe.json)  ->
            (j : Yojson.Safe.json))) v
    | `Auto -> `String "auto" 
end and
DataFormatType:sig
  type t =
    [ `Topojson  | `Tsv  | 
      `Csv 
    | `Json ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t = [ `Topojson  | `Tsv  | `Csv  | `Json ]

  let to_yojson =
    function
    | `Topojson -> `String "topojson"
    | `Tsv -> `String "tsv"
    | `Csv -> `String "csv"
    | `Json -> `String "json" 
end and
DateTime:sig
  type nonrec t =
    {
    year: int option ;
    utc: bool option ;
    seconds: int option ;
    quarter: int option ;
    month:
DateTime_Month_Variant.t
        option
      ;
    minutes: int option ;
    milliseconds: int option ;
    hours: int option ;
    day:
DateTime_Day_Variant.t option ;
    date: int option }
  val to_yojson :
    t -> Yojson.Safe.json
  val make :
    ?year:int option ->
      ?utc:bool option ->
        ?seconds:int option ->
          ?quarter:int option ->
            ?month:DateTime_Month_Variant.t
              option ->
              ?minutes:int option ->
                ?milliseconds:int
                  option ->
                  ?hours:int option
                    ->
                    ?day:DateTime_Day_Variant.t
                      option ->
                      ?date:int
                        option ->
                        unit -> t
end =
struct
  type nonrec t =
    {
    year: int option ;
    utc: bool option ;
    seconds: int option ;
    quarter: int option ;
    month: DateTime_Month_Variant.t option ;
    minutes: int option ;
    milliseconds: int option ;
    hours: int option ;
    day: DateTime_Day_Variant.t option ;
    date: int option }

  (** Object for defining datetime in Vega-Lite Filter.
  If both month and quarter are provided, month has higher precedence.
  `day` cannot be combined with other date.
  We accept string for month and day names.
  
  
  Fields:
  
    year:
      Integer value representing the year.
  
    utc:
      A boolean flag indicating if date time is in utc time. If false, the date time is in local time
  
    seconds:
      Integer value representing the second segment (0-59) of a time value
  
    quarter:
      Integer value representing the quarter of the year (from 1-4).
  
    month:
      One of: (1) integer value representing the month from `1`-`12`. `1` represents January;  (2) case-insensitive month name (e.g., `"January"`);  (3) case-insensitive, 3-character short month name (e.g., `"Jan"`). 
  
    minutes:
      Integer value representing the minute segment of time from 0-59.
  
    milliseconds:
      Integer value representing the millisecond segment of time.
  
    hours:
      Integer value representing the hour of a day from 0-23.
  
    day:
      Value representing the day of a week.  This can be one of: (1) integer value -- `1` represents Monday; (2) case-insensitive day name (e.g., `"Monday"`);  (3) case-insensitive, 3-character short day name (e.g., `"Mon"`).   <br/> **Warning:** A DateTime definition object with `day`** should not be combined with `year`, `quarter`, `month`, or `date`.
  
    date:
      Integer value representing the date from 1-31.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null -> false
            | _ -> true)
         [("date",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun (i : int)  ->
                       (`Int i : Yojson.Safe.json)))
                     v)) x.date));
         ("day",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
DateTime_Day_Variant.t)
                       ->
                      (DateTime_Day_Variant.to_yojson
                         x : Yojson.Safe.json)))
                    v)) x.day));
         ("hours",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.hours));
         ("milliseconds",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.milliseconds));
         ("minutes",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.minutes));
         ("month",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
DateTime_Month_Variant.t)
                       ->
                      (DateTime_Month_Variant.to_yojson
                         x : Yojson.Safe.json)))
                    v)) x.month));
         ("quarter",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.quarter));
         ("seconds",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.seconds));
         ("utc",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (b : bool)  ->
                      (`Bool b : Yojson.Safe.json)))
                    v)) x.utc));
         ("year",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
v)) x.year))])                                     
  let make ?(year= None)  ?(utc= None) 
    ?(seconds= None)  ?(quarter= None) 
    ?(month= None)  ?(minutes= None) 
    ?(milliseconds= None)  ?(hours= None) 
    ?(day= None)  ?(date= None)  () =
    {
      date;
      day;
      hours;
      milliseconds;
      minutes;
      month;
      quarter;
      seconds;
      utc;
      year
    } 
end and
DateTime_Day_Variant:sig
  type t =
    [
      `String of
        string 
    | `Day of Day.t ]
  val to_yojson :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [ `String of string 
    | `Day of Day.t ]

  let to_yojson =
    function
    | `String v ->
        ((fun (s : string)  ->
            (`String s : Yojson.Safe.json)))
          v
    | `Day v ->
        ((fun (x : Day.t)  ->
            (Day.to_yojson x : Yojson.Safe.json)))
v                                          
end and
DateTime_Month_Variant:sig
  type t =
   [
   `String
   of 
   string 
   | `Month
   of
Month.t ]
  val
   to_yojson
   :
   t ->
Yojson.Safe.json
end =
struct
  type t =
    [ `String of string 
    | `Month of Month.t ]

  let to_yojson =
    function
    | `String v ->
        ((fun (s : string)  ->
            (`String s : Yojson.Safe.json)))
          v
    | `Month v ->
        ((fun (x : Month.t)  ->
            (Month.to_yojson x : 
Yojson.Safe.json))) v                                               
end and
Day:sig
  type t = int
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t = int

  let to_yojson (i : int) =
(`Int i : Yojson.Safe.json)                                                    
end and
Encoding:sig
  type nonrec t =
    {
    y2:
Encoding_Y2_Variant.t
       option
      ;
    y:
Encoding_Y_Variant.t
       option
      ;
    x2:
Encoding_X2_Variant.t
       option
      ;
    x:
Encoding_X_Variant.t
       option
      ;
    tooltip:
Encoding_Tooltip_Variant.t
       option
      ;
    text:
Encoding_Text_Variant.t
       option
      ;
    size:
Encoding_Size_Variant.t
       option
      ;
    shape:
Encoding_Shape_Variant.t
       option
      ;
    order:
Encoding_Order_Variant.t
       option
      ;
    opacity:
Encoding_Opacity_Variant.t
       option
      ;
    detail:
Encoding_Detail_Variant.t
       option
      ;
    color:
Encoding_Color_Variant.t
       option
      }
  val to_yojson
    :
    t ->
Yojson.Safe.json
  val make :
    ?y2:Encoding_Y2_Variant.t
      option ->
      ?y:Encoding_Y_Variant.t
       option ->
       ?x2:Encoding_X2_Variant.t
       option ->
       ?x:Encoding_X_Variant.t
       option ->
       ?tooltip:Encoding_Tooltip_Variant.t
       option ->
       ?text:Encoding_Text_Variant.t
       option ->
       ?size:Encoding_Size_Variant.t
       option ->
       ?shape:Encoding_Shape_Variant.t
       option ->
       ?order:Encoding_Order_Variant.t
       option ->
       ?opacity:Encoding_Opacity_Variant.t
       option ->
       ?detail:Encoding_Detail_Variant.t
       option ->
       ?color:Encoding_Color_Variant.t
       option ->
       unit -> t
end =
struct
  type nonrec t =
    {
    y2:
Encoding_Y2_Variant.t
        option
      ;
    y:
Encoding_Y_Variant.t
        option
      ;
    x2:
Encoding_X2_Variant.t
        option
      ;
    x:
Encoding_X_Variant.t
        option
      ;
    tooltip:
Encoding_Tooltip_Variant.t
        option
      ;
    text:
Encoding_Text_Variant.t
        option
      ;
    size:
Encoding_Size_Variant.t
        option
      ;
    shape:
Encoding_Shape_Variant.t
        option
      ;
    order:
Encoding_Order_Variant.t
        option
      ;
    opacity:
Encoding_Opacity_Variant.t
        option
      ;
    detail:
Encoding_Detail_Variant.t
        option
      ;
    color:
Encoding_Color_Variant.t
        option
      }

  (** Fields
  
    y2:
      Y2 coordinates for ranged  `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
  
    y:
      Y coordinates of the marks, or height of vertical `"bar"` and `"area"`.
  
    x2:
      X2 coordinates for ranged  `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
  
    x:
      X coordinates of the marks, or width of horizontal `"bar"` and `"area"`.
  
    tooltip:
      The tooltip text to show upon mouse hover.
  
    text:
      Text of the `text` mark.
  
    size:
      Size of the mark.
      - For `"point"`, `"square"` and `"circle"`, – the symbol size, or pixel area of the mark.
      - For `"bar"` and `"tick"` – the bar and tick's size.
      - For `"text"` – the text's font size.
      - Size is currently unsupported for `"line"`, `"area"`, and `"rect"`.
  
    shape:
      The symbol's shape (only for `point` marks). The supported values are
      `"circle"` (default), `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`,
      or `"triangle-down"`, or else a custom SVG path string.
      __Default value:__ If undefined, the default shape depends on [mark config](config.html#point-config)'s `shape` property.
  
    order:
      Stack order for stacked marks or order of data points in line marks for connected scatter plots.
      
      __Note__: In aggregate plots, `order` field should be `aggregate`d to avoid creating additional aggregation grouping.
  
    opacity:
      Opacity of the marks – either can be a value or a range.
      
      __Default value:__ If undefined, the default opacity depends on [mark config](config.html#mark)'s `opacity` property.
  
    detail:
      Additional levels of detail for grouping data in aggregate views and
      in line and area marks without mapping data to a specific visual channel.
  
    color:
      Color of the marks – either fill or stroke color based on mark type.
      By default, `color` represents fill color for `"area"`, `"bar"`, `"tick"`,
      `"text"`, `"circle"`, and `"square"` / stroke color for `"line"` and `"point"`.
      
      __Default value:__ If undefined, the default color depends on [mark config](config.html#mark)'s `color` property.
      
      _Note:_ See the scale documentation for more information about customizing [color scheme](scale.html#scheme).
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null ->
                false
            | _ -> true)
         [("color",
            (((function
               | 
None  ->
                `Null
               | 
Some v ->
                ((fun
                (x :
Encoding_Color_Variant.t)
                 ->
                (Encoding_Color_Variant.to_yojson
                x : Yojson.Safe.json)))
                v))
               x.color));
         ("detail",
           (((function
              | None  ->
                `Null
              | Some v ->
                ((fun
                (x :
Encoding_Detail_Variant.t)
                 ->
                (Encoding_Detail_Variant.to_yojson
                x : Yojson.Safe.json)))
                v))
              x.detail));
         ("opacity",
           (((function
              | None  ->
                `Null
              | Some v ->
                ((fun
                (x :
Encoding_Opacity_Variant.t)
                 ->
                (Encoding_Opacity_Variant.to_yojson
                x : Yojson.Safe.json)))
                v))
              x.opacity));
         ("order",
           (((function
              | None  ->
                `Null
              | Some v ->
                ((fun
                (x :
Encoding_Order_Variant.t)
                 ->
                (Encoding_Order_Variant.to_yojson
                x : Yojson.Safe.json)))
                v))
              x.order));
         ("shape",
           (((function
              | None  ->
                `Null
              | Some v ->
                ((fun
                (x :
Encoding_Shape_Variant.t)
                 ->
                (Encoding_Shape_Variant.to_yojson
                x : Yojson.Safe.json)))
                v))
              x.shape));
         ("size",
           (((function
              | None  ->
                `Null
              | Some v ->
                ((fun
                (x :
Encoding_Size_Variant.t)
                 ->
                (Encoding_Size_Variant.to_yojson
                x : Yojson.Safe.json)))
                v))
              x.size));
         ("text",
           (((function
              | None  ->
                `Null
              | Some v ->
                ((fun
                (x :
Encoding_Text_Variant.t)
                 ->
                (Encoding_Text_Variant.to_yojson
                x : Yojson.Safe.json)))
                v))
              x.text));
         ("tooltip",
           (((function
              | None  ->
                `Null
              | Some v ->
                ((fun
                (x :
Encoding_Tooltip_Variant.t)
                 ->
                (Encoding_Tooltip_Variant.to_yojson
                x : Yojson.Safe.json)))
                v))
              x.tooltip));
         ("x",
           (((function
              | None  ->
                `Null
              | Some v ->
                ((fun
                (x :
Encoding_X_Variant.t)
                 ->
                (Encoding_X_Variant.to_yojson
                x : Yojson.Safe.json)))
                v)) x.x));
         ("x2",
           (((function
              | None  ->
                `Null
              | Some v ->
                ((fun
                (x :
Encoding_X2_Variant.t)
                 ->
                (Encoding_X2_Variant.to_yojson
                x : Yojson.Safe.json)))
                v)) x.x2));
         ("y",
           (((function
              | None  ->
                `Null
              | Some v ->
                ((fun
                (x :
Encoding_Y_Variant.t)
                 ->
                (Encoding_Y_Variant.to_yojson
                x : Yojson.Safe.json)))
                v)) x.y));
         ("y2",
           (((function
              | None  ->
                `Null
              | Some v ->
                ((fun
                (x :
Encoding_Y2_Variant.t)
                 ->
                (Encoding_Y2_Variant.to_yojson
                x : Yojson.Safe.json)))
v)) x.y2))])                                                         
  let make ?(y2= None) 
    ?(y= None)  ?(x2=
None)  ?(x= None) 
    ?(tooltip= None) 
    ?(text= None) 
    ?(size= None) 
    ?(shape= None) 
    ?(order= None) 
    ?(opacity= None) 
    ?(detail= None) 
    ?(color= None)  () =
    {
      color;
      detail;
      opacity;
      order;
      shape;
      size;
      text;
      tooltip;
      x;
      x2;
      y;
      y2
    } 
end and
EncodingWithFacet:
                                                         sig
  type nonrec t =
    {
    y2:
EncodingWithFacet_Y2_Variant.t
        option
      ;
    y:
EncodingWithFacet_Y_Variant.t
        option
      ;
    x2:
EncodingWithFacet_X2_Variant.t
        option
      ;
    x:
EncodingWithFacet_X_Variant.t
        option
      ;
    tooltip:
EncodingWithFacet_Tooltip_Variant.t
        option
      ;
    text:
EncodingWithFacet_Text_Variant.t
        option
      ;
    size:
EncodingWithFacet_Size_Variant.t
        option
      ;
    shape:
EncodingWithFacet_Shape_Variant.t
        option
      ;
    row:
FacetFieldDef.t
        option
      ;
    order:
EncodingWithFacet_Order_Variant.t
        option
      ;
    opacity:
EncodingWithFacet_Opacity_Variant.t
        option
      ;
    detail:
EncodingWithFacet_Detail_Variant.t
        option
      ;
    column:
FacetFieldDef.t
        option
      ;
    color:
EncodingWithFacet_Color_Variant.t
        option
      }
  val to_yojson :
    t ->
Yojson.Safe.json
  val make :
    ?y2:EncodingWithFacet_Y2_Variant.t
      option ->
      ?y:EncodingWithFacet_Y_Variant.t
        option ->
        ?x2:EncodingWithFacet_X2_Variant.t
          option ->
          ?x:EncodingWithFacet_X_Variant.t
           option ->
           ?tooltip:EncodingWithFacet_Tooltip_Variant.t
           option ->
           ?text:EncodingWithFacet_Text_Variant.t
           option ->
           ?size:EncodingWithFacet_Size_Variant.t
           option ->
           ?shape:EncodingWithFacet_Shape_Variant.t
           option ->
           ?row:FacetFieldDef.t
           option ->
           ?order:EncodingWithFacet_Order_Variant.t
           option ->
           ?opacity:EncodingWithFacet_Opacity_Variant.t
           option ->
           ?detail:EncodingWithFacet_Detail_Variant.t
           option ->
           ?column:FacetFieldDef.t
           option ->
           ?color:EncodingWithFacet_Color_Variant.t
           option ->
           unit -> t
end =
struct
  type nonrec t =
    {
    y2:
EncodingWithFacet_Y2_Variant.t
        option
      ;
    y:
EncodingWithFacet_Y_Variant.t
        option
      ;
    x2:
EncodingWithFacet_X2_Variant.t
        option
      ;
    x:
EncodingWithFacet_X_Variant.t
        option
      ;
    tooltip:
EncodingWithFacet_Tooltip_Variant.t
        option
      ;
    text:
EncodingWithFacet_Text_Variant.t
        option
      ;
    size:
EncodingWithFacet_Size_Variant.t
        option
      ;
    shape:
EncodingWithFacet_Shape_Variant.t
        option
      ;
    row:
FacetFieldDef.t
        option
      ;
    order:
EncodingWithFacet_Order_Variant.t
        option
      ;
    opacity:
EncodingWithFacet_Opacity_Variant.t
        option
      ;
    detail:
EncodingWithFacet_Detail_Variant.t
        option
      ;
    column:
FacetFieldDef.t
        option
      ;
    color:
EncodingWithFacet_Color_Variant.t
        option
      }

  (** Fields
  
    y2:
      Y2 coordinates for ranged  `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
  
    y:
      Y coordinates of the marks, or height of vertical `"bar"` and `"area"`.
  
    x2:
      X2 coordinates for ranged  `"area"`, `"bar"`, `"rect"`, and  `"rule"`.
  
    x:
      X coordinates of the marks, or width of horizontal `"bar"` and `"area"`.
  
    tooltip:
      The tooltip text to show upon mouse hover.
  
    text:
      Text of the `text` mark.
  
    size:
      Size of the mark.
      - For `"point"`, `"square"` and `"circle"`, – the symbol size, or pixel area of the mark.
      - For `"bar"` and `"tick"` – the bar and tick's size.
      - For `"text"` – the text's font size.
      - Size is currently unsupported for `"line"`, `"area"`, and `"rect"`.
  
    shape:
      The symbol's shape (only for `point` marks). The supported values are
      `"circle"` (default), `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`,
      or `"triangle-down"`, or else a custom SVG path string.
      __Default value:__ If undefined, the default shape depends on [mark config](config.html#point-config)'s `shape` property.
  
    row:
      Vertical facets for trellis plots.
  
    order:
      Stack order for stacked marks or order of data points in line marks for connected scatter plots.
      
      __Note__: In aggregate plots, `order` field should be `aggregate`d to avoid creating additional aggregation grouping.
  
    opacity:
      Opacity of the marks – either can be a value or a range.
      
      __Default value:__ If undefined, the default opacity depends on [mark config](config.html#mark)'s `opacity` property.
  
    detail:
      Additional levels of detail for grouping data in aggregate views and
      in line and area marks without mapping data to a specific visual channel.
  
    column:
      Horizontal facets for trellis plots.
  
    color:
      Color of the marks – either fill or stroke color based on mark type.
      By default, `color` represents fill color for `"area"`, `"bar"`, `"tick"`,
      `"text"`, `"circle"`, and `"square"` / stroke color for `"line"` and `"point"`.
      
      __Default value:__ If undefined, the default color depends on [mark config](config.html#mark)'s `color` property.
      
      _Note:_ See the scale documentation for more information about customizing [color scheme](scale.html#scheme).
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun 
           (k,v)  ->
           match v
           with
           | 
           `Null ->
           false
           | 
           _ -> true)
         [("color",
           (((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (x :
EncodingWithFacet_Color_Variant.t)
            ->
           (EncodingWithFacet_Color_Variant.to_yojson
           x : Yojson.Safe.json)))
           v))
           x.color));
         ("column",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (x :
FacetFieldDef.t)
            ->
           (FacetFieldDef.to_yojson
           x : Yojson.Safe.json)))
           v))
           x.column));
         ("detail",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (x :
EncodingWithFacet_Detail_Variant.t)
            ->
           (EncodingWithFacet_Detail_Variant.to_yojson
           x : Yojson.Safe.json)))
           v))
           x.detail));
         ("opacity",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (x :
EncodingWithFacet_Opacity_Variant.t)
            ->
           (EncodingWithFacet_Opacity_Variant.to_yojson
           x : Yojson.Safe.json)))
           v))
           x.opacity));
         ("order",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (x :
EncodingWithFacet_Order_Variant.t)
            ->
           (EncodingWithFacet_Order_Variant.to_yojson
           x : Yojson.Safe.json)))
           v))
           x.order));
         ("row",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (x :
FacetFieldDef.t)
            ->
           (FacetFieldDef.to_yojson
           x : Yojson.Safe.json)))
           v)) x.row));
         ("shape",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (x :
EncodingWithFacet_Shape_Variant.t)
            ->
           (EncodingWithFacet_Shape_Variant.to_yojson
           x : Yojson.Safe.json)))
           v))
           x.shape));
         ("size",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (x :
EncodingWithFacet_Size_Variant.t)
            ->
           (EncodingWithFacet_Size_Variant.to_yojson
           x : Yojson.Safe.json)))
           v))
           x.size));
         ("text",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (x :
EncodingWithFacet_Text_Variant.t)
            ->
           (EncodingWithFacet_Text_Variant.to_yojson
           x : Yojson.Safe.json)))
           v))
           x.text));
         ("tooltip",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (x :
EncodingWithFacet_Tooltip_Variant.t)
            ->
           (EncodingWithFacet_Tooltip_Variant.to_yojson
           x : Yojson.Safe.json)))
           v))
           x.tooltip));
         ("x",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (x :
EncodingWithFacet_X_Variant.t)
            ->
           (EncodingWithFacet_X_Variant.to_yojson
           x : Yojson.Safe.json)))
           v)) x.x));
         ("x2",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (x :
EncodingWithFacet_X2_Variant.t)
            ->
           (EncodingWithFacet_X2_Variant.to_yojson
           x : Yojson.Safe.json)))
           v)) x.x2));
         ("y",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (x :
EncodingWithFacet_Y_Variant.t)
            ->
           (EncodingWithFacet_Y_Variant.to_yojson
           x : Yojson.Safe.json)))
           v)) x.y));
         ("y2",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (x :
EncodingWithFacet_Y2_Variant.t)
            ->
           (EncodingWithFacet_Y2_Variant.to_yojson
           x : Yojson.Safe.json)))
v)) x.y2))])                                                              
  let make ?(y2=
None)  ?(y=
None)  ?(x2=
None)  ?(x=
None) 
    ?(tooltip= None)
     ?(text= None) 
    ?(size= None) 
    ?(shape= None) 
    ?(row= None) 
    ?(order= None) 
    ?(opacity= None)
     ?(detail= None)
     ?(column= None)
     ?(color= None) 
    () =
    {
      color;
      column;
      detail;
      opacity;
      order;
      row;
      shape;
      size;
      text;
      tooltip;
      x;
      x2;
      y;
      y2
    } 
end and
EncodingWithFacet_Color_Variant:
                                                              sig
  type t =
    [
      `ConditionalLegendValueDef
      of
ConditionalLegendValueDef.t
       | 
      `ConditionalLegendFieldDef
      of
ConditionalLegendFieldDef.t
      ]
  val to_yojson
    :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [
      `ConditionalLegendValueDef
      of
ConditionalLegendValueDef.t
       | 
      `ConditionalLegendFieldDef
      of
ConditionalLegendFieldDef.t
      ]

  let to_yojson
    =
    function
    | `ConditionalLegendValueDef
      v ->
      ((fun
      (x :
ConditionalLegendValueDef.t)
       ->
      (ConditionalLegendValueDef.to_yojson
      x : Yojson.Safe.json)))
      v
    | `ConditionalLegendFieldDef
      v ->
      ((fun
      (x :
ConditionalLegendFieldDef.t)
       ->
      (ConditionalLegendFieldDef.to_yojson
      x : Yojson.Safe.json)))
v                                                                   
end and
EncodingWithFacet_Detail_Variant:
                                                                   sig
 type t =
 [
 `FieldDef_List
 of
FieldDef.t
 list 
 | `FieldDef
 of
FieldDef.t
 ]
 val
 to_yojson
 :
 t ->
Yojson.Safe.json
end =
struct
 type t =
 [
 `FieldDef_List
 of
FieldDef.t
 list 
 | `FieldDef
 of
FieldDef.t
 ]

 let to_yojson
 =
 function
 | 
 `FieldDef_List
 v ->
 ((fun
 (l :
FieldDef.t
 list)  ->
 let yojson_of_el
 (x :
FieldDef.t)
 =
 (FieldDef.to_yojson
 x : 
Yojson.Safe.json)
  in
 (`List
 (List.map
 yojson_of_el
 l) : 
Yojson.Safe.json)))
 v
 | 
 `FieldDef
 v ->
 ((fun
 (x :
FieldDef.t)
  ->
 (FieldDef.to_yojson
 x : Yojson.Safe.json)))
 v 
end
and
EncodingWithFacet_Opacity_Variant:sig
  type t =
    [
      `ConditionalLegendValueDef of
ConditionalLegendValueDef.t 
    | `ConditionalLegendFieldDef of
ConditionalLegendFieldDef.t ]
  val to_yojson : t -> Yojson.Safe.json
end =
struct
  type t =
    [ `ConditionalLegendValueDef of ConditionalLegendValueDef.t 
    | `ConditionalLegendFieldDef of ConditionalLegendFieldDef.t ]

  let to_yojson =
    function
    | `ConditionalLegendValueDef v ->
        ((fun (x : ConditionalLegendValueDef.t)  ->
            (ConditionalLegendValueDef.to_yojson x : Yojson.Safe.json))) v
    | `ConditionalLegendFieldDef v ->
        ((fun (x : ConditionalLegendFieldDef.t)  ->
(ConditionalLegendFieldDef.to_yojson x : Yojson.Safe.json))) v       
end and
EncodingWithFacet_Order_Variant:sig
  type t =
    [
      `OrderFieldDef_List of
OrderFieldDef.t list 
    | `OrderFieldDef of
OrderFieldDef.t ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [ `OrderFieldDef_List of OrderFieldDef.t list 
    | `OrderFieldDef of OrderFieldDef.t ]

  let to_yojson =
    function
    | `OrderFieldDef_List v ->
        ((fun (l : OrderFieldDef.t list)  ->
            let yojson_of_el (x : OrderFieldDef.t) =
              (OrderFieldDef.to_yojson x : Yojson.Safe.json)  in
            (`List (List.map yojson_of_el l) : Yojson.Safe.json))) v
    | `OrderFieldDef v ->
        ((fun (x : OrderFieldDef.t)  ->
(OrderFieldDef.to_yojson x : Yojson.Safe.json))) v            
end and
EncodingWithFacet_Shape_Variant:sig
  type t =
    [
      `ConditionalLegendValueDef
        of
ConditionalLegendValueDef.t
         | `ConditionalLegendFieldDef
             of
ConditionalLegendFieldDef.t
             ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [ `ConditionalLegendValueDef of ConditionalLegendValueDef.t 
    | `ConditionalLegendFieldDef of ConditionalLegendFieldDef.t ]

  let to_yojson =
    function
    | `ConditionalLegendValueDef v ->
        ((fun (x : ConditionalLegendValueDef.t)  ->
            (ConditionalLegendValueDef.to_yojson x : Yojson.Safe.json)))
          v
    | `ConditionalLegendFieldDef v ->
        ((fun (x : ConditionalLegendFieldDef.t)  ->
            (ConditionalLegendFieldDef.to_yojson x : Yojson.Safe.json)))
v                 
end and
EncodingWithFacet_Size_Variant:sig
  type t =
    [
      `ConditionalLegendValueDef
        of
ConditionalLegendValueDef.t
         | `ConditionalLegendFieldDef
             of
ConditionalLegendFieldDef.t
             ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [
      `ConditionalLegendValueDef of
ConditionalLegendValueDef.t 
    | `ConditionalLegendFieldDef of
ConditionalLegendFieldDef.t ]

  let to_yojson =
    function
    | `ConditionalLegendValueDef v ->
        ((fun (x : ConditionalLegendValueDef.t)  ->
            (ConditionalLegendValueDef.to_yojson x : 
Yojson.Safe.json))) v
    | `ConditionalLegendFieldDef v ->
        ((fun (x : ConditionalLegendFieldDef.t)  ->
            (ConditionalLegendFieldDef.to_yojson x : 
Yojson.Safe.json))) v                      
end and
EncodingWithFacet_Text_Variant:sig
  type t =
    [
      `ConditionalTextValueDef
        of
ConditionalTextValueDef.t
         | `ConditionalTextFieldDef
             of
ConditionalTextFieldDef.t
             ]
  val to_yojson :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [
      `ConditionalTextValueDef of
ConditionalTextValueDef.t 
    | `ConditionalTextFieldDef of
ConditionalTextFieldDef.t ]

  let to_yojson =
    function
    | `ConditionalTextValueDef v ->
        ((fun (x : ConditionalTextValueDef.t)  ->
            (ConditionalTextValueDef.to_yojson x : 
Yojson.Safe.json))) v
    | `ConditionalTextFieldDef v ->
        ((fun (x : ConditionalTextFieldDef.t)  ->
            (ConditionalTextFieldDef.to_yojson x : 
Yojson.Safe.json))) v                           
end and
EncodingWithFacet_Tooltip_Variant:sig
  type t =
    [
      `ConditionalTextValueDef
       of
ConditionalTextValueDef.t
        | 
      `ConditionalTextFieldDef
       of
ConditionalTextFieldDef.t
       ]
  val to_yojson
    :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [
      `ConditionalTextValueDef of
ConditionalTextValueDef.t 
    | `ConditionalTextFieldDef of
ConditionalTextFieldDef.t ]

  let to_yojson =
    function
    | `ConditionalTextValueDef v ->
        ((fun (x : ConditionalTextValueDef.t)  ->
            (ConditionalTextValueDef.to_yojson x : 
Yojson.Safe.json))) v
    | `ConditionalTextFieldDef v ->
        ((fun (x : ConditionalTextFieldDef.t)  ->
            (ConditionalTextFieldDef.to_yojson x : 
Yojson.Safe.json))) v                                
end and
EncodingWithFacet_X2_Variant:sig
  type t =
    [
      `ValueDef
       of
ValueDef.t
        | 
      `FieldDef
       of
FieldDef.t
       ]
  val to_yojson
    :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [ `ValueDef of ValueDef.t 
    | `FieldDef of FieldDef.t ]

  let to_yojson =
    function
    | `ValueDef v ->
        ((fun (x : ValueDef.t)  ->
            (ValueDef.to_yojson x : Yojson.Safe.json)))
          v
    | `FieldDef v ->
        ((fun (x : FieldDef.t)  ->
            (FieldDef.to_yojson x : Yojson.Safe.json)))
v                                     
end and
EncodingWithFacet_X_Variant:sig
  type t =
   [
   `ValueDef
   of
ValueDef.t
    | 
   `PositionFieldDef
   of
PositionFieldDef.t
   ]
  val
   to_yojson
   :
   t ->
Yojson.Safe.json
end =
struct
  type t =
    [ `ValueDef of ValueDef.t 
    | `PositionFieldDef of
PositionFieldDef.t ]

  let to_yojson =
    function
    | `ValueDef v ->
        ((fun (x : ValueDef.t)  ->
            (ValueDef.to_yojson x : 
Yojson.Safe.json))) v
    | `PositionFieldDef v ->
        ((fun (x : PositionFieldDef.t) 
            ->
            (PositionFieldDef.to_yojson
x : Yojson.Safe.json))) v                                          
end and
EncodingWithFacet_Y2_Variant:
                                          sig
  type t =
    [ `ValueDef of ValueDef.t 
    | `FieldDef of FieldDef.t ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [ `ValueDef of ValueDef.t 
    | `FieldDef of FieldDef.t ]

  let to_yojson =
    function
    | `ValueDef v ->
        ((fun (x : ValueDef.t)  ->
            (ValueDef.to_yojson x : 
Yojson.Safe.json))) v
    | `FieldDef v ->
        ((fun (x : FieldDef.t)  ->
            (FieldDef.to_yojson x : 
Yojson.Safe.json))) v                                               
end and
EncodingWithFacet_Y_Variant:
                                               sig
  type t =
    [ `ValueDef of ValueDef.t 
    | `PositionFieldDef of
PositionFieldDef.t ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [ `ValueDef of ValueDef.t 
    | `PositionFieldDef of
PositionFieldDef.t ]

  let to_yojson =
    function
    | `ValueDef v ->
        ((fun (x : ValueDef.t)
             ->
            (ValueDef.to_yojson
               x : Yojson.Safe.json)))
          v
    | `PositionFieldDef v ->
        ((fun
            (x :
PositionFieldDef.t)
             ->
            (PositionFieldDef.to_yojson
               x : Yojson.Safe.json)))
v                                                    
end and
Encoding_Color_Variant:
                                                    sig
  type t =
    [
      `ConditionalLegendValueDef
        of
ConditionalLegendValueDef.t
         | `ConditionalLegendFieldDef
             of
ConditionalLegendFieldDef.t
             ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [
      `ConditionalLegendValueDef
        of
ConditionalLegendValueDef.t
         | `ConditionalLegendFieldDef
             of
ConditionalLegendFieldDef.t
             ]

  let to_yojson =
    function
    | `ConditionalLegendValueDef
        v ->
        ((fun
            (x :
ConditionalLegendValueDef.t)
             ->
            (ConditionalLegendValueDef.to_yojson
               x : 
Yojson.Safe.json)))
          v
    | `ConditionalLegendFieldDef
        v ->
        ((fun
            (x :
ConditionalLegendFieldDef.t)
             ->
            (ConditionalLegendFieldDef.to_yojson
               x : 
Yojson.Safe.json)))
v                                                         
end and
Encoding_Detail_Variant:
                                                         sig
  type t =
    [
      `FieldDef_List
        of
FieldDef.t
          list
         | `FieldDef
           of
FieldDef.t
           ]
  val to_yojson :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [
      `FieldDef_List
        of
FieldDef.t
          list
         | `FieldDef
           of
FieldDef.t
           ]

  let to_yojson =
    function
    | `FieldDef_List
        v ->
        ((fun
           (l :
FieldDef.t
           list)  ->
           let yojson_of_el
           (x :
FieldDef.t)
           =
           (FieldDef.to_yojson
           x : 
Yojson.Safe.json)
            in
           (`List
           (List.map
           yojson_of_el
           l) : 
Yojson.Safe.json)))
          v
    | `FieldDef v ->
        ((fun
           (x :
FieldDef.t)
            ->
           (FieldDef.to_yojson
           x : 
Yojson.Safe.json)))
v                                                              
end and
Encoding_Opacity_Variant:
                                                              sig
  type t =
    [
      `ConditionalLegendValueDef
      of
ConditionalLegendValueDef.t
       | 
      `ConditionalLegendFieldDef
      of
ConditionalLegendFieldDef.t
      ]
  val to_yojson
    :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [
      `ConditionalLegendValueDef
      of
ConditionalLegendValueDef.t
       | 
      `ConditionalLegendFieldDef
      of
ConditionalLegendFieldDef.t
      ]

  let to_yojson
    =
    function
    | `ConditionalLegendValueDef
      v ->
      ((fun
      (x :
ConditionalLegendValueDef.t)
       ->
      (ConditionalLegendValueDef.to_yojson
      x : Yojson.Safe.json)))
      v
    | `ConditionalLegendFieldDef
      v ->
      ((fun
      (x :
ConditionalLegendFieldDef.t)
       ->
      (ConditionalLegendFieldDef.to_yojson
      x : Yojson.Safe.json)))
v                                                                   
end and
Encoding_Order_Variant:
                                                                   sig
 type t =
 [
 `OrderFieldDef_List
 of
OrderFieldDef.t
 list 
 | `OrderFieldDef
 of
OrderFieldDef.t
 ]
 val
 to_yojson
 :
 t ->
Yojson.Safe.json
end =
struct
 type t =
 [
 `OrderFieldDef_List
 of
OrderFieldDef.t
 list 
 | `OrderFieldDef
 of
OrderFieldDef.t
 ]

 let to_yojson
 =
 function
 | 
 `OrderFieldDef_List
 v ->
 ((fun
 (l :
OrderFieldDef.t
 list)  ->
 let yojson_of_el
 (x :
OrderFieldDef.t)
 =
 (OrderFieldDef.to_yojson
 x : 
Yojson.Safe.json)
  in
 (`List
 (List.map
 yojson_of_el
 l) : 
Yojson.Safe.json)))
 v
 | 
 `OrderFieldDef
 v ->
 ((fun
 (x :
OrderFieldDef.t)
  ->
 (OrderFieldDef.to_yojson
 x : Yojson.Safe.json)))
 v 
end
and
Encoding_Shape_Variant:sig
  type t =
    [
      `ConditionalLegendValueDef of
ConditionalLegendValueDef.t 
    | `ConditionalLegendFieldDef of
ConditionalLegendFieldDef.t ]
  val to_yojson : t -> Yojson.Safe.json
end =
struct
  type t =
    [ `ConditionalLegendValueDef of ConditionalLegendValueDef.t 
    | `ConditionalLegendFieldDef of ConditionalLegendFieldDef.t ]

  let to_yojson =
    function
    | `ConditionalLegendValueDef v ->
        ((fun (x : ConditionalLegendValueDef.t)  ->
            (ConditionalLegendValueDef.to_yojson x : Yojson.Safe.json))) v
    | `ConditionalLegendFieldDef v ->
        ((fun (x : ConditionalLegendFieldDef.t)  ->
(ConditionalLegendFieldDef.to_yojson x : Yojson.Safe.json))) v       
end and
Encoding_Size_Variant:sig
  type t =
    [
      `ConditionalLegendValueDef of
ConditionalLegendValueDef.t 
    | `ConditionalLegendFieldDef of
ConditionalLegendFieldDef.t ]
  val to_yojson : t -> Yojson.Safe.json
end =
struct
  type t =
    [ `ConditionalLegendValueDef of ConditionalLegendValueDef.t 
    | `ConditionalLegendFieldDef of ConditionalLegendFieldDef.t ]

  let to_yojson =
    function
    | `ConditionalLegendValueDef v ->
        ((fun (x : ConditionalLegendValueDef.t)  ->
            (ConditionalLegendValueDef.to_yojson x : Yojson.Safe.json)))
          v
    | `ConditionalLegendFieldDef v ->
        ((fun (x : ConditionalLegendFieldDef.t)  ->
            (ConditionalLegendFieldDef.to_yojson x : Yojson.Safe.json)))
v            
end and
Encoding_Text_Variant:sig
  type t =
    [
      `ConditionalTextValueDef of
ConditionalTextValueDef.t 
    | `ConditionalTextFieldDef of
ConditionalTextFieldDef.t ]
  val to_yojson : t -> Yojson.Safe.json
end =
struct
  type t =
    [ `ConditionalTextValueDef of ConditionalTextValueDef.t 
    | `ConditionalTextFieldDef of ConditionalTextFieldDef.t ]

  let to_yojson =
    function
    | `ConditionalTextValueDef v ->
        ((fun (x : ConditionalTextValueDef.t)  ->
            (ConditionalTextValueDef.to_yojson x : Yojson.Safe.json)))
          v
    | `ConditionalTextFieldDef v ->
        ((fun (x : ConditionalTextFieldDef.t)  ->
            (ConditionalTextFieldDef.to_yojson x : Yojson.Safe.json)))
v                 
end and
Encoding_Tooltip_Variant:sig
  type t =
    [
      `ConditionalTextValueDef of
ConditionalTextValueDef.t 
    | `ConditionalTextFieldDef of
ConditionalTextFieldDef.t ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [ `ConditionalTextValueDef of ConditionalTextValueDef.t 
    | `ConditionalTextFieldDef of ConditionalTextFieldDef.t ]

  let to_yojson =
    function
    | `ConditionalTextValueDef v ->
        ((fun (x : ConditionalTextValueDef.t)  ->
            (ConditionalTextValueDef.to_yojson x : Yojson.Safe.json)))
          v
    | `ConditionalTextFieldDef v ->
        ((fun (x : ConditionalTextFieldDef.t)  ->
            (ConditionalTextFieldDef.to_yojson x : Yojson.Safe.json)))
v                      
end and
Encoding_X2_Variant:sig
  type t =
    [ `ValueDef of ValueDef.t 
    | `FieldDef of FieldDef.t ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [ `ValueDef of ValueDef.t 
    | `FieldDef of FieldDef.t ]

  let to_yojson =
    function
    | `ValueDef v ->
        ((fun (x : ValueDef.t)  ->
            (ValueDef.to_yojson x : Yojson.Safe.json)))
          v
    | `FieldDef v ->
        ((fun (x : FieldDef.t)  ->
            (FieldDef.to_yojson x : Yojson.Safe.json)))
v                           
end and
Encoding_X_Variant:sig
  type t =
    [ `ValueDef of ValueDef.t 
    | `PositionFieldDef of
PositionFieldDef.t ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [ `ValueDef of ValueDef.t 
    | `PositionFieldDef of PositionFieldDef.t ]

  let to_yojson =
    function
    | `ValueDef v ->
        ((fun (x : ValueDef.t)  ->
            (ValueDef.to_yojson x : Yojson.Safe.json)))
          v
    | `PositionFieldDef v ->
        ((fun (x : PositionFieldDef.t)  ->
            (PositionFieldDef.to_yojson x : 
Yojson.Safe.json))) v                                
end and
Encoding_Y2_Variant:sig
  type t =
    [
      `ValueDef of
ValueDef.t 
    | `FieldDef of
FieldDef.t ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [ `ValueDef of ValueDef.t 
    | `FieldDef of FieldDef.t ]

  let to_yojson =
    function
    | `ValueDef v ->
        ((fun (x : ValueDef.t)  ->
            (ValueDef.to_yojson x : Yojson.Safe.json)))
          v
    | `FieldDef v ->
        ((fun (x : FieldDef.t)  ->
            (FieldDef.to_yojson x : Yojson.Safe.json)))
v                                     
end and
Encoding_Y_Variant:sig
  type t =
    [
      `ValueDef of
ValueDef.t 
    | `PositionFieldDef
        of
PositionFieldDef.t
        ]
  val to_yojson :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [ `ValueDef of ValueDef.t 
    | `PositionFieldDef of
PositionFieldDef.t ]

  let to_yojson =
    function
    | `ValueDef v ->
        ((fun (x : ValueDef.t)  ->
            (ValueDef.to_yojson x : 
Yojson.Safe.json))) v
    | `PositionFieldDef v ->
        ((fun (x : PositionFieldDef.t) 
            ->
            (PositionFieldDef.to_yojson
x : Yojson.Safe.json))) v                                          
end and
EqualFilter:sig
  type nonrec t =
    {
    timeUnit:
TimeUnit.t option ;
    field: string ;
    equal:
EqualFilter_Equal_Variant.t
      }
  val to_yojson :
    t ->
Yojson.Safe.json
  val make :
    ?timeUnit:TimeUnit.t
      option ->
      string ->
EqualFilter_Equal_Variant.t
          -> t
end =
struct
  type nonrec t =
    {
    timeUnit: TimeUnit.t option ;
    field: string ;
    equal:
EqualFilter_Equal_Variant.t }

  (** Fields
  
    timeUnit:
      Time unit for the field to be filtered.
  
    field:
      Field to be filtered.
  
    equal:
      The value that the field should be equal to.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null -> false
            | _ -> true)
         [("equal",
            (((fun
                 (x :
EqualFilter_Equal_Variant.t)
                  ->
                 (EqualFilter_Equal_Variant.to_yojson
                    x : Yojson.Safe.json)))
               x.equal));
         ("field",
           (((fun (s : string)  ->
                (`String s : 
Yojson.Safe.json)))
              x.field));
         ("timeUnit",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
TimeUnit.t)
                       ->
                      (TimeUnit.to_yojson
                         x : 
Yojson.Safe.json)))
v)) x.timeUnit))])                                               
  let make ?(timeUnit= None)  field
    equal =
    { equal; field; timeUnit } 
end and
EqualFilter_Equal_Variant:
                                               sig
  type t =
    [ `DateTime of DateTime.t 
    | `Boolean of bool 
    | `Number of int 
    | `String of string ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [ `DateTime of DateTime.t 
    | `Boolean of bool 
    | `Number of int 
    | `String of string ]

  let to_yojson =
    function
    | `DateTime v ->
        ((fun (x : DateTime.t)
             ->
            (DateTime.to_yojson
               x : Yojson.Safe.json)))
          v
    | `Boolean v ->
        ((fun (b : bool)  ->
            (`Bool b : 
Yojson.Safe.json)))
          v
    | `Number v ->
        ((fun (i : int)  ->
            (`Int i : 
Yojson.Safe.json)))
          v
    | `String v ->
        ((fun (s : string)  ->
            (`String s : 
Yojson.Safe.json)))
v                                                    
end and
Facet:sig
  type nonrec t =
    {
    row:
FacetFieldDef.t
        option
      ;
    column:
FacetFieldDef.t
        option
      }
  val to_yojson :
    t ->
Yojson.Safe.json
  val make :
    ?row:FacetFieldDef.t
      option ->
      ?column:FacetFieldDef.t
        option ->
        unit -> t
end =
struct
  type nonrec t =
    {
    row:
FacetFieldDef.t
        option
      ;
    column:
FacetFieldDef.t
        option
      }

  (** Fields
  
    row:
      Vertical facets for trellis plots.
  
    column:
      Horizontal facets for trellis plots.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null ->
                false
            | _ -> true)
         [("column",
            (((function
               | 
None  ->
                `Null
               | 
Some v ->
                ((fun
                (x :
FacetFieldDef.t)
                 ->
                (FacetFieldDef.to_yojson
                x : Yojson.Safe.json)))
                v))
               x.column));
         ("row",
           (((function
              | None  ->
                `Null
              | Some v ->
                ((fun
                (x :
FacetFieldDef.t)
                 ->
                (FacetFieldDef.to_yojson
                x : Yojson.Safe.json)))
v)) x.row))])                                                         
  let make ?(row= None) 
    ?(column= None)  () =
    { column; row } 
end and
FacetFieldDef:
                                                         sig
  type nonrec t =
    {
    type_: Type.t ;
    timeUnit:
TimeUnit.t
        option
      ;
    sort:
SortOrder.t
        option
      ;
    header:
Header.t
        option
      ;
    field:
Field.t option ;
    bin:
FacetFieldDef_Bin_Variant.t
        option
      ;
    aggregate:
Aggregate.t
        option
      }
  val to_yojson :
    t ->
Yojson.Safe.json
  val make :
    ?timeUnit:TimeUnit.t
      option ->
      ?sort:SortOrder.t
        option ->
        ?header:Header.t
          option ->
          ?field:Field.t
           option ->
           ?bin:FacetFieldDef_Bin_Variant.t
           option ->
           ?aggregate:Aggregate.t
           option ->
Type.t ->
           t
end =
struct
  type nonrec t =
    {
    type_: Type.t ;
    timeUnit:
TimeUnit.t
        option
      ;
    sort:
SortOrder.t
        option
      ;
    header:
Header.t
        option
      ;
    field:
Field.t option ;
    bin:
FacetFieldDef_Bin_Variant.t
        option
      ;
    aggregate:
Aggregate.t
        option
      }

  (** Fields
  
    type:
      The encoded field's type of measurement. This can be either a full type
      name (`"quantitative"`, `"temporal"`, `"ordinal"`,  and `"nominal"`).
  
    timeUnit:
      Time unit for a `temporal` field  (e.g., `year`, `yearmonth`, `month`, `hour`).
      
      __Default value:__ `undefined` (None)
  
    sort:
      Sort order for a facet field.
      This can be `"ascending"`, `"descending"`.
  
    field:
      __Required.__ A string defining the name of the field from which to pull a data value
      or an object defining iterated values from the [`repeat`](repeat.html) operator.
      
      __Note:__ `field` is not required if `aggregate` is `count`.
  
    bin:
      A flag for binning a `quantitative` field, or [an object defining binning parameters](bin.html#params).
      If `true`, default [binning parameters](bin.html) will be applied.
      
      __Default value:__ `false`
  
    aggregate:
      Aggregation function for the field
      (e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).
      
      __Default value:__ `undefined` (None)
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun 
           (k,v)  ->
           match v
           with
           | 
           `Null ->
           false
           | 
           _ -> true)
         [("aggregate",
           (((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (x :
Aggregate.t)
            ->
           (Aggregate.to_yojson
           x : Yojson.Safe.json)))
           v))
           x.aggregate));
         ("bin",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (x :
FacetFieldDef_Bin_Variant.t)
            ->
           (FacetFieldDef_Bin_Variant.to_yojson
           x : Yojson.Safe.json)))
           v)) x.bin));
         ("field",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (x :
Field.t) 
           ->
           (Field.to_yojson
           x : Yojson.Safe.json)))
           v))
           x.field));
         ("header",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (x :
Header.t)
            ->
           (Header.to_yojson
           x : Yojson.Safe.json)))
           v))
           x.header));
         ("sort",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (x :
SortOrder.t)
            ->
           (SortOrder.to_yojson
           x : Yojson.Safe.json)))
           v))
           x.sort));
         ("timeUnit",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (x :
TimeUnit.t)
            ->
           (TimeUnit.to_yojson
           x : Yojson.Safe.json)))
           v))
           x.timeUnit));
         ("type",
           (
           ((fun
           (x :
Type.t) 
           ->
           (Type.to_yojson
           x : Yojson.Safe.json)))
x.type_))])                                                              
  let make
    ?(timeUnit=
None)  ?(sort=
None)  ?(header=
None)  ?(field=
None)  ?(bin=
None) 
    ?(aggregate=
None)  type_ =
    {
      type_;
      aggregate;
      bin;
      field;
      header;
      sort;
      timeUnit
    } 
end and
FacetFieldDef_Bin_Variant:
                                                              sig
  type t =
    [
      `BinParams
      of
BinParams.t
       | 
      `Boolean
      of 
      bool ]
  val to_yojson
    :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [
      `BinParams
      of
BinParams.t
       | 
      `Boolean
      of 
      bool ]

  let to_yojson
    =
    function
    | `BinParams
      v ->
      ((fun
      (x :
BinParams.t)
       ->
      (BinParams.to_yojson
      x : Yojson.Safe.json)))
      v
    | `Boolean
      v ->
      ((fun
      (b :
      bool)  ->
      (`Bool b : 
Yojson.Safe.json)))
v                                                                   
end and
FacetedCompositeUnitSpecAlias:
                                                                   sig
 type nonrec t =
 {
 width:
 int
 option ;
 transform:
Transform.t
 list
 option ;
 title:
FacetedCompositeUnitSpecAlias_Title_Variant.t
 option ;
 selection:
FacetedCompositeUnitSpecAlias_Selection_Record.t
 option ;
 name:
 string
 option ;
 mark:
AnyMark.t ;
 height:
 int
 option ;
 encoding:
EncodingWithFacet.t
 ;
 description:
 string
 option ;
 data:
Data.t
 option }
 val
 to_yojson
 :
 t ->
Yojson.Safe.json
 val make
 :
 ?width:int
 option ->
 ?transform:Transform.t
 list
 option ->
 ?title:FacetedCompositeUnitSpecAlias_Title_Variant.t
 option ->
 ?selection:FacetedCompositeUnitSpecAlias_Selection_Record.t
 option ->
 ?name:string
 option ->
 ?height:int
 option ->
 ?description:string
 option ->
 ?data:Data.t
 option ->
AnyMark.t
 ->
EncodingWithFacet.t
 -> 
 t
end =
struct
 type nonrec t =
 {
 width:
 int
 option ;
 transform:
Transform.t
 list
 option ;
 title:
FacetedCompositeUnitSpecAlias_Title_Variant.t
 option ;
 selection:
FacetedCompositeUnitSpecAlias_Selection_Record.t
 option ;
 name:
 string
 option ;
 mark:
AnyMark.t ;
 height:
 int
 option ;
 encoding:
EncodingWithFacet.t
 ;
 description:
 string
 option ;
 data:
Data.t
 option }

  (** Fields
  
    width:
      The width of a visualization.
      
      __Default value:__ This will be determined by the following rules:
      
      - For x-axis with a continuous (non-ordinal) scale, the width will be the value of [`config.view.width`](spec.html#config).
      - For x-axis with an ordinal scale: if [`rangeStep`](scale.html#ordinal) is a numeric value (default), the width is determined by the value of `rangeStep` and the cardinality of the field mapped to x-channel.   Otherwise, if the `rangeStep` is `null`, the width will be the value of [`config.view.width`](spec.html#config).
      - If no field is mapped to `x` channel, the `width` will be the value of [`config.scale.textXRangeStep`](size.html#default-width-and-height) for `text` mark and the value of `rangeStep` for other marks.
      
      __Note:__ For plot with `row` and `column` channels, this represents the width of a single view.
      
      __See also:__ The documentation for [width and height](size.html) contains more examples.
  
    transform:
      An array of data transformations such as filter and new field calculation.
  
    title:
      Title for the plot.
  
    selection:
      A key-value mapping between selection names and definitions.
  
    name:
      Name of the visualization for later reference.
  
    mark:
      A string describing the mark type (one of `"bar"`, `"circle"`, `"square"`, `"tick"`, `"line"`,
      `"area"`, `"point"`, `"rule"`, and `"text"`) or a [mark definition object](mark.html#mark-def).
  
    height:
      The height of a visualization.
      
      __Default value:__
      - For y-axis with a continuous (non-ordinal) scale, the height will be the value of [`config.view.height`](spec.html#config).
      - For y-axis with an ordinal scale: if [`rangeStep`](scale.html#ordinal) is a numeric value (default), the height is determined by the value of `rangeStep` and the cardinality of the field mapped to y-channel.   Otherwise, if the `rangeStep` is `null`, the height will be the value of [`config.view.height`](spec.html#config).
      - If no field is mapped to `x` channel, the `height` will be the value of `rangeStep`.
      
      __Note__: For plot with `row` and `column` channels, this represents the height of a single view.
      
      __See also:__ The documentation for [width and height](size.html) contains more examples.
  
    encoding:
      A key-value mapping between encoding channels and definition of fields.
  
    description:
      An optional description of this mark for commenting purpose.
  
    data:
      An object describing the data source
  *)
 let to_yojson
 x =
 `Assoc
 (List.filter
 (fun
 (k,v)  ->
 match v
 with
 | 
 `Null ->
 false
 | 
 _ -> true)
 [
 ("data",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
Data.t) 
 ->
 (Data.to_yojson
 x : Yojson.Safe.json)))
 v))
 x.data));
 ("description",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (s :
 string) 
 ->
 (`String
 s : Yojson.Safe.json)))
 v))
 x.description));
 ("encoding",
 (((fun
 (x :
EncodingWithFacet.t)
  ->
 (EncodingWithFacet.to_yojson
 x : Yojson.Safe.json)))
 x.encoding));
 ("height",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
 x.height));
 ("mark",
 (((fun
 (x :
AnyMark.t)
  ->
 (AnyMark.to_yojson
 x : Yojson.Safe.json)))
 x.mark));
 ("name",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (s :
 string) 
 ->
 (`String
 s : Yojson.Safe.json)))
 v))
 x.name));
 ("selection",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
FacetedCompositeUnitSpecAlias_Selection_Record.t)
  ->
 (FacetedCompositeUnitSpecAlias_Selection_Record.to_yojson
 x : Yojson.Safe.json)))
 v))
 x.selection));
 ("title",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
FacetedCompositeUnitSpecAlias_Title_Variant.t)
  ->
 (FacetedCompositeUnitSpecAlias_Title_Variant.to_yojson
 x : Yojson.Safe.json)))
 v))
 x.title));
 ("transform",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (l :
Transform.t
 list)  ->
 let yojson_of_el
 (x :
Transform.t)
 =
 (Transform.to_yojson
 x : 
Yojson.Safe.json)
  in
 (`List
 (List.map
 yojson_of_el
 l) : 
Yojson.Safe.json)))
 v))
 x.transform));
 ("width",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
x.width))])                                                                     
 let make
 ?(width=
None) 
 ?(transform=
None) 
 ?(title=
None) 
 ?(selection=
None) 
 ?(name=
None) 
 ?(height=
None) 
 ?(description=
None) 
 ?(data=
None) 
 mark
 encoding
 =
 {
 encoding;
 mark;
 data;
 description;
 height;
 name;
 selection;
 title;
 transform;
 width
 } 
end
and
FacetedCompositeUnitSpecAlias_Selection_Record:sig
  type nonrec t =
    {
    selectionDef:
SelectionDef.t option }
  val to_yojson :
    t -> Yojson.Safe.json
  val make :
    ?selectionDef:SelectionDef.t
      option -> unit -> t
end =
struct
  type nonrec t = {
    selectionDef: SelectionDef.t option }

  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  -> match v with | `Null -> false | _ -> true)
         [("selectionDef",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun (x : SelectionDef.t)  ->
                       (SelectionDef.to_yojson x : Yojson.Safe.json))) v))
x.selectionDef))])       
  let make ?(selectionDef= None)  () = { selectionDef } 
end and
FacetedCompositeUnitSpecAlias_Title_Variant:sig
  type t =
    [
      `TitleParams of
TitleParams.t 
    | `String of string ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t = [ `TitleParams of TitleParams.t  | `String of string ]

  let to_yojson =
    function
    | `TitleParams v ->
        ((fun (x : TitleParams.t)  ->
            (TitleParams.to_yojson x : Yojson.Safe.json))) v
    | `String v ->
((fun (s : string)  -> (`String s : Yojson.Safe.json))) v            
end and
FacetedSpec:sig
  type nonrec t =
    {
    transform: Transform.t list option ;
    title: FacetedSpec_Title_Variant.t option ;
    spec: FacetedSpec_Spec_Variant.t ;
    resolve: Resolve.t option ;
    name: string option ;
    facet: Facet.t ;
    description: string option ;
    data: Data.t option }
  val to_yojson : t -> Yojson.Safe.json
  val make :
    ?transform:Transform.t list option ->
      ?title:FacetedSpec_Title_Variant.t option ->
        ?resolve:Resolve.t option ->
          ?name:string option ->
            ?description:string option ->
              ?data:Data.t option ->
FacetedSpec_Spec_Variant.t ->
Facet.t -> t
end =
struct
  type nonrec t =
    {
    transform: Transform.t list option ;
    title: FacetedSpec_Title_Variant.t option ;
    spec: FacetedSpec_Spec_Variant.t ;
    resolve: Resolve.t option ;
    name: string option ;
    facet: Facet.t ;
    description: string option ;
    data: Data.t option }

  (** Fields
  
    transform:
      An array of data transformations such as filter and new field calculation.
  
    title:
      Title for the plot.
  
    name:
      Name of the visualization for later reference.
  
    description:
      An optional description of this mark for commenting purpose.
  
    data:
      An object describing the data source
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  -> match v with | `Null -> false | _ -> true)
         [("data",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun (x : Data.t)  ->
                       (Data.to_yojson x : Yojson.Safe.json))) v))
               x.data));
         ("description",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json))) v))
              x.description));
         ("facet",
           (((fun (x : Facet.t)  ->
                (Facet.to_yojson x : Yojson.Safe.json))) x.facet));
         ("name",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json))) v)) x.name));
         ("resolve",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : Resolve.t)  ->
                      (Resolve.to_yojson x : Yojson.Safe.json)))
                    v)) x.resolve));
         ("spec",
           (((fun (x : FacetedSpec_Spec_Variant.t)  ->
                (FacetedSpec_Spec_Variant.to_yojson x : Yojson.Safe.json)))
              x.spec));
         ("title",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : FacetedSpec_Title_Variant.t)  ->
                      (FacetedSpec_Title_Variant.to_yojson x : 
Yojson.Safe.json))) v)) x.title));
         ("transform",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (l : Transform.t list)  ->
                      let yojson_of_el (x : Transform.t) =
                        (Transform.to_yojson x : Yojson.Safe.json)
                         in
                      (`List (List.map yojson_of_el l) : 
Yojson.Safe.json))) v)) x.transform))])                 
  let make ?(transform= None)  ?(title= None)  ?(resolve= None) 
    ?(name= None)  ?(description= None)  ?(data= None)  spec
    facet =
    {
      facet;
      spec;
      data;
      description;
      name;
      resolve;
      title;
      transform
    } 
end and
FacetedSpec_Spec_Variant:sig
  type t =
    [
      `CompositeUnitSpec of
CompositeUnitSpec.t 
    | `LayerSpec of LayerSpec.t ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [ `CompositeUnitSpec of CompositeUnitSpec.t 
    | `LayerSpec of LayerSpec.t ]

  let to_yojson =
    function
    | `CompositeUnitSpec v ->
        ((fun (x : CompositeUnitSpec.t)  ->
            (CompositeUnitSpec.to_yojson x : Yojson.Safe.json)))
          v
    | `LayerSpec v ->
        ((fun (x : LayerSpec.t)  ->
(LayerSpec.to_yojson x : Yojson.Safe.json))) v                      
end and
FacetedSpec_Title_Variant:sig
  type t =
    [
      `TitleParams of
TitleParams.t 
    | `String of string ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [ `TitleParams of TitleParams.t 
    | `String of string ]

  let to_yojson =
    function
    | `TitleParams v ->
        ((fun (x : TitleParams.t)  ->
            (TitleParams.to_yojson x : Yojson.Safe.json)))
          v
    | `String v ->
        ((fun (s : string)  ->
(`String s : Yojson.Safe.json))) v                           
end and
FacetedUnitSpec:sig
  type t =
FacetedCompositeUnitSpecAlias.t
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t = FacetedCompositeUnitSpecAlias.t

  let to_yojson
    (x : FacetedCompositeUnitSpecAlias.t) =
    (FacetedCompositeUnitSpecAlias.to_yojson x : 
Yojson.Safe.json) 
end and
Field:sig
  type t =
    [ `RepeatRef of RepeatRef.t 
    | `String of string ]
  val to_yojson : t -> Yojson.Safe.json
end =
struct
  type t =
    [ `RepeatRef of RepeatRef.t 
    | `String of string ]

  let to_yojson =
    function
    | `RepeatRef v ->
        ((fun (x : RepeatRef.t)  ->
            (RepeatRef.to_yojson x : 
Yojson.Safe.json))) v
    | `String v ->
        ((fun (s : string)  ->
            (`String s : Yojson.Safe.json)))
v                                     
end and
FieldDef:sig
  type nonrec t =
    {
    type_: Type.t ;
    timeUnit: TimeUnit.t option ;
    field: Field.t option ;
    bin:
FieldDef_Bin_Variant.t
        option
      ;
    aggregate:
Aggregate.t option }
  val to_yojson :
    t -> Yojson.Safe.json
  val make :
    ?timeUnit:TimeUnit.t option
      ->
      ?field:Field.t option ->
        ?bin:FieldDef_Bin_Variant.t
          option ->
          ?aggregate:Aggregate.t
            option ->
Type.t -> t
end =
struct
  type nonrec t =
    {
    type_: Type.t ;
    timeUnit: TimeUnit.t option ;
    field: Field.t option ;
    bin: FieldDef_Bin_Variant.t option ;
    aggregate: Aggregate.t option }

  (** Definition object for a data field, its type and transformation of an encoding channel.
  
  
  Fields:
  
    type:
      The encoded field's type of measurement. This can be either a full type
      name (`"quantitative"`, `"temporal"`, `"ordinal"`,  and `"nominal"`).
  
    timeUnit:
      Time unit for a `temporal` field  (e.g., `year`, `yearmonth`, `month`, `hour`).
      
      __Default value:__ `undefined` (None)
  
    field:
      __Required.__ A string defining the name of the field from which to pull a data value
      or an object defining iterated values from the [`repeat`](repeat.html) operator.
      
      __Note:__ `field` is not required if `aggregate` is `count`.
  
    bin:
      A flag for binning a `quantitative` field, or [an object defining binning parameters](bin.html#params).
      If `true`, default [binning parameters](bin.html) will be applied.
      
      __Default value:__ `false`
  
    aggregate:
      Aggregation function for the field
      (e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).
      
      __Default value:__ `undefined` (None)
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null -> false
            | _ -> true)
         [("aggregate",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun
                       (x : Aggregate.t)
                        ->
                       (Aggregate.to_yojson
                          x : Yojson.Safe.json)))
                     v)) x.aggregate));
         ("bin",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
FieldDef_Bin_Variant.t)
                       ->
                      (FieldDef_Bin_Variant.to_yojson
                         x : Yojson.Safe.json)))
                    v)) x.bin));
         ("field",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : Field.t) 
                      ->
                      (Field.to_yojson x : 
Yojson.Safe.json)))
                    v)) x.field));
         ("timeUnit",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : TimeUnit.t)
                       ->
                      (TimeUnit.to_yojson
                         x : Yojson.Safe.json)))
                    v)) x.timeUnit));
         ("type",
           (((fun (x : Type.t)  ->
                (Type.to_yojson x : 
Yojson.Safe.json)))
x.type_))])                                          
  let make ?(timeUnit= None)  ?(field=
None)  ?(bin= None)  ?(aggregate=
None)  type_ =
    {
      type_;
      aggregate;
      bin;
      field;
      timeUnit
    } 
end and
FieldDefBase:sig
  type nonrec t =
    {
    timeUnit:
TimeUnit.t
        option
      ;
    field:
Field.t option ;
    bin:
FieldDefBase_Bin_Variant.t
        option
      ;
    aggregate:
Aggregate.t
        option
      }
  val to_yojson :
    t ->
Yojson.Safe.json
  val make :
    ?timeUnit:TimeUnit.t
      option ->
      ?field:Field.t
        option ->
        ?bin:FieldDefBase_Bin_Variant.t
          option ->
          ?aggregate:Aggregate.t
            option ->
            unit -> t
end =
struct
  type nonrec t =
    {
    timeUnit: TimeUnit.t option ;
    field: Field.t option ;
    bin:
FieldDefBase_Bin_Variant.t
        option
      ;
    aggregate: Aggregate.t option }

  (** Fields
  
    timeUnit:
      Time unit for a `temporal` field  (e.g., `year`, `yearmonth`, `month`, `hour`).
      
      __Default value:__ `undefined` (None)
  
    field:
      __Required.__ A string defining the name of the field from which to pull a data value
      or an object defining iterated values from the [`repeat`](repeat.html) operator.
      
      __Note:__ `field` is not required if `aggregate` is `count`.
  
    bin:
      A flag for binning a `quantitative` field, or [an object defining binning parameters](bin.html#params).
      If `true`, default [binning parameters](bin.html) will be applied.
      
      __Default value:__ `false`
  
    aggregate:
      Aggregation function for the field
      (e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).
      
      __Default value:__ `undefined` (None)
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null -> false
            | _ -> true)
         [("aggregate",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun
                       (x :
Aggregate.t)
                        ->
                       (Aggregate.to_yojson
                          x : 
Yojson.Safe.json)))
                     v))
               x.aggregate));
         ("bin",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
FieldDefBase_Bin_Variant.t)
                       ->
                      (FieldDefBase_Bin_Variant.to_yojson
                         x : 
Yojson.Safe.json)))
                    v)) x.bin));
         ("field",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x : Field.t)
                       ->
                      (Field.to_yojson
                         x : 
Yojson.Safe.json)))
                    v)) x.field));
         ("timeUnit",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
TimeUnit.t)
                       ->
                      (TimeUnit.to_yojson
                         x : 
Yojson.Safe.json)))
v)) x.timeUnit))])                                               
  let make ?(timeUnit= None) 
    ?(field= None)  ?(bin= None) 
    ?(aggregate= None)  () =
    {
      aggregate;
      bin;
      field;
      timeUnit
    } 
end and
FieldDefBase_Bin_Variant:
                                               sig
  type t =
    [
      `BinParams of
BinParams.t 
    | `Boolean of bool ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [
      `BinParams of
BinParams.t 
    | `Boolean of bool ]

  let to_yojson =
    function
    | `BinParams v ->
        ((fun
            (x : BinParams.t) 
            ->
            (BinParams.to_yojson
               x : Yojson.Safe.json)))
          v
    | `Boolean v ->
        ((fun (b : bool)  ->
            (`Bool b : 
Yojson.Safe.json)))
v                                                    
end and
FieldDef_Bin_Variant:
                                                    sig
  type t =
    [
      `BinParams of
BinParams.t 
    | `Boolean of bool ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [
      `BinParams of
BinParams.t 
    | `Boolean of bool ]

  let to_yojson =
    function
    | `BinParams v ->
        ((fun
            (x :
BinParams.t)
             ->
            (BinParams.to_yojson
               x : 
Yojson.Safe.json)))
          v
    | `Boolean v ->
        ((fun (b : bool) 
            ->
            (`Bool b : 
Yojson.Safe.json)))
v                                                         
end and
Filter:sig
  type t =
    [
    `String
    of 
    string 
    | `SelectionFilter
    of
SelectionFilter.t
     | 
    `OneOfFilter
    of
OneOfFilter.t
     | 
    `RangeFilter
    of
RangeFilter.t
     | 
    `EqualFilter
    of
EqualFilter.t
    ]
  val
    to_yojson
    :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [
      `String of
        string 
    | `SelectionFilter
        of
SelectionFilter.t
         | `OneOfFilter
           of
OneOfFilter.t
            | 
      `RangeFilter
        of
RangeFilter.t
         | `EqualFilter
           of
EqualFilter.t
           ]

  let to_yojson =
    function
    | `String v ->
        ((fun
           (s :
           string) 
           ->
           (`String
           s : 
Yojson.Safe.json)))
          v
    | `SelectionFilter
        v ->
        ((fun
           (x :
SelectionFilter.t)
            ->
           (SelectionFilter.to_yojson
           x : 
Yojson.Safe.json)))
          v
    | `OneOfFilter v
        ->
        ((fun
           (x :
OneOfFilter.t)
            ->
           (OneOfFilter.to_yojson
           x : 
Yojson.Safe.json)))
          v
    | `RangeFilter v
        ->
        ((fun
           (x :
RangeFilter.t)
            ->
           (RangeFilter.to_yojson
           x : 
Yojson.Safe.json)))
          v
    | `EqualFilter v
        ->
        ((fun
           (x :
EqualFilter.t)
            ->
           (EqualFilter.to_yojson
           x : 
Yojson.Safe.json)))
v                                                              
end and
FilterOperand:
                                                              sig
  type t =
    [
      `Filter
      of
Filter.t 
    | `OrFilter
      of
OrFilter.t
       | 
      `AndFilter
      of
AndFilter.t
       | 
      `NotFilter
      of
NotFilter.t
      ]
  val to_yojson
    :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [
      `Filter
      of
Filter.t 
    | `OrFilter
      of
OrFilter.t
       | 
      `AndFilter
      of
AndFilter.t
       | 
      `NotFilter
      of
NotFilter.t
      ]

  let to_yojson
    =
    function
    | `Filter v
      ->
      ((fun
      (x :
Filter.t)
       ->
      (Filter.to_yojson
      x : Yojson.Safe.json)))
      v
    | `OrFilter
      v ->
      ((fun
      (x :
OrFilter.t)
       ->
      (OrFilter.to_yojson
      x : Yojson.Safe.json)))
      v
    | `AndFilter
      v ->
      ((fun
      (x :
AndFilter.t)
       ->
      (AndFilter.to_yojson
      x : Yojson.Safe.json)))
      v
    | `NotFilter
      v ->
      ((fun
      (x :
NotFilter.t)
       ->
      (NotFilter.to_yojson
      x : Yojson.Safe.json)))
v                                                                   
end and
FilterTransform:
                                                                   sig
 type nonrec t =
 {
 filter:
FilterOperand.t
 }
 val
 to_yojson
 :
 t ->
Yojson.Safe.json
 val make
 :
FilterOperand.t
 -> 
 t
end =
struct
 type nonrec t =
 {
 filter:
FilterOperand.t
 }

  (** Fields
  
    filter:
      The `filter` property must be either (1) a filter object for [equal-filters](filter.html#equalfilter),
      [range-filters](filter.html#rangefilter), [one-of filters](filter.html#oneoffilter), or [selection filters](filter.html#selectionfilter);
      (2) a [Vega Expression](filter.html#expression) string,
      where `datum` can be used to refer to the current data object; or (3) an array of filters (either objects or expression strings) that must all be true for a datum to pass the filter and be included.
  *)
 let to_yojson
 x =
 `Assoc
 (List.filter
 (fun
 (k,v)  ->
 match v
 with
 | 
 `Null ->
 false
 | 
 _ -> true)
 [
 ("filter",
 (((fun
 (x :
FilterOperand.t)
  ->
 (FilterOperand.to_yojson
 x : Yojson.Safe.json)))
x.filter))])                                                                     
 let make
 filter =
 { filter
 } 
end
and
FontStyle:sig
  type t = [ `Italic  | `Normal ]
  val to_yojson : t -> Yojson.Safe.json
end =
struct
  type t = [ `Italic  | `Normal ]

  let to_yojson =
    function | `Italic -> `String "italic" | `Normal -> `String "normal" 
end and
FontWeight:sig
  type t = [ `Bold  | `Normal ]
  val to_yojson : t -> Yojson.Safe.json
end =
struct
  type t = [ `Bold  | `Normal ]

  let to_yojson =
    function | `Bold -> `String "bold" | `Normal -> `String "normal" 
end and
FontWeightNumber:sig
  type t = int
  val to_yojson : t -> Yojson.Safe.json
end =
struct
  type t = int

  let to_yojson (i : int) = (`Int i : Yojson.Safe.json) 
end and
Guide:sig
  type nonrec t =
    {
    title: string option ;
    format: string option }
  val to_yojson : t -> Yojson.Safe.json
  val make :
    ?title:string option ->
      ?format:string option -> unit -> t
end =
struct
  type nonrec t =
    {
    title: string option ;
    format: string option }

  (** Fields
  
    title:
      A title for the field.
      
      __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`).  If the field has a function, the function is displayed as an all capped text with parentheses wrapping the field name (e.g., `"SUM(field_name)"`, `"BIN(field_name)"`, `"YEAR(field_name)"`).  Otherwise, the title is simply the field name.
  
    format:
      The formatting pattern for labels. This is D3's [number format pattern](https://github.com/d3/d3-format#locale_format) for quantitative fields and D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format) for time field.
      
      See the [format documentation](format.html) for more information.
      
      __Default value:__  derived from [numberFormat](config.html#format) config for quantitative fields and from [timeFormat](config.html#format) config for temporal fields.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with | `Null -> false | _ -> true)
         [("format",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun (s : string)  ->
                       (`String s : Yojson.Safe.json))) v))
               x.format));
         ("title",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json))) v))
x.title))])                      
  let make ?(title= None)  ?(format= None)  () =
    { format; title } 
end and
HConcatSpec:sig
  type nonrec t =
    {
    transform: Transform.t list option ;
    title:
HConcatSpec_Title_Variant.t option ;
    resolve: Resolve.t option ;
    name: string option ;
    hconcat: Spec.t list ;
    description: string option ;
    data: Data.t option }
  val to_yojson : t -> Yojson.Safe.json
  val make :
    ?transform:Transform.t list option ->
      ?title:HConcatSpec_Title_Variant.t
        option ->
        ?resolve:Resolve.t option ->
          ?name:string option ->
            ?description:string option ->
              ?data:Data.t option ->
Spec.t list -> t
end =
struct
  type nonrec t =
    {
    transform: Transform.t list option ;
    title: HConcatSpec_Title_Variant.t option ;
    resolve: Resolve.t option ;
    name: string option ;
    hconcat: Spec.t list ;
    description: string option ;
    data: Data.t option }

  (** Fields
  
    transform:
      An array of data transformations such as filter and new field calculation.
  
    title:
      Title for the plot.
  
    name:
      Name of the visualization for later reference.
  
    description:
      An optional description of this mark for commenting purpose.
  
    data:
      An object describing the data source
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with | `Null -> false | _ -> true)
         [("data",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun (x : Data.t)  ->
                       (Data.to_yojson x : Yojson.Safe.json)))
                     v)) x.data));
         ("description",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json)))
                    v)) x.description));
         ("hconcat",
           (((fun (l : Spec.t list)  ->
                let yojson_of_el (x : Spec.t) =
                  (Spec.to_yojson x : Yojson.Safe.json)
                   in
                (`List (List.map yojson_of_el l) : 
Yojson.Safe.json))) x.hconcat));
         ("name",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json)))
                    v)) x.name));
         ("resolve",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : Resolve.t)  ->
                      (Resolve.to_yojson x : Yojson.Safe.json)))
                    v)) x.resolve));
         ("title",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x : HConcatSpec_Title_Variant.t)
                       ->
                      (HConcatSpec_Title_Variant.to_yojson
                         x : Yojson.Safe.json))) v))
              x.title));
         ("transform",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (l : Transform.t list)  ->
                      let yojson_of_el
                        (x : Transform.t) =
                        (Transform.to_yojson x : 
Yojson.Safe.json)  in
                      (`List (List.map yojson_of_el l) : 
Yojson.Safe.json))) v))
x.transform))])                           
  let make ?(transform= None)  ?(title= None) 
    ?(resolve= None)  ?(name= None)  ?(description=
None)  ?(data= None)  hconcat =
    {
      hconcat;
      data;
      description;
      name;
      resolve;
      title;
      transform
    } 
end and
HConcatSpec_Title_Variant:sig
  type t =
    [
      `TitleParams of
TitleParams.t 
    | `String of string ]
  val to_yojson :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [ `TitleParams of TitleParams.t 
    | `String of string ]

  let to_yojson =
    function
    | `TitleParams v ->
        ((fun (x : TitleParams.t)  ->
            (TitleParams.to_yojson x : Yojson.Safe.json)))
          v
    | `String v ->
        ((fun (s : string)  ->
(`String s : Yojson.Safe.json))) v                                
end and
Header:sig
  type nonrec t =
    {
    title: string option ;
    format: string option }
  val to_yojson :
    t -> Yojson.Safe.json
  val make :
    ?title:string option ->
      ?format:string option ->
        unit -> t
end =
struct
  type nonrec t =
    {
    title: string option ;
    format: string option }

  (** Headers of row / column channels for faceted plots.
  
  
  Fields:
  
    title:
      A title for the axis. Shows field name and its function by default.
      
      __Default value:__  derived from the field's name and transformation function applied e.g, "field_name", "SUM(field_name)", "BIN(field_name)", "YEAR(field_name)".
  
    format:
      The formatting pattern for labels. This is D3's [number format pattern](https://github.com/d3/d3-format#locale_format) for quantitative fields and D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format) for time field.
      
      __Default value:__  derived from [numberFormat](config.html#format) config for quantitative fields and from [timeFormat](config.html#format) config for temporal fields.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null -> false
            | _ -> true)
         [("format",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun (s : string)  ->
                       (`String s : Yojson.Safe.json)))
                     v)) x.format));
         ("title",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json)))
v)) x.title))])                                     
  let make ?(title= None)  ?(format= None) 
    () = { format; title } 
end and
HorizontalAlign:sig
  type t =
    [ `Center  | 
      `Right 
    | `Left ]
  val to_yojson :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [ `Center  | `Right  | `Left ]

  let to_yojson =
    function
    | `Center -> `String "center"
    | `Right -> `String "right"
    | `Left -> `String "left" 
end and
InlineData:sig
  type nonrec t =
    {
    values:
InlineData_Values_Variant.t
      ;
    format:
DataFormat.t
        option
      }
  val to_yojson :
    t ->
Yojson.Safe.json
  val make :
    ?format:DataFormat.t
      option ->
InlineData_Values_Variant.t
        -> t
end =
struct
  type nonrec t =
    {
    values:
InlineData_Values_Variant.t ;
    format: DataFormat.t option }

  (** Fields
  
    values:
      The full data set, included inline. This can be a string or an array of objects or primitive values.
      Arrays of primitive values are ingested as objects with a `data` property.
  
    format:
      An object that specifies the format for parsing the data values.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null -> false
            | _ -> true)
         [("format",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun
                       (x :
DataFormat.t)
                        ->
                       (DataFormat.to_yojson
                          x : 
Yojson.Safe.json)))
                     v)) x.format));
         ("values",
           (((fun
                (x :
InlineData_Values_Variant.t)
                 ->
                (InlineData_Values_Variant.to_yojson
                   x : Yojson.Safe.json)))
x.values))])                                               
  let make ?(format= None)  values
    = { values; format } 
end and
InlineData_Values_Variant:
                                               sig
  type t =
    [ `String of string 
    | `JSON_List of
Yojson.Safe.json list ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [ `String of string 
    | `JSON_List of
Yojson.Safe.json list ]

  let to_yojson =
    function
    | `String v ->
        ((fun (s : string)  ->
            (`String s : 
Yojson.Safe.json)))
          v
    | `JSON_List v ->
        ((fun
            (l :
Yojson.Safe.json
                list)
             ->
            let yojson_of_el
              (j :
Yojson.Safe.json)
              =
              (j : Yojson.Safe.json)
               in
            (`List
               (List.map
                  yojson_of_el
                  l) : 
Yojson.Safe.json)))
v                                                    
end and
Interpolate:sig
  type t =
    [
    `Monotone 
    | `Bundle 
    | `Cardinal_closed
     | 
    `Cardinal_open
     | 
    `Cardinal 
    | `Basis_closed
     | 
    `Basis_open
     | 
    `Basis 
    | `Step_after
     | 
    `Step_before
     | 
    `Step 
    | `Linear_closed
     | 
    `Linear ]
  val
    to_yojson
    :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [ `Monotone 
    | `Bundle 
    | `Cardinal_closed 
    | `Cardinal_open 
    | `Cardinal 
    | `Basis_closed 
    | `Basis_open 
    | `Basis 
    | `Step_after 
    | `Step_before 
    | `Step 
    | `Linear_closed 
    | `Linear ]

  let to_yojson =
    function
    | `Monotone ->
        `String
          "monotone"
    | `Bundle ->
        `String "bundle"
    | `Cardinal_closed ->
        `String
          "cardinal_closed"
    | `Cardinal_open ->
        `String
          "cardinal_open"
    | `Cardinal ->
        `String
          "cardinal"
    | `Basis_closed ->
        `String
          "basis_closed"
    | `Basis_open ->
        `String
          "basis_open"
    | `Basis ->
        `String "basis"
    | `Step_after ->
        `String
          "step_after"
    | `Step_before ->
        `String
          "step_before"
    | `Step ->
        `String "step"
    | `Linear_closed ->
        `String
          "linear_closed"
    | `Linear ->
`String "linear"                                                         
end and
InterpolateParams:
                                                         sig
  type nonrec t =
    {
    type_: string ;
    gamma:
      int option }
  val to_yojson :
    t ->
Yojson.Safe.json
  val make :
    ?gamma:int
      option ->
      string -> t
end =
struct
  type nonrec t =
    {
    type_: string ;
    gamma:
      int option }

  let to_yojson x =
    `Assoc
      (List.filter
         (fun 
           (k,v)  ->
           match v
           with
           | 
           `Null ->
           false
           | 
           _ -> true)
         [("gamma",
           (((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (i : int)
            ->
           (`Int i : 
Yojson.Safe.json)))
           v))
           x.gamma));
         ("type",
           (
           ((fun
           (s :
           string) 
           ->
           (`String
           s : Yojson.Safe.json)))
x.type_))])                                                              
  let make ?(gamma=
None)  type_ =
    { type_; gamma } 
end and
IntervalSelection:
                                                              sig
  type nonrec t =
    {
    zoom:
IntervalSelection_Zoom_Variant.t
      option ;
    type_:
      string ;
    translate:
IntervalSelection_Translate_Variant.t
      option ;
    resolve:
SelectionResolution.t
      option ;
    on:
VgEventStream.t
      option ;
    mark:
BrushConfig.t
      option ;
    fields:
      string
      list
      option ;
    encodings:
SingleDefChannel.t
      list
      option ;
    bind:
      string
      option }
  val to_yojson
    :
    t ->
Yojson.Safe.json
  val make :
    ?zoom:IntervalSelection_Zoom_Variant.t
      option ->
      ?translate:IntervalSelection_Translate_Variant.t
      option ->
      ?resolve:SelectionResolution.t
      option ->
      ?on:VgEventStream.t
      option ->
      ?mark:BrushConfig.t
      option ->
      ?fields:string
      list
      option ->
      ?encodings:SingleDefChannel.t
      list
      option ->
      ?bind:string
      option ->
      string ->
      t
end =
struct
  type nonrec t =
    {
    zoom:
IntervalSelection_Zoom_Variant.t
      option ;
    type_:
      string ;
    translate:
IntervalSelection_Translate_Variant.t
      option ;
    resolve:
SelectionResolution.t
      option ;
    on:
VgEventStream.t
      option ;
    mark:
BrushConfig.t
      option ;
    fields:
      string
      list
      option ;
    encodings:
SingleDefChannel.t
      list
      option ;
    bind:
      string
      option }

  (** Fields
  
    zoom:
      When truthy, allows a user to interactively resize an interval selection.
      Can be `true`, `false` (to disable zooming), or a [Vega event stream
      definition](https://vega.github.io/vega/docs/event-streams/). Currently,
      only `wheel` events are supported.
      
      
      __Default value:__ `true`, which corresponds to `wheel!`.
  
    translate:
      When truthy, allows a user to interactively move an interval selection
      back-and-forth. Can be `true`, `false` (to disable panning), or a
      [Vega event stream definition](https://vega.github.io/vega/docs/event-streams/)
      which must include a start and end event to trigger continuous panning.
      
      __Default value:__ `true`, which corresponds to
      `[mousedown, window:mouseup] > window:mousemove!` which corresponds to
      clicks and dragging within an interval selection to reposition it.
  
    resolve:
      With layered and multi-view displays, a strategy that determines how
      selections' data queries are resolved when applied in a filter transform,
      conditional encoding rule, or scale domain.
  
    on:
      A [Vega event stream](https://vega.github.io/vega/docs/event-streams/) (object or selector) that triggers the selection.
      For interval selections, the event stream must specify a [start and end](https://vega.github.io/vega/docs/event-streams/#between-filters).
  
    mark:
      An interval selection also adds a rectangle mark to depict the
      extents of the interval. The `mark` property can be used to customize the
      appearance of the mark.
  
    fields:
      An array of field names whose values must match for a data tuple to
      fall within the selection.
  
    encodings:
      An array of encoding channels. The corresponding data field values
      must match for a data tuple to fall within the selection.
  
    bind:
      Establishes a two-way binding between the interval selection and the scales
      used within the same view. This allows a user to interactively pan and
      zoom the view.
  *)
  let to_yojson
    x =
    `Assoc
      (
List.filter
      (fun
      (k,v)  ->
      match v
      with
      | 
      `Null ->
      false
      | 
      _ -> true)
      [
      ("bind",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (s :
      string) 
      ->
      (`String
      s : Yojson.Safe.json)))
      v))
      x.bind));
      ("encodings",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (l :
SingleDefChannel.t
      list)  ->
      let yojson_of_el
      (x :
SingleDefChannel.t)
      =
      (SingleDefChannel.to_yojson
      x : 
Yojson.Safe.json)
       in
      (`List
      (List.map
      yojson_of_el
      l) : 
Yojson.Safe.json)))
      v))
      x.encodings));
      ("fields",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (l :
      string
      list)  ->
      let yojson_of_el
      (s :
      string) =
      (`String
      s : 
Yojson.Safe.json)
       in
      (`List
      (List.map
      yojson_of_el
      l) : 
Yojson.Safe.json)))
      v))
      x.fields));
      ("mark",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (x :
BrushConfig.t)
       ->
      (BrushConfig.to_yojson
      x : Yojson.Safe.json)))
      v))
      x.mark));
      ("on",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (x :
VgEventStream.t)
       ->
      (VgEventStream.to_yojson
      x : Yojson.Safe.json)))
      v)) x.on));
      ("resolve",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (x :
SelectionResolution.t)
       ->
      (SelectionResolution.to_yojson
      x : Yojson.Safe.json)))
      v))
      x.resolve));
      ("translate",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (x :
IntervalSelection_Translate_Variant.t)
       ->
      (IntervalSelection_Translate_Variant.to_yojson
      x : Yojson.Safe.json)))
      v))
      x.translate));
      ("type",
      (((fun
      (s :
      string) 
      ->
      (`String
      s : Yojson.Safe.json)))
      x.type_));
      ("zoom",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (x :
IntervalSelection_Zoom_Variant.t)
       ->
      (IntervalSelection_Zoom_Variant.to_yojson
      x : Yojson.Safe.json)))
      v))
x.zoom))])                                                                   
  let make
    ?(zoom=
None) 
    ?(translate=
None) 
    ?(resolve=
None) 
    ?(on= None)
     ?(mark=
None) 
    ?(fields=
None) 
    ?(encodings=
None) 
    ?(bind=
None) 
    type_ =
    {
      type_;
      bind;
      encodings;
      fields;
      mark;
      on;
      resolve;
      translate;
      zoom
    } 
end and
IntervalSelectionConfig:
                                                                   sig
 type nonrec t =
 {
 zoom:
IntervalSelectionConfig_Zoom_Variant.t
 option ;
 translate:
IntervalSelectionConfig_Translate_Variant.t
 option ;
 resolve:
SelectionResolution.t
 option ;
 on:
VgEventStream.t
 option ;
 mark:
BrushConfig.t
 option ;
 fields:
 string
 list
 option ;
 encodings:
SingleDefChannel.t
 list
 option ;
 bind:
 string
 option }
 val
 to_yojson
 :
 t ->
Yojson.Safe.json
 val make
 :
 ?zoom:IntervalSelectionConfig_Zoom_Variant.t
 option ->
 ?translate:IntervalSelectionConfig_Translate_Variant.t
 option ->
 ?resolve:SelectionResolution.t
 option ->
 ?on:VgEventStream.t
 option ->
 ?mark:BrushConfig.t
 option ->
 ?fields:string
 list
 option ->
 ?encodings:SingleDefChannel.t
 list
 option ->
 ?bind:string
 option ->
 unit -> t
end =
struct
 type nonrec t =
 {
 zoom:
IntervalSelectionConfig_Zoom_Variant.t
 option ;
 translate:
IntervalSelectionConfig_Translate_Variant.t
 option ;
 resolve:
SelectionResolution.t
 option ;
 on:
VgEventStream.t
 option ;
 mark:
BrushConfig.t
 option ;
 fields:
 string
 list
 option ;
 encodings:
SingleDefChannel.t
 list
 option ;
 bind:
 string
 option }

  (** Fields
  
    zoom:
      When truthy, allows a user to interactively resize an interval selection.
      Can be `true`, `false` (to disable zooming), or a [Vega event stream
      definition](https://vega.github.io/vega/docs/event-streams/). Currently,
      only `wheel` events are supported.
      
      
      __Default value:__ `true`, which corresponds to `wheel!`.
  
    translate:
      When truthy, allows a user to interactively move an interval selection
      back-and-forth. Can be `true`, `false` (to disable panning), or a
      [Vega event stream definition](https://vega.github.io/vega/docs/event-streams/)
      which must include a start and end event to trigger continuous panning.
      
      __Default value:__ `true`, which corresponds to
      `[mousedown, window:mouseup] > window:mousemove!` which corresponds to
      clicks and dragging within an interval selection to reposition it.
  
    resolve:
      With layered and multi-view displays, a strategy that determines how
      selections' data queries are resolved when applied in a filter transform,
      conditional encoding rule, or scale domain.
  
    on:
      A [Vega event stream](https://vega.github.io/vega/docs/event-streams/) (object or selector) that triggers the selection.
      For interval selections, the event stream must specify a [start and end](https://vega.github.io/vega/docs/event-streams/#between-filters).
  
    mark:
      An interval selection also adds a rectangle mark to depict the
      extents of the interval. The `mark` property can be used to customize the
      appearance of the mark.
  
    fields:
      An array of field names whose values must match for a data tuple to
      fall within the selection.
  
    encodings:
      An array of encoding channels. The corresponding data field values
      must match for a data tuple to fall within the selection.
  
    bind:
      Establishes a two-way binding between the interval selection and the scales
      used within the same view. This allows a user to interactively pan and
      zoom the view.
  *)
 let to_yojson
 x =
 `Assoc
 (List.filter
 (fun
 (k,v)  ->
 match v
 with
 | 
 `Null ->
 false
 | 
 _ -> true)
 [
 ("bind",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (s :
 string) 
 ->
 (`String
 s : Yojson.Safe.json)))
 v))
 x.bind));
 ("encodings",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (l :
SingleDefChannel.t
 list)  ->
 let yojson_of_el
 (x :
SingleDefChannel.t)
 =
 (SingleDefChannel.to_yojson
 x : 
Yojson.Safe.json)
  in
 (`List
 (List.map
 yojson_of_el
 l) : 
Yojson.Safe.json)))
 v))
 x.encodings));
 ("fields",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (l :
 string
 list)  ->
 let yojson_of_el
 (s :
 string) =
 (`String
 s : 
Yojson.Safe.json)
  in
 (`List
 (List.map
 yojson_of_el
 l) : 
Yojson.Safe.json)))
 v))
 x.fields));
 ("mark",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
BrushConfig.t)
  ->
 (BrushConfig.to_yojson
 x : Yojson.Safe.json)))
 v))
 x.mark));
 ("on",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
VgEventStream.t)
  ->
 (VgEventStream.to_yojson
 x : Yojson.Safe.json)))
 v)) x.on));
 ("resolve",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
SelectionResolution.t)
  ->
 (SelectionResolution.to_yojson
 x : Yojson.Safe.json)))
 v))
 x.resolve));
 ("translate",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
IntervalSelectionConfig_Translate_Variant.t)
  ->
 (IntervalSelectionConfig_Translate_Variant.to_yojson
 x : Yojson.Safe.json)))
 v))
 x.translate));
 ("zoom",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
IntervalSelectionConfig_Zoom_Variant.t)
  ->
 (IntervalSelectionConfig_Zoom_Variant.to_yojson
 x : Yojson.Safe.json)))
 v))
x.zoom))])                                                                     
 let make
 ?(zoom=
None) 
 ?(translate=
None) 
 ?(resolve=
None) 
 ?(on=
None) 
 ?(mark=
None) 
 ?(fields=
None) 
 ?(encodings=
None) 
 ?(bind=
None)  ()
 =
 {
 bind;
 encodings;
 fields;
 mark;
 on;
 resolve;
 translate;
 zoom
 } 
end
and
IntervalSelectionConfig_Translate_Variant:sig
  type t =
    [ `String of string 
    | `Bool of bool ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t = [ `String of string  | `Bool of bool ]

  let to_yojson =
    function
    | `String v ->
        ((fun (s : string)  -> (`String s : Yojson.Safe.json))) v
    | `Bool v -> ((fun (b : bool)  -> (`Bool b : Yojson.Safe.json))) v 
end and
IntervalSelectionConfig_Zoom_Variant:sig
  type t =
    [ `String of string 
    | `Bool of bool ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t = [ `String of string  | `Bool of bool ]

  let to_yojson =
    function
    | `String v ->
        ((fun (s : string)  -> (`String s : Yojson.Safe.json))) v
    | `Bool v -> ((fun (b : bool)  -> (`Bool b : Yojson.Safe.json))) v 
end and
IntervalSelection_Translate_Variant:sig
  type t =
    [ `String of string 
    | `Bool of bool ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t = [ `String of string  | `Bool of bool ]

  let to_yojson =
    function
    | `String v ->
        ((fun (s : string)  -> (`String s : Yojson.Safe.json))) v
    | `Bool v ->
((fun (b : bool)  -> (`Bool b : Yojson.Safe.json))) v                 
end and
IntervalSelection_Zoom_Variant:sig
  type t =
    [ `String of string 
    | `Bool of bool ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t = [ `String of string  | `Bool of bool ]

  let to_yojson =
    function
    | `String v ->
        ((fun (s : string)  ->
            (`String s : Yojson.Safe.json))) v
    | `Bool v ->
        ((fun (b : bool)  -> (`Bool b : Yojson.Safe.json)))
v                      
end and
JsonDataFormat:sig
  type nonrec t =
    {
    type_: string option ;
    property: string option ;
    parse:
JsonDataFormat_Parse_Variant.t
        option
      }
  val to_yojson : t -> Yojson.Safe.json
  val make :
    ?type_:string option ->
      ?property:string option ->
        ?parse:JsonDataFormat_Parse_Variant.t
          option -> unit -> t
end =
struct
  type nonrec t =
    {
    type_: string option ;
    property: string option ;
    parse: JsonDataFormat_Parse_Variant.t option }

  (** Fields
  
    type:
      Type of input data: `"json"`, `"csv"`, `"tsv"`.
      The default format type is determined by the extension of the file URL.
      If no extension is detected, `"json"` will be used by default.
  
    property:
      The JSON property containing the desired data.
      This parameter can be used when the loaded JSON file may have surrounding structure or meta-data.
      For example `"property": "values.features"` is equivalent to retrieving `json.values.features`
      from the loaded JSON object.
  
    parse:
      If set to auto (the default), perform automatic type inference to determine the desired data types.
      Alternatively, a parsing directive object can be provided for explicit data types. Each property of the object corresponds to a field name, and the value to the desired data type (one of `"number"`, `"boolean"` or `"date"`).
      For example, `"parse": {"modified_on": "date"}` parses the `modified_on` field in each input record a Date value.
      
      For `"date"`, we parse data based using Javascript's [`Date.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse).
      For Specific date formats can be provided (e.g., `{foo: 'date:"%m%d%Y"'}`), using the [d3-time-format syntax](https://github.com/d3/d3-time-format#locale_format). UTC date format parsing is supported similarly (e.g., `{foo: 'utc:"%m%d%Y"'}`). See more about [UTC time](timeunit.html#utc)
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with | `Null -> false | _ -> true)
         [("parse",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun
                       (x :
JsonDataFormat_Parse_Variant.t)
                        ->
                       (JsonDataFormat_Parse_Variant.to_yojson
                          x : Yojson.Safe.json))) v))
               x.parse));
         ("property",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json)))
                    v)) x.property));
         ("type",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json)))
v)) x.type_))])                           
  let make ?(type_= None)  ?(property= None)  ?(parse=
None)  () = { parse; property; type_ } 
end and
JsonDataFormat_Parse_Variant:sig
  type t =
    [
      `JSON of
Yojson.Safe.json
         | `Auto ]
  val to_yojson :
    t ->
Yojson.Safe.json
end =
struct
  type t = [ `JSON of Yojson.Safe.json  | `Auto ]

  let to_yojson =
    function
    | `JSON v ->
        ((fun (j : Yojson.Safe.json)  ->
            (j : Yojson.Safe.json))) v
    | `Auto -> `String "auto" 
end and
LayerSpec:sig
  type nonrec t =
    {
    width: int option ;
    transform:
Transform.t list option ;
    title:
LayerSpec_Title_Variant.t
        option
      ;
    resolve: Resolve.t option ;
    name: string option ;
    layer:
LayerSpec_Layer_Variant.t
        list
      ;
    height: int option ;
    description: string option ;
    data: Data.t option }
  val to_yojson :
    t -> Yojson.Safe.json
  val make :
    ?width:int option ->
      ?transform:Transform.t list
        option ->
        ?title:LayerSpec_Title_Variant.t
          option ->
          ?resolve:Resolve.t option
            ->
            ?name:string option ->
              ?height:int option ->
                ?description:string
                  option ->
                  ?data:Data.t
                    option ->
LayerSpec_Layer_Variant.t
                      list -> 
                      t
end =
struct
  type nonrec t =
    {
    width: int option ;
    transform: Transform.t list option ;
    title: LayerSpec_Title_Variant.t option ;
    resolve: Resolve.t option ;
    name: string option ;
    layer: LayerSpec_Layer_Variant.t list ;
    height: int option ;
    description: string option ;
    data: Data.t option }

  (** Fields
  
    width:
      The width of a visualization.
      
      __Default value:__ This will be determined by the following rules:
      
      - For x-axis with a continuous (non-ordinal) scale, the width will be the value of [`config.view.width`](spec.html#config).
      - For x-axis with an ordinal scale: if [`rangeStep`](scale.html#ordinal) is a numeric value (default), the width is determined by the value of `rangeStep` and the cardinality of the field mapped to x-channel.   Otherwise, if the `rangeStep` is `null`, the width will be the value of [`config.view.width`](spec.html#config).
      - If no field is mapped to `x` channel, the `width` will be the value of [`config.scale.textXRangeStep`](size.html#default-width-and-height) for `text` mark and the value of `rangeStep` for other marks.
      
      __Note:__ For plot with `row` and `column` channels, this represents the width of a single view.
      
      __See also:__ The documentation for [width and height](size.html) contains more examples.
  
    transform:
      An array of data transformations such as filter and new field calculation.
  
    title:
      Title for the plot.
  
    name:
      Name of the visualization for later reference.
  
    layer:
      Layer or single view specifications to be layered.
      
      __Note__: Specifications inside `layer` cannot use `row` and `column` channels as layering facet specifications is not allowed.
  
    height:
      The height of a visualization.
      
      __Default value:__
      - For y-axis with a continuous (non-ordinal) scale, the height will be the value of [`config.view.height`](spec.html#config).
      - For y-axis with an ordinal scale: if [`rangeStep`](scale.html#ordinal) is a numeric value (default), the height is determined by the value of `rangeStep` and the cardinality of the field mapped to y-channel.   Otherwise, if the `rangeStep` is `null`, the height will be the value of [`config.view.height`](spec.html#config).
      - If no field is mapped to `x` channel, the `height` will be the value of `rangeStep`.
      
      __Note__: For plot with `row` and `column` channels, this represents the height of a single view.
      
      __See also:__ The documentation for [width and height](size.html) contains more examples.
  
    description:
      An optional description of this mark for commenting purpose.
  
    data:
      An object describing the data source
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null -> false
            | _ -> true)
         [("data",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun (x : Data.t)  ->
                       (Data.to_yojson x : 
Yojson.Safe.json))) v))
               x.data));
         ("description",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json)))
                    v)) x.description));
         ("height",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.height));
         ("layer",
           (((fun
                (l :
LayerSpec_Layer_Variant.t
                    list)
                 ->
                let yojson_of_el
                  (x :
LayerSpec_Layer_Variant.t)
                  =
                  (LayerSpec_Layer_Variant.to_yojson
                     x : Yojson.Safe.json)
                   in
                (`List
                   (List.map yojson_of_el l) : 
Yojson.Safe.json))) x.layer));
         ("name",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json)))
                    v)) x.name));
         ("resolve",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : Resolve.t)  ->
                      (Resolve.to_yojson x : 
Yojson.Safe.json))) v))
              x.resolve));
         ("title",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
LayerSpec_Title_Variant.t)
                       ->
                      (LayerSpec_Title_Variant.to_yojson
                         x : Yojson.Safe.json)))
                    v)) x.title));
         ("transform",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (l : Transform.t list) 
                      ->
                      let yojson_of_el
                        (x : Transform.t) =
                        (Transform.to_yojson
                           x : Yojson.Safe.json)
                         in
                      (`List
                         (List.map
                            yojson_of_el l) : 
Yojson.Safe.json))) v))
              x.transform));
         ("width",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
v)) x.width))])                                     
  let make ?(width= None)  ?(transform= None)
     ?(title= None)  ?(resolve= None) 
    ?(name= None)  ?(height= None) 
    ?(description= None)  ?(data= None) 
    layer =
    {
      layer;
      data;
      description;
      height;
      name;
      resolve;
      title;
      transform;
      width
    } 
end and
LayerSpec_Layer_Variant:sig
  type t =
    [
      `CompositeUnitSpec
       of
CompositeUnitSpec.t
        | 
      `LayerSpec
       of
LayerSpec.t
       ]
  val to_yojson
    :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [
      `CompositeUnitSpec of
CompositeUnitSpec.t 
    | `LayerSpec of LayerSpec.t ]

  let to_yojson =
    function
    | `CompositeUnitSpec v ->
        ((fun (x : CompositeUnitSpec.t) 
            ->
            (CompositeUnitSpec.to_yojson
               x : Yojson.Safe.json))) v
    | `LayerSpec v ->
        ((fun (x : LayerSpec.t)  ->
            (LayerSpec.to_yojson x : 
Yojson.Safe.json))) v                                          
end and
LayerSpec_Title_Variant:sig
  type t =
  [
  `TitleParams
  of
TitleParams.t
   | 
  `String
  of 
  string ]
  val
  to_yojson
  :
  t ->
Yojson.Safe.json
end =
struct
  type t =
    [
      `TitleParams of TitleParams.t 
    | `String of string ]

  let to_yojson =
    function
    | `TitleParams v ->
        ((fun (x : TitleParams.t) 
            ->
            (TitleParams.to_yojson
               x : Yojson.Safe.json)))
          v
    | `String v ->
        ((fun (s : string)  ->
            (`String s : Yojson.Safe.json)))
v                                               
end and
LayoutSizeMixins:sig
  type nonrec t =
    {
    width:
    int
    option ;
    height:
    int
    option }
  val
    to_yojson
    :
    t ->
Yojson.Safe.json
  val make :
    ?width:int
    option ->
    ?height:int
    option ->
    unit -> t
end =
struct
  type nonrec t =
    {
    width: int option ;
    height: int option }

  (** Fields
  
    width:
      The width of a visualization.
      
      __Default value:__ This will be determined by the following rules:
      
      - For x-axis with a continuous (non-ordinal) scale, the width will be the value of [`config.view.width`](spec.html#config).
      - For x-axis with an ordinal scale: if [`rangeStep`](scale.html#ordinal) is a numeric value (default), the width is determined by the value of `rangeStep` and the cardinality of the field mapped to x-channel.   Otherwise, if the `rangeStep` is `null`, the width will be the value of [`config.view.width`](spec.html#config).
      - If no field is mapped to `x` channel, the `width` will be the value of [`config.scale.textXRangeStep`](size.html#default-width-and-height) for `text` mark and the value of `rangeStep` for other marks.
      
      __Note:__ For plot with `row` and `column` channels, this represents the width of a single view.
      
      __See also:__ The documentation for [width and height](size.html) contains more examples.
  
    height:
      The height of a visualization.
      
      __Default value:__
      - For y-axis with a continuous (non-ordinal) scale, the height will be the value of [`config.view.height`](spec.html#config).
      - For y-axis with an ordinal scale: if [`rangeStep`](scale.html#ordinal) is a numeric value (default), the height is determined by the value of `rangeStep` and the cardinality of the field mapped to y-channel.   Otherwise, if the `rangeStep` is `null`, the height will be the value of [`config.view.height`](spec.html#config).
      - If no field is mapped to `x` channel, the `height` will be the value of `rangeStep`.
      
      __Note__: For plot with `row` and `column` channels, this represents the height of a single view.
      
      __See also:__ The documentation for [width and height](size.html) contains more examples.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null -> false
            | _ -> true)
         [("height",
            (((function
               | None  ->
                   `Null
               | Some v ->
                   ((fun
                     (i : int)
                      ->
                     (`Int i : 
Yojson.Safe.json)))
                     v))
               x.height));
         ("width",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                     (i : int)
                      ->
                     (`Int i : 
Yojson.Safe.json)))
                    v))
x.width))])                                                    
  let make ?(width= None) 
    ?(height= None)  () =
    { height; width } 
end and
Legend:sig
  type nonrec t =
    {
    zindex:
      int option ;
    values:
Legend_Values_Variant.t
        option
      ;
    type_:
      string
        option
      ;
    titleAlign:
      string
        option
      ;
    title:
      string
        option
      ;
    tickCount:
      int option ;
    padding:
      int option ;
    orient:
LegendOrient.t
        option
      ;
    offset:
      int option ;
    format:
      string
        option
      ;
    fillColor:
      string
        option
      ;
    entryPadding:
      int option }
  val to_yojson :
    t ->
Yojson.Safe.json
  val make :
    ?zindex:int
      option ->
      ?values:Legend_Values_Variant.t
        option ->
        ?type_:string
         option ->
         ?titleAlign:string
         option ->
         ?title:string
         option ->
         ?tickCount:int
         option ->
         ?padding:int
         option ->
         ?orient:LegendOrient.t
         option ->
         ?offset:int
         option ->
         ?format:string
         option ->
         ?fillColor:string
         option ->
         ?entryPadding:int
         option ->
         unit -> t
end =
struct
  type nonrec t =
    {
    zindex: int option ;
    values:
Legend_Values_Variant.t
        option
      ;
    type_: string option ;
    titleAlign:
      string option ;
    title: string option ;
    tickCount: int option ;
    padding: int option ;
    orient:
LegendOrient.t
        option
      ;
    offset: int option ;
    format: string option ;
    fillColor:
      string option ;
    entryPadding:
      int option }

  (** Properties of a legend or boolean flag for determining whether to show it.
  
  
  Fields:
  
    zindex:
      A non-positive integer indicating z-index of the legend.
      If zindex is 0, legend should be drawn behind all chart elements.
      To put them in front, use zindex = 1.
  
    values:
      Explicitly set the visible legend values.
  
    type:
      The type of the legend. Use `"symbol"` to create a discrete legend and `"gradient"` for a continuous color gradient.
      
      __Default value:__ `"gradient"` for non-binned quantitative fields and temporal fields; `"symbol"` otherwise.
  
    titleAlign:
      Horizontal text alignment for legend titles.
  
    title:
      A title for the field.
      
      __Default value:__  derived from the field's name and transformation function (`aggregate`, `bin` and `timeUnit`).  If the field has a function, the function is displayed as an all capped text with parentheses wrapping the field name (e.g., `"SUM(field_name)"`, `"BIN(field_name)"`, `"YEAR(field_name)"`).  Otherwise, the title is simply the field name.
  
    tickCount:
      The desired number of tick values for quantitative legends.
  
    padding:
      The padding, in pixels, between the legend and axis.
  
    orient:
      The orientation of the legend, which determines how the legend is positioned within the scene. One of "left", "right", "top-left", "top-right", "bottom-left", "bottom-right", "none".
      
      __Default value:__ `"right"`
  
    offset:
      The offset, in pixels, by which to displace the legend from the edge of the enclosing group or data rectangle.
      
      __Default value:__  `0`
  
    format:
      The formatting pattern for labels. This is D3's [number format pattern](https://github.com/d3/d3-format#locale_format) for quantitative fields and D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format) for time field.
      
      See the [format documentation](format.html) for more information.
      
      __Default value:__  derived from [numberFormat](config.html#format) config for quantitative fields and from [timeFormat](config.html#format) config for temporal fields.
  
    fillColor:
      Background fill color for the full legend.
  
    entryPadding:
      Padding (in pixels) between legend entries in a symbol legend.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null ->
                false
            | _ -> true)
         [("entryPadding",
            (((function
               | 
None  ->
                `Null
               | 
Some v ->
                ((fun
                (i : int)
                 ->
                (`Int i : 
Yojson.Safe.json)))
                v))
               x.entryPadding));
         ("fillColor",
           (((function
              | None  ->
                `Null
              | Some v ->
                ((fun
                (s :
                string) 
                ->
                (`String
                s : Yojson.Safe.json)))
                v))
              x.fillColor));
         ("format",
           (((function
              | None  ->
                `Null
              | Some v ->
                ((fun
                (s :
                string) 
                ->
                (`String
                s : Yojson.Safe.json)))
                v))
              x.format));
         ("offset",
           (((function
              | None  ->
                `Null
              | Some v ->
                ((fun
                (i : int)
                 ->
                (`Int i : 
Yojson.Safe.json)))
                v))
              x.offset));
         ("orient",
           (((function
              | None  ->
                `Null
              | Some v ->
                ((fun
                (x :
LegendOrient.t)
                 ->
                (LegendOrient.to_yojson
                x : Yojson.Safe.json)))
                v))
              x.orient));
         ("padding",
           (((function
              | None  ->
                `Null
              | Some v ->
                ((fun
                (i : int)
                 ->
                (`Int i : 
Yojson.Safe.json)))
                v))
              x.padding));
         ("tickCount",
           (((function
              | None  ->
                `Null
              | Some v ->
                ((fun
                (i : int)
                 ->
                (`Int i : 
Yojson.Safe.json)))
                v))
              x.tickCount));
         ("title",
           (((function
              | None  ->
                `Null
              | Some v ->
                ((fun
                (s :
                string) 
                ->
                (`String
                s : Yojson.Safe.json)))
                v))
              x.title));
         ("titleAlign",
           (((function
              | None  ->
                `Null
              | Some v ->
                ((fun
                (s :
                string) 
                ->
                (`String
                s : Yojson.Safe.json)))
                v))
              x.titleAlign));
         ("type",
           (((function
              | None  ->
                `Null
              | Some v ->
                ((fun
                (s :
                string) 
                ->
                (`String
                s : Yojson.Safe.json)))
                v))
              x.type_));
         ("values",
           (((function
              | None  ->
                `Null
              | Some v ->
                ((fun
                (x :
Legend_Values_Variant.t)
                 ->
                (Legend_Values_Variant.to_yojson
                x : Yojson.Safe.json)))
                v))
              x.values));
         ("zindex",
           (((function
              | None  ->
                `Null
              | Some v ->
                ((fun
                (i : int)
                 ->
                (`Int i : 
Yojson.Safe.json)))
                v))
x.zindex))])                                                         
  let make ?(zindex=
None)  ?(values=
None)  ?(type_= None)
     ?(titleAlign= None) 
    ?(title= None) 
    ?(tickCount= None) 
    ?(padding= None) 
    ?(orient= None) 
    ?(offset= None) 
    ?(format= None) 
    ?(fillColor= None) 
    ?(entryPadding= None)
     () =
    {
      entryPadding;
      fillColor;
      format;
      offset;
      orient;
      padding;
      tickCount;
      title;
      titleAlign;
      type_;
      values;
      zindex
    } 
end and
LegendConfig:
                                                         sig
  type nonrec t =
    {
    titlePadding:
      int option ;
    titleLimit:
      int option ;
    titleFontWeight:
LegendConfig_TitleFontWeight_Variant.t
        option
      ;
    titleFontSize:
      int option ;
    titleFont:
      string option ;
    titleColor:
      string option ;
    titleBaseline:
      string option ;
    titleAlign:
      string option ;
    symbolType:
      string option ;
    symbolStrokeWidth:
      int option ;
    symbolSize:
      int option ;
    symbolColor:
      string option ;
    strokeWidth:
      int option ;
    strokeDash:
      int list
        option
      ;
    strokeColor:
      string option ;
    shortTimeLabels:
      bool option ;
    padding:
      int option ;
    orient:
LegendOrient.t
        option
      ;
    offset:
      int option ;
    labelOffset:
      int option ;
    labelLimit:
      int option ;
    labelFontSize:
      int option ;
    labelFont:
      string option ;
    labelColor:
      string option ;
    labelBaseline:
      string option ;
    labelAlign:
      string option ;
    gradientWidth:
      int option ;
    gradientStrokeWidth:
      int option ;
    gradientStrokeColor:
      string option ;
    gradientLabelOffset:
      int option ;
    gradientLabelLimit:
      int option ;
    gradientLabelBaseline:
      string option ;
    gradientHeight:
      int option ;
    fillColor:
      string option ;
    entryPadding:
      int option ;
    cornerRadius:
      int option }
  val to_yojson :
    t ->
Yojson.Safe.json
  val make :
    ?titlePadding:int
      option ->
      ?titleLimit:int
        option ->
        ?titleFontWeight:LegendConfig_TitleFontWeight_Variant.t
          option ->
          ?titleFontSize:int
           option ->
           ?titleFont:string
           option ->
           ?titleColor:string
           option ->
           ?titleBaseline:string
           option ->
           ?titleAlign:string
           option ->
           ?symbolType:string
           option ->
           ?symbolStrokeWidth:int
           option ->
           ?symbolSize:int
           option ->
           ?symbolColor:string
           option ->
           ?strokeWidth:int
           option ->
           ?strokeDash:int
           list
           option ->
           ?strokeColor:string
           option ->
           ?shortTimeLabels:bool
           option ->
           ?padding:int
           option ->
           ?orient:LegendOrient.t
           option ->
           ?offset:int
           option ->
           ?labelOffset:int
           option ->
           ?labelLimit:int
           option ->
           ?labelFontSize:int
           option ->
           ?labelFont:string
           option ->
           ?labelColor:string
           option ->
           ?labelBaseline:string
           option ->
           ?labelAlign:string
           option ->
           ?gradientWidth:int
           option ->
           ?gradientStrokeWidth:int
           option ->
           ?gradientStrokeColor:string
           option ->
           ?gradientLabelOffset:int
           option ->
           ?gradientLabelLimit:int
           option ->
           ?gradientLabelBaseline:string
           option ->
           ?gradientHeight:int
           option ->
           ?fillColor:string
           option ->
           ?entryPadding:int
           option ->
           ?cornerRadius:int
           option ->
           unit -> t
end =
struct
  type nonrec t =
    {
    titlePadding:
      int option ;
    titleLimit:
      int option ;
    titleFontWeight:
LegendConfig_TitleFontWeight_Variant.t
        option
      ;
    titleFontSize:
      int option ;
    titleFont:
      string option ;
    titleColor:
      string option ;
    titleBaseline:
      string option ;
    titleAlign:
      string option ;
    symbolType:
      string option ;
    symbolStrokeWidth:
      int option ;
    symbolSize:
      int option ;
    symbolColor:
      string option ;
    strokeWidth:
      int option ;
    strokeDash:
      int list
        option
      ;
    strokeColor:
      string option ;
    shortTimeLabels:
      bool option ;
    padding:
      int option ;
    orient:
LegendOrient.t
        option
      ;
    offset:
      int option ;
    labelOffset:
      int option ;
    labelLimit:
      int option ;
    labelFontSize:
      int option ;
    labelFont:
      string option ;
    labelColor:
      string option ;
    labelBaseline:
      string option ;
    labelAlign:
      string option ;
    gradientWidth:
      int option ;
    gradientStrokeWidth:
      int option ;
    gradientStrokeColor:
      string option ;
    gradientLabelOffset:
      int option ;
    gradientLabelLimit:
      int option ;
    gradientLabelBaseline:
      string option ;
    gradientHeight:
      int option ;
    fillColor:
      string option ;
    entryPadding:
      int option ;
    cornerRadius:
      int option }

  (** Fields
  
    titlePadding:
      The padding, in pixels, between title and legend.
  
    titleLimit:
      Maximum allowed pixel width of axis titles.
  
    titleFontWeight:
      The font weight of the legend title.
  
    titleFontSize:
      The font size of the legend title.
  
    titleFont:
      The font of the legend title.
  
    titleColor:
      The color of the legend title, can be in hex color code or regular color name.
  
    titleBaseline:
      Optional mark property definitions for custom legend styling. 
       Vertical text baseline for legend titles.
  
    titleAlign:
      Horizontal text alignment for legend titles.
  
    symbolType:
      Default shape type (such as "circle") for legend symbols.
  
    symbolStrokeWidth:
      The width of the symbol's stroke.
  
    symbolSize:
      The size of the legend symbol, in pixels.
  
    symbolColor:
      The color of the legend symbol,
  
    strokeWidth:
      Border stroke width for the full legend.
  
    strokeDash:
      Border stroke dash pattern for the full legend.
  
    strokeColor:
      Border stroke color for the full legend.
  
    shortTimeLabels:
      Whether month names and weekday names should be abbreviated.
      
      __Default value:__  `false`
  
    padding:
      The padding, in pixels, between the legend and axis.
  
    orient:
      The orientation of the legend, which determines how the legend is positioned within the scene. One of "left", "right", "top-left", "top-right", "bottom-left", "bottom-right", "none".
      
      __Default value:__ `"right"`
  
    offset:
      The offset, in pixels, by which to displace the legend from the edge of the enclosing group or data rectangle.
      
      __Default value:__  `0`
  
    labelOffset:
      The offset of the legend label.
  
    labelLimit:
      Maximum allowed pixel width of axis tick labels.
  
    labelFontSize:
      The font size of legend label.
      
      __Default value:__ `10`.
  
    labelFont:
      The font of the legend label.
  
    labelColor:
      The color of the legend label, can be in hex color code or regular color name.
  
    labelBaseline:
      The position of the baseline of legend label, can be top, middle or bottom.
  
    labelAlign:
      The alignment of the legend label, can be left, middle or right.
  
    gradientWidth:
      The width of the gradient, in pixels.
  
    gradientStrokeWidth:
      The width of the gradient stroke, in pixels.
  
    gradientStrokeColor:
      The color of the gradient stroke, can be in hex color code or regular color name.
  
    gradientLabelOffset:
      Vertical offset in pixels for color ramp gradient labels.
  
    gradientLabelLimit:
      The maximum allowed length in pixels of color ramp gradient labels.
  
    gradientLabelBaseline:
      Text baseline for color ramp gradient labels.
  
    gradientHeight:
      The height of the gradient, in pixels.
  
    fillColor:
      Background fill color for the full legend.
  
    entryPadding:
      Padding (in pixels) between legend entries in a symbol legend.
  
    cornerRadius:
      Corner radius for the full legend.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun 
           (k,v)  ->
           match v
           with
           | 
           `Null ->
           false
           | 
           _ -> true)
         [("cornerRadius",
           (((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (i : int)
            ->
           (`Int i : 
Yojson.Safe.json)))
           v))
           x.cornerRadius));
         ("entryPadding",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (i : int)
            ->
           (`Int i : 
Yojson.Safe.json)))
           v))
           x.entryPadding));
         ("fillColor",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (s :
           string) 
           ->
           (`String
           s : Yojson.Safe.json)))
           v))
           x.fillColor));
         ("gradientHeight",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (i : int)
            ->
           (`Int i : 
Yojson.Safe.json)))
           v))
           x.gradientHeight));
         ("gradientLabelBaseline",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (s :
           string) 
           ->
           (`String
           s : Yojson.Safe.json)))
           v))
           x.gradientLabelBaseline));
         ("gradientLabelLimit",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (i : int)
            ->
           (`Int i : 
Yojson.Safe.json)))
           v))
           x.gradientLabelLimit));
         ("gradientLabelOffset",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (i : int)
            ->
           (`Int i : 
Yojson.Safe.json)))
           v))
           x.gradientLabelOffset));
         ("gradientStrokeColor",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (s :
           string) 
           ->
           (`String
           s : Yojson.Safe.json)))
           v))
           x.gradientStrokeColor));
         ("gradientStrokeWidth",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (i : int)
            ->
           (`Int i : 
Yojson.Safe.json)))
           v))
           x.gradientStrokeWidth));
         ("gradientWidth",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (i : int)
            ->
           (`Int i : 
Yojson.Safe.json)))
           v))
           x.gradientWidth));
         ("labelAlign",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (s :
           string) 
           ->
           (`String
           s : Yojson.Safe.json)))
           v))
           x.labelAlign));
         ("labelBaseline",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (s :
           string) 
           ->
           (`String
           s : Yojson.Safe.json)))
           v))
           x.labelBaseline));
         ("labelColor",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (s :
           string) 
           ->
           (`String
           s : Yojson.Safe.json)))
           v))
           x.labelColor));
         ("labelFont",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (s :
           string) 
           ->
           (`String
           s : Yojson.Safe.json)))
           v))
           x.labelFont));
         ("labelFontSize",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (i : int)
            ->
           (`Int i : 
Yojson.Safe.json)))
           v))
           x.labelFontSize));
         ("labelLimit",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (i : int)
            ->
           (`Int i : 
Yojson.Safe.json)))
           v))
           x.labelLimit));
         ("labelOffset",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (i : int)
            ->
           (`Int i : 
Yojson.Safe.json)))
           v))
           x.labelOffset));
         ("offset",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (i : int)
            ->
           (`Int i : 
Yojson.Safe.json)))
           v))
           x.offset));
         ("orient",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (x :
LegendOrient.t)
            ->
           (LegendOrient.to_yojson
           x : Yojson.Safe.json)))
           v))
           x.orient));
         ("padding",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (i : int)
            ->
           (`Int i : 
Yojson.Safe.json)))
           v))
           x.padding));
         ("shortTimeLabels",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (b :
           bool)  ->
           (`Bool b : 
Yojson.Safe.json)))
           v))
           x.shortTimeLabels));
         ("strokeColor",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (s :
           string) 
           ->
           (`String
           s : Yojson.Safe.json)))
           v))
           x.strokeColor));
         ("strokeDash",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (l :
           int list)
            ->
           let yojson_of_el
           (i : int)
           =
           (`Int i : 
Yojson.Safe.json)
            in
           (`List
           (List.map
           yojson_of_el
           l) : 
Yojson.Safe.json)))
           v))
           x.strokeDash));
         ("strokeWidth",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (i : int)
            ->
           (`Int i : 
Yojson.Safe.json)))
           v))
           x.strokeWidth));
         ("symbolColor",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (s :
           string) 
           ->
           (`String
           s : Yojson.Safe.json)))
           v))
           x.symbolColor));
         ("symbolSize",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (i : int)
            ->
           (`Int i : 
Yojson.Safe.json)))
           v))
           x.symbolSize));
         ("symbolStrokeWidth",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (i : int)
            ->
           (`Int i : 
Yojson.Safe.json)))
           v))
           x.symbolStrokeWidth));
         ("symbolType",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (s :
           string) 
           ->
           (`String
           s : Yojson.Safe.json)))
           v))
           x.symbolType));
         ("titleAlign",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (s :
           string) 
           ->
           (`String
           s : Yojson.Safe.json)))
           v))
           x.titleAlign));
         ("titleBaseline",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (s :
           string) 
           ->
           (`String
           s : Yojson.Safe.json)))
           v))
           x.titleBaseline));
         ("titleColor",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (s :
           string) 
           ->
           (`String
           s : Yojson.Safe.json)))
           v))
           x.titleColor));
         ("titleFont",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (s :
           string) 
           ->
           (`String
           s : Yojson.Safe.json)))
           v))
           x.titleFont));
         ("titleFontSize",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (i : int)
            ->
           (`Int i : 
Yojson.Safe.json)))
           v))
           x.titleFontSize));
         ("titleFontWeight",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (x :
LegendConfig_TitleFontWeight_Variant.t)
            ->
           (LegendConfig_TitleFontWeight_Variant.to_yojson
           x : Yojson.Safe.json)))
           v))
           x.titleFontWeight));
         ("titleLimit",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (i : int)
            ->
           (`Int i : 
Yojson.Safe.json)))
           v))
           x.titleLimit));
         ("titlePadding",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (i : int)
            ->
           (`Int i : 
Yojson.Safe.json)))
           v))
x.titlePadding))])                                                              
  let make
    ?(titlePadding=
None) 
    ?(titleLimit=
None) 
    ?(titleFontWeight=
None) 
    ?(titleFontSize=
None) 
    ?(titleFont=
None) 
    ?(titleColor=
None) 
    ?(titleBaseline=
None) 
    ?(titleAlign=
None) 
    ?(symbolType=
None) 
    ?(symbolStrokeWidth=
None) 
    ?(symbolSize=
None) 
    ?(symbolColor=
None) 
    ?(strokeWidth=
None) 
    ?(strokeDash=
None) 
    ?(strokeColor=
None) 
    ?(shortTimeLabels=
None) 
    ?(padding= None)
     ?(orient= None)
     ?(offset= None)
     ?(labelOffset=
None) 
    ?(labelLimit=
None) 
    ?(labelFontSize=
None) 
    ?(labelFont=
None) 
    ?(labelColor=
None) 
    ?(labelBaseline=
None) 
    ?(labelAlign=
None) 
    ?(gradientWidth=
None) 
    ?(gradientStrokeWidth=
None) 
    ?(gradientStrokeColor=
None) 
    ?(gradientLabelOffset=
None) 
    ?(gradientLabelLimit=
None) 
    ?(gradientLabelBaseline=
None) 
    ?(gradientHeight=
None) 
    ?(fillColor=
None) 
    ?(entryPadding=
None) 
    ?(cornerRadius=
None)  () =
    {
      cornerRadius;
      entryPadding;
      fillColor;
      gradientHeight;
      gradientLabelBaseline;
      gradientLabelLimit;
      gradientLabelOffset;
      gradientStrokeColor;
      gradientStrokeWidth;
      gradientWidth;
      labelAlign;
      labelBaseline;
      labelColor;
      labelFont;
      labelFontSize;
      labelLimit;
      labelOffset;
      offset;
      orient;
      padding;
      shortTimeLabels;
      strokeColor;
      strokeDash;
      strokeWidth;
      symbolColor;
      symbolSize;
      symbolStrokeWidth;
      symbolType;
      titleAlign;
      titleBaseline;
      titleColor;
      titleFont;
      titleFontSize;
      titleFontWeight;
      titleLimit;
      titlePadding
    } 
end and
LegendConfig_TitleFontWeight_Variant:
                                                              sig
  type t =
    [
      `String
      of 
      string 
    | `Num of
      int ]
  val to_yojson
    :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [
      `String
      of 
      string 
    | `Num of
      int ]

  let to_yojson
    =
    function
    | `String v
      ->
      ((fun
      (s :
      string) 
      ->
      (`String
      s : Yojson.Safe.json)))
      v
    | `Num v ->
      ((fun
      (i : int)
       ->
      (`Int i : 
Yojson.Safe.json)))
v                                                                   
end and
LegendFieldDef:
                                                                   sig
 type nonrec t =
 {
 type_:
Type.t ;
 timeUnit:
TimeUnit.t
 option ;
 sort:
LegendFieldDef_Sort_Variant_1.t
 option ;
 scale:
Scale.t
 option ;
 legend:
LegendFieldDef_Legend_Variant.t
 option ;
 field:
Field.t
 option ;
 bin:
LegendFieldDef_Bin_Variant.t
 option ;
 aggregate:
Aggregate.t
 option }
 val
 to_yojson
 :
 t ->
Yojson.Safe.json
 val make
 :
 ?timeUnit:TimeUnit.t
 option ->
 ?sort:LegendFieldDef_Sort_Variant_1.t
 option ->
 ?scale:Scale.t
 option ->
 ?legend:LegendFieldDef_Legend_Variant.t
 option ->
 ?field:Field.t
 option ->
 ?bin:LegendFieldDef_Bin_Variant.t
 option ->
 ?aggregate:Aggregate.t
 option ->
Type.t ->
 t
end =
struct
 type nonrec t =
 {
 type_:
Type.t ;
 timeUnit:
TimeUnit.t
 option ;
 sort:
LegendFieldDef_Sort_Variant_1.t
 option ;
 scale:
Scale.t
 option ;
 legend:
LegendFieldDef_Legend_Variant.t
 option ;
 field:
Field.t
 option ;
 bin:
LegendFieldDef_Bin_Variant.t
 option ;
 aggregate:
Aggregate.t
 option }

  (** Fields
  
    type:
      The encoded field's type of measurement. This can be either a full type
      name (`"quantitative"`, `"temporal"`, `"ordinal"`,  and `"nominal"`).
  
    timeUnit:
      Time unit for a `temporal` field  (e.g., `year`, `yearmonth`, `month`, `hour`).
      
      __Default value:__ `undefined` (None)
  
    sort:
      Sort order for the encoded field.
      Supported `sort` values include `"ascending"`, `"descending"` and `null` (no sorting).
      For fields with discrete domains, `sort` can also be a [sort field definition object](sort.html#sort-field).
      
      __Default value:__ `"ascending"`
  
    scale:
      An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.
      
      __Default value:__ If undefined, default [scale properties](scale.html) are applied.
  
    legend:
      An object defining properties of the legend.
      If `null`, the legend for the encoding channel will be removed.
      
      __Default value:__ If undefined, default [legend properties](legend.html) are applied.
  
    field:
      __Required.__ A string defining the name of the field from which to pull a data value
      or an object defining iterated values from the [`repeat`](repeat.html) operator.
      
      __Note:__ `field` is not required if `aggregate` is `count`.
  
    bin:
      A flag for binning a `quantitative` field, or [an object defining binning parameters](bin.html#params).
      If `true`, default [binning parameters](bin.html) will be applied.
      
      __Default value:__ `false`
  
    aggregate:
      Aggregation function for the field
      (e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).
      
      __Default value:__ `undefined` (None)
  *)
 let to_yojson
 x =
 `Assoc
 (List.filter
 (fun
 (k,v)  ->
 match v
 with
 | 
 `Null ->
 false
 | 
 _ -> true)
 [
 ("aggregate",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
Aggregate.t)
  ->
 (Aggregate.to_yojson
 x : Yojson.Safe.json)))
 v))
 x.aggregate));
 ("bin",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
LegendFieldDef_Bin_Variant.t)
  ->
 (LegendFieldDef_Bin_Variant.to_yojson
 x : Yojson.Safe.json)))
 v)) x.bin));
 ("field",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
Field.t) 
 ->
 (Field.to_yojson
 x : Yojson.Safe.json)))
 v))
 x.field));
 ("legend",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
LegendFieldDef_Legend_Variant.t)
  ->
 (LegendFieldDef_Legend_Variant.to_yojson
 x : Yojson.Safe.json)))
 v))
 x.legend));
 ("scale",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
Scale.t) 
 ->
 (Scale.to_yojson
 x : Yojson.Safe.json)))
 v))
 x.scale));
 ("sort",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
LegendFieldDef_Sort_Variant_1.t)
  ->
 (LegendFieldDef_Sort_Variant_1.to_yojson
 x : Yojson.Safe.json)))
 v))
 x.sort));
 ("timeUnit",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
TimeUnit.t)
  ->
 (TimeUnit.to_yojson
 x : Yojson.Safe.json)))
 v))
 x.timeUnit));
 ("type",
 (((fun
 (x :
Type.t) 
 ->
 (Type.to_yojson
 x : Yojson.Safe.json)))
x.type_))])                                                                     
 let make
 ?(timeUnit=
None) 
 ?(sort=
None) 
 ?(scale=
None) 
 ?(legend=
None) 
 ?(field=
None) 
 ?(bin=
None) 
 ?(aggregate=
None) 
 type_ =
 {
 type_;
 aggregate;
 bin;
 field;
 legend;
 scale;
 sort;
 timeUnit
 } 
end
and
LegendFieldDef_Bin_Variant:sig
  type t =
    [ `BinParams of BinParams.t 
    | `Boolean of bool ]
  val to_yojson : t -> Yojson.Safe.json
end =
struct
  type t = [ `BinParams of BinParams.t  | `Boolean of bool ]

  let to_yojson =
    function
    | `BinParams v ->
        ((fun (x : BinParams.t)  ->
            (BinParams.to_yojson x : Yojson.Safe.json))) v
    | `Boolean v -> ((fun (b : bool)  -> (`Bool b : Yojson.Safe.json))) v 
end and
LegendFieldDef_Legend_Variant:sig
  type t =
    [ `Legend of Legend.t ] option
  val to_yojson : t -> Yojson.Safe.json
end =
struct
  type t = [ `Legend of Legend.t ] option

  let to_yojson =
    function
    | None -> `Null
    | Some (`Legend v) ->
        ((fun (x : Legend.t)  ->
(Legend.to_yojson x : Yojson.Safe.json))) v            
end and
LegendFieldDef_Sort_Variant:sig
  type t =
    [ `SortField of SortField.t 
    | `SortOrder of SortOrder.t ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [ `SortField of SortField.t  | `SortOrder of SortOrder.t ]

  let to_yojson =
    function
    | `SortField v ->
        ((fun (x : SortField.t)  ->
            (SortField.to_yojson x : Yojson.Safe.json))) v
    | `SortOrder v ->
        ((fun (x : SortOrder.t)  ->
(SortOrder.to_yojson x : Yojson.Safe.json))) v                 
end and
LegendFieldDef_Sort_Variant_1:sig
  type t =
    [
      `LegendFieldDef_Sort_Variant
        of
LegendFieldDef_Sort_Variant.t
        ]
      option
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [
      `LegendFieldDef_Sort_Variant of
LegendFieldDef_Sort_Variant.t ]
      option

  let to_yojson =
    function
    | None -> `Null
    | Some (`LegendFieldDef_Sort_Variant v) ->
        ((fun (x : LegendFieldDef_Sort_Variant.t)  ->
            (LegendFieldDef_Sort_Variant.to_yojson x : 
Yojson.Safe.json))) v                      
end and
LegendOrient:sig
  type t =
    [ `None  | `Bottom_right 
    | `Bottom_left  | `Top_right 
    | `Top_left  | `Right  | `Left ]
  val to_yojson : t -> Yojson.Safe.json
end =
struct
  type t =
    [ `None  | `Bottom_right  | `Bottom_left 
    | `Top_right  | `Top_left  | `Right  | `Left ]

  let to_yojson =
    function
    | `None -> `String "none"
    | `Bottom_right -> `String "bottom_right"
    | `Bottom_left -> `String "bottom_left"
    | `Top_right -> `String "top_right"
    | `Top_left -> `String "top_left"
    | `Right -> `String "right"
    | `Left -> `String "left" 
end and
LegendResolveMap:sig
  type nonrec t =
    {
    size: ResolveMode.t option ;
    shape: ResolveMode.t option ;
    opacity: ResolveMode.t option ;
    color: ResolveMode.t option }
  val to_yojson :
    t -> Yojson.Safe.json
  val make :
    ?size:ResolveMode.t option ->
      ?shape:ResolveMode.t option
        ->
        ?opacity:ResolveMode.t
          option ->
          ?color:ResolveMode.t
            option -> unit -> t
end =
struct
  type nonrec t =
    {
    size: ResolveMode.t option ;
    shape: ResolveMode.t option ;
    opacity: ResolveMode.t option ;
    color: ResolveMode.t option }

  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null -> false
            | _ -> true)
         [("color",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun (x : ResolveMode.t)  ->
                       (ResolveMode.to_yojson x : 
Yojson.Safe.json))) v))
               x.color));
         ("opacity",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : ResolveMode.t)  ->
                      (ResolveMode.to_yojson x : 
Yojson.Safe.json))) v))
              x.opacity));
         ("shape",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : ResolveMode.t)  ->
                      (ResolveMode.to_yojson x : 
Yojson.Safe.json))) v))
              x.shape));
         ("size",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : ResolveMode.t)  ->
                      (ResolveMode.to_yojson x : 
Yojson.Safe.json))) v))
x.size))])                                
  let make ?(size= None)  ?(shape= None) 
    ?(opacity= None)  ?(color= None)  () =
    { color; opacity; shape; size } 
end and
Legend_Values_Variant:sig
  type t =
    [
      `DateTime_List of
DateTime.t list 
    | `String_List of
        string list 
    | `Number_List of
        int list ]
  val to_yojson :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [ `DateTime_List of DateTime.t list 
    | `String_List of string list 
    | `Number_List of int list ]

  let to_yojson =
    function
    | `DateTime_List v ->
        ((fun (l : DateTime.t list)  ->
            let yojson_of_el (x : DateTime.t)
              =
              (DateTime.to_yojson x : 
Yojson.Safe.json)  in
            (`List (List.map yojson_of_el l) : 
Yojson.Safe.json))) v
    | `String_List v ->
        ((fun (l : string list)  ->
            let yojson_of_el (s : string) =
              (`String s : Yojson.Safe.json)
               in
            (`List (List.map yojson_of_el l) : 
Yojson.Safe.json))) v
    | `Number_List v ->
        ((fun (l : int list)  ->
            let yojson_of_el (i : int) =
              (`Int i : Yojson.Safe.json)  in
            (`List (List.map yojson_of_el l) : 
Yojson.Safe.json))) v                                     
end and
LocalMultiTimeUnit:sig
  type t =
    [
      `Secondsmilliseconds
         | `Minutesseconds
             | 
      `Hoursminutesseconds
         | `Hoursminutes
             | 
      `Monthdate 
    | `Quartermonth 
    | `Yearmonthdatehoursminutesseconds
         | `Yearmonthdatehoursminutes
             | 
      `Yearmonthdatehours
         | `Yearmonthdate
             | 
      `Yearmonth 
    | `Yearquartermonth
         | `Yearquarter
            ]
  val to_yojson :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [ `Secondsmilliseconds 
    | `Minutesseconds 
    | `Hoursminutesseconds 
    | `Hoursminutes  | `Monthdate 
    | `Quartermonth 
    | `Yearmonthdatehoursminutesseconds 
    | `Yearmonthdatehoursminutes 
    | `Yearmonthdatehours 
    | `Yearmonthdate  | `Yearmonth 
    | `Yearquartermonth 
    | `Yearquarter ]

  let to_yojson =
    function
    | `Secondsmilliseconds ->
        `String "secondsmilliseconds"
    | `Minutesseconds ->
        `String "minutesseconds"
    | `Hoursminutesseconds ->
        `String "hoursminutesseconds"
    | `Hoursminutes ->
        `String "hoursminutes"
    | `Monthdate -> `String "monthdate"
    | `Quartermonth ->
        `String "quartermonth"
    | `Yearmonthdatehoursminutesseconds
        ->
        `String
          "yearmonthdatehoursminutesseconds"
    | `Yearmonthdatehoursminutes ->
        `String
          "yearmonthdatehoursminutes"
    | `Yearmonthdatehours ->
        `String "yearmonthdatehours"
    | `Yearmonthdate ->
        `String "yearmonthdate"
    | `Yearmonth -> `String "yearmonth"
    | `Yearquartermonth ->
        `String "yearquartermonth"
    | `Yearquarter ->
`String "yearquarter"                                          
end and
LocalSingleTimeUnit:sig
  type t =
    [
      `Milliseconds
       | 
      `Seconds 
    | `Minutes 
    | `Hours 
    | `Date 
    | `Day 
    | `Month 
    | `Quarter 
    | `Year ]
  val to_yojson
    :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [ `Milliseconds  | `Seconds 
    | `Minutes  | `Hours  | 
      `Date 
    | `Day  | `Month  | `Quarter 
    | `Year ]

  let to_yojson =
    function
    | `Milliseconds ->
        `String "milliseconds"
    | `Seconds -> `String "seconds"
    | `Minutes -> `String "minutes"
    | `Hours -> `String "hours"
    | `Date -> `String "date"
    | `Day -> `String "day"
    | `Month -> `String "month"
    | `Quarter -> `String "quarter"
    | `Year -> `String "year" 
end and
LookupData:sig
  type nonrec t =
    {
    key: string ;
    fields:
      string list
        option
      ;
    data: Data.t }
  val to_yojson :
    t ->
Yojson.Safe.json
  val make :
    ?fields:string
      list option
      ->
      string ->
Data.t -> t
end =
struct
  type nonrec t =
    {
    key: string ;
    fields: string list option ;
    data: Data.t }

  (** Fields
  
    key:
      key in data to lookup
  
    fields:
      (Optional) fields in foreign data to lookup
      if not specificied, the entire object is queried
  
    data:
      secondary data source to lookup in
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null -> false
            | _ -> true)
         [("data",
            (((fun
                 (x : Data.t) 
                 ->
                 (Data.to_yojson
                    x : 
Yojson.Safe.json)))
               x.data));
         ("fields",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                     (l :
                     string
                     list)  ->
                     let yojson_of_el
                     (s :
                     string) =
                     (`String
                     s : 
Yojson.Safe.json)
                      in
                     (`List
                     (List.map
                     yojson_of_el
                     l) : 
Yojson.Safe.json)))
                    v))
              x.fields));
         ("key",
           (((fun (s : string)
                 ->
                (`String s : 
Yojson.Safe.json)))
x.key))])                                                    
  let make ?(fields= None) 
    key data =
    { data; key; fields } 
end and
LookupTransform:sig
                                                                    type nonrec t =
                                                                    {
                                                                    lookup:
                                                                    string ;
                                                                    from:
LookupData.t
                                                                    ;
                                                                    default:
                                                                    string
                                                                    option ;
                                                                    as_:
LookupTransform_As_Variant.t
                                                                    option }
                                                                    val
                                                                    to_yojson
                                                                    :
                                                                    t ->
Yojson.Safe.json
                                                                    val make
                                                                    :
                                                                    ?default:string
                                                                    option ->
                                                                    ?as_:LookupTransform_As_Variant.t
                                                                    option ->
                                                                    string ->
LookupData.t
                                                                    -> 
                                                                    t
end =
struct
  type nonrec t =
    {
    lookup: string ;
    from: LookupData.t ;
    default:
      string option ;
    as_:
LookupTransform_As_Variant.t
        option
      }

  (** Fields
  
    lookup:
      key in primary data source
  
    from:
      secondary data reference
  
    default:
      (Optional) The default value to use if lookup fails
  
    as:
      (Optional) The field or fields for storing the computed formula value.
      If `from.fields` is not specified, `as` has to be a string and we put the whole object into the data
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null ->
                false
            | _ -> true)
         [("as",
            (((function
               | 
None  ->
                `Null
               | 
Some v ->
                ((fun
                (x :
LookupTransform_As_Variant.t)
                 ->
                (LookupTransform_As_Variant.to_yojson
                x : Yojson.Safe.json)))
                v)) x.as_));
         ("default",
           (((function
              | None  ->
                `Null
              | Some v ->
                ((fun
                (s :
                string) 
                ->
                (`String
                s : Yojson.Safe.json)))
                v))
              x.default));
         ("from",
           (((fun
                (x :
LookupData.t)
                 ->
                (
LookupData.to_yojson
                x : 
Yojson.Safe.json)))
              x.from));
         ("lookup",
           (((fun
                (s :
                string) 
                ->
                (
                `String s : 
Yojson.Safe.json)))
x.lookup))])                                                         
  let make ?(default=
None)  ?(as_= None) 
    lookup from =
    {
      from;
      lookup;
      as_;
      default
    } 
end and
LookupTransform_As_Variant:
                                                         sig
  type t =
    [
      `String_List
        of
        string list 
    | `String of
        string ]
  val to_yojson :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [
      `String_List
        of
        string list 
    | `String of
        string ]

  let to_yojson =
    function
    | `String_List v
        ->
        ((fun
           (l :
           string
           list)  ->
           let yojson_of_el
           (s :
           string) =
           (`String
           s : 
Yojson.Safe.json)
            in
           (`List
           (List.map
           yojson_of_el
           l) : 
Yojson.Safe.json)))
          v
    | `String v ->
        ((fun
           (s :
           string) 
           ->
           (`String
           s : 
Yojson.Safe.json)))
v                                                              
end and
Mark:sig
 type t =
 [
 `Square 
 | `Circle 
 | `Rule 
 | `Rect 
 | `Tick 
 | `Text 
 | `Point 
 | `Line 
 | `Bar 
 | `Area ]
 val
 to_yojson
 :
 t ->
Yojson.Safe.json
end =
struct
  type t =
    [ `Square 
    | `Circle 
    | `Rule 
    | `Rect 
    | `Tick 
    | `Text 
    | `Point 
    | `Line 
    | `Bar 
    | `Area ]

  (** All types of primitive marks.
  *)
  let to_yojson
    =
    function
    | `Square
      ->
      `String
      "square"
    | `Circle
      ->
      `String
      "circle"
    | `Rule ->
      `String
      "rule"
    | `Rect ->
      `String
      "rect"
    | `Tick ->
      `String
      "tick"
    | `Text ->
      `String
      "text"
    | `Point ->
      `String
      "point"
    | `Line ->
      `String
      "line"
    | `Bar ->
      `String
      "bar"
    | `Area ->
      `String
"area"                                                                   
end and
MarkConfig:
                                                                   sig
 type nonrec t =
 {
 theta:
 int
 option ;
 text:
 string
 option ;
 tension:
 int
 option ;
 strokeWidth:
 int
 option ;
 strokeOpacity:
 int
 option ;
 strokeDashOffset:
 int
 option ;
 strokeDash:
 int list
 option ;
 stroke:
 string
 option ;
 size:
 int
 option ;
 shape:
 string
 option ;
 radius:
 int
 option ;
 orient:
Orient.t
 option ;
 opacity:
 int
 option ;
 limit:
 int
 option ;
 interpolate:
Interpolate.t
 option ;
 fontWeight:
MarkConfig_FontWeight_Variant.t
 option ;
 fontStyle:
FontStyle.t
 option ;
 fontSize:
 int
 option ;
 font:
 string
 option ;
 filled:
 bool
 option ;
 fillOpacity:
 int
 option ;
 fill:
 string
 option ;
 dy:
 int
 option ;
 dx:
 int
 option ;
 color:
 string
 option ;
 baseline:
VerticalAlign.t
 option ;
 angle:
 int
 option ;
 align:
HorizontalAlign.t
 option }
 val
 to_yojson
 :
 t ->
Yojson.Safe.json
 val make
 :
 ?theta:int
 option ->
 ?text:string
 option ->
 ?tension:int
 option ->
 ?strokeWidth:int
 option ->
 ?strokeOpacity:int
 option ->
 ?strokeDashOffset:int
 option ->
 ?strokeDash:int
 list
 option ->
 ?stroke:string
 option ->
 ?size:int
 option ->
 ?shape:string
 option ->
 ?radius:int
 option ->
 ?orient:Orient.t
 option ->
 ?opacity:int
 option ->
 ?limit:int
 option ->
 ?interpolate:Interpolate.t
 option ->
 ?fontWeight:MarkConfig_FontWeight_Variant.t
 option ->
 ?fontStyle:FontStyle.t
 option ->
 ?fontSize:int
 option ->
 ?font:string
 option ->
 ?filled:bool
 option ->
 ?fillOpacity:int
 option ->
 ?fill:string
 option ->
 ?dy:int
 option ->
 ?dx:int
 option ->
 ?color:string
 option ->
 ?baseline:VerticalAlign.t
 option ->
 ?angle:int
 option ->
 ?align:HorizontalAlign.t
 option ->
 unit -> t
end =
struct
 type nonrec t =
 {
 theta:
 int
 option ;
 text:
 string
 option ;
 tension:
 int
 option ;
 strokeWidth:
 int
 option ;
 strokeOpacity:
 int
 option ;
 strokeDashOffset:
 int
 option ;
 strokeDash:
 int list
 option ;
 stroke:
 string
 option ;
 size:
 int
 option ;
 shape:
 string
 option ;
 radius:
 int
 option ;
 orient:
Orient.t
 option ;
 opacity:
 int
 option ;
 limit:
 int
 option ;
 interpolate:
Interpolate.t
 option ;
 fontWeight:
MarkConfig_FontWeight_Variant.t
 option ;
 fontStyle:
FontStyle.t
 option ;
 fontSize:
 int
 option ;
 font:
 string
 option ;
 filled:
 bool
 option ;
 fillOpacity:
 int
 option ;
 fill:
 string
 option ;
 dy:
 int
 option ;
 dx:
 int
 option ;
 color:
 string
 option ;
 baseline:
VerticalAlign.t
 option ;
 angle:
 int
 option ;
 align:
HorizontalAlign.t
 option }

  (** Fields
  
    theta:
      Polar coordinate angle, in radians, of the text label from the origin determined by the `x` and `y` properties. Values for `theta` follow the same convention of `arc` mark `startAngle` and `endAngle` properties: angles are measured in radians, with `0` indicating "north".
  
    text:
      Placeholder text if the `text` channel is not specified
  
    tension:
      Depending on the interpolation type, sets the tension parameter (for line and area marks).
  
    strokeWidth:
      The stroke width, in pixels.
  
    strokeOpacity:
      The stroke opacity (value between [0,1]).
      
      __Default value:__ `1`
  
    strokeDashOffset:
      The offset (in pixels) into which to begin drawing with the stroke dash array.
  
    strokeDash:
      An array of alternating stroke, space lengths for creating dashed or dotted lines.
  
    stroke:
      Default Stroke Color.  This has higher precedence than config.color
      
      __Default value:__ (None)
  
    size:
      The pixel area each the point/circle/square.
      For example: in the case of circles, the radius is determined in part by the square root of the size value.
      
      __Default value:__ `30`
  
    shape:
      The default symbol shape to use. One of: `"circle"` (default), `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`, or `"triangle-down"`, or a custom SVG path.
      
      __Default value:__ `"circle"`
  
    radius:
      Polar coordinate radial offset, in pixels, of the text label from the origin determined by the `x` and `y` properties.
  
    orient:
      The orientation of a non-stacked bar, tick, area, and line charts.
      The value is either horizontal (default) or vertical.
      - For bar, rule and tick, this determines whether the size of the bar and tick
      should be applied to x or y dimension.
      - For area, this property determines the orient property of the Vega output.
      - For line, this property determines the sort order of the points in the line
      if `config.sortLineBy` is not specified.
      For stacked charts, this is always determined by the orientation of the stack;
      therefore explicitly specified value will be ignored.
  
    opacity:
      The overall opacity (value between [0,1]).
      
      __Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.
  
    limit:
      The maximum length of the text mark in pixels (default 0, indicating no limit). The text value will be automatically truncated if the rendered size exceeds the limit.
  
    interpolate:
      The line interpolation method to use for line and area marks. One of the following:
      - `"linear"`: piecewise linear segments, as in a polyline.
      - `"linear-closed"`: close the linear segments to form a polygon.
      - `"step"`: alternate between horizontal and vertical segments, as in a step function.
      - `"step-before"`: alternate between vertical and horizontal segments, as in a step function.
      - `"step-after"`: alternate between horizontal and vertical segments, as in a step function.
      - `"basis"`: a B-spline, with control point duplication on the ends.
      - `"basis-open"`: an open B-spline; may not intersect the start or end.
      - `"basis-closed"`: a closed B-spline, as in a loop.
      - `"cardinal"`: a Cardinal spline, with control point duplication on the ends.
      - `"cardinal-open"`: an open Cardinal spline; may not intersect the start or end, but will intersect other control points.
      - `"cardinal-closed"`: a closed Cardinal spline, as in a loop.
      - `"bundle"`: equivalent to basis, except the tension parameter is used to straighten the spline.
      - `"monotone"`: cubic interpolation that preserves monotonicity in y.
  
    fontWeight:
      The font weight (e.g., `"bold"`).
  
    fontStyle:
      The font style (e.g., `"italic"`).
  
    fontSize:
      The font size, in pixels.
  
    font:
      The typeface to set the text in (e.g., `"Helvetica Neue"`).
  
    filled:
      Whether the mark's color should be used as fill color instead of stroke color.
      
      __Default value:__ `true` for all marks except `point` and `false` for `point`.
      
      __Applicable for:__ `bar`, `point`, `circle`, `square`, and `area` marks.
  
    fillOpacity:
      The fill opacity (value between [0,1]).
      
      __Default value:__ `1`
  
    fill:
      Default Fill Color.  This has higher precedence than config.color
      
      __Default value:__ (None)
  
    dy:
      The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.
  
    dx:
      The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.
  
    color:
      Default color.  Note that `fill` and `stroke` have higher precedence than `color` and will override `color`.
      
      __Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`
  
    baseline:
      The vertical alignment of the text. One of `"top"`, `"middle"`, `"bottom"`.
      
      __Default value:__ `"middle"`
  
    angle:
      The rotation angle of the text, in degrees.
  
    align:
      The horizontal alignment of the text. One of `"left"`, `"right"`, `"center"`.
  *)
 let to_yojson
 x =
 `Assoc
 (List.filter
 (fun
 (k,v)  ->
 match v
 with
 | 
 `Null ->
 false
 | 
 _ -> true)
 [
 ("align",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
HorizontalAlign.t)
  ->
 (HorizontalAlign.to_yojson
 x : Yojson.Safe.json)))
 v))
 x.align));
 ("angle",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
 x.angle));
 ("baseline",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
VerticalAlign.t)
  ->
 (VerticalAlign.to_yojson
 x : Yojson.Safe.json)))
 v))
 x.baseline));
 ("color",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (s :
 string) 
 ->
 (`String
 s : Yojson.Safe.json)))
 v))
 x.color));
 ("dx",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v)) x.dx));
 ("dy",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v)) x.dy));
 ("fill",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (s :
 string) 
 ->
 (`String
 s : Yojson.Safe.json)))
 v))
 x.fill));
 ("fillOpacity",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
 x.fillOpacity));
 ("filled",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (b :
 bool)  ->
 (`Bool b : 
Yojson.Safe.json)))
 v))
 x.filled));
 ("font",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (s :
 string) 
 ->
 (`String
 s : Yojson.Safe.json)))
 v))
 x.font));
 ("fontSize",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
 x.fontSize));
 ("fontStyle",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
FontStyle.t)
  ->
 (FontStyle.to_yojson
 x : Yojson.Safe.json)))
 v))
 x.fontStyle));
 ("fontWeight",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
MarkConfig_FontWeight_Variant.t)
  ->
 (MarkConfig_FontWeight_Variant.to_yojson
 x : Yojson.Safe.json)))
 v))
 x.fontWeight));
 ("interpolate",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
Interpolate.t)
  ->
 (Interpolate.to_yojson
 x : Yojson.Safe.json)))
 v))
 x.interpolate));
 ("limit",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
 x.limit));
 ("opacity",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
 x.opacity));
 ("orient",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
Orient.t)
  ->
 (Orient.to_yojson
 x : Yojson.Safe.json)))
 v))
 x.orient));
 ("radius",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
 x.radius));
 ("shape",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (s :
 string) 
 ->
 (`String
 s : Yojson.Safe.json)))
 v))
 x.shape));
 ("size",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
 x.size));
 ("stroke",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (s :
 string) 
 ->
 (`String
 s : Yojson.Safe.json)))
 v))
 x.stroke));
 ("strokeDash",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (l :
 int list)
  ->
 let yojson_of_el
 (i : int)
 =
 (`Int i : 
Yojson.Safe.json)
  in
 (`List
 (List.map
 yojson_of_el
 l) : 
Yojson.Safe.json)))
 v))
 x.strokeDash));
 ("strokeDashOffset",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
 x.strokeDashOffset));
 ("strokeOpacity",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
 x.strokeOpacity));
 ("strokeWidth",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
 x.strokeWidth));
 ("tension",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
 x.tension));
 ("text",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (s :
 string) 
 ->
 (`String
 s : Yojson.Safe.json)))
 v))
 x.text));
 ("theta",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
x.theta))])                                                                     
 let make
 ?(theta=
None) 
 ?(text=
None) 
 ?(tension=
None) 
 ?(strokeWidth=
None) 
 ?(strokeOpacity=
None) 
 ?(strokeDashOffset=
None) 
 ?(strokeDash=
None) 
 ?(stroke=
None) 
 ?(size=
None) 
 ?(shape=
None) 
 ?(radius=
None) 
 ?(orient=
None) 
 ?(opacity=
None) 
 ?(limit=
None) 
 ?(interpolate=
None) 
 ?(fontWeight=
None) 
 ?(fontStyle=
None) 
 ?(fontSize=
None) 
 ?(font=
None) 
 ?(filled=
None) 
 ?(fillOpacity=
None) 
 ?(fill=
None) 
 ?(dy=
None) 
 ?(dx=
None) 
 ?(color=
None) 
 ?(baseline=
None) 
 ?(angle=
None) 
 ?(align=
None)  ()
 =
 {
 align;
 angle;
 baseline;
 color;
 dx;
 dy;
 fill;
 fillOpacity;
 filled;
 font;
 fontSize;
 fontStyle;
 fontWeight;
 interpolate;
 limit;
 opacity;
 orient;
 radius;
 shape;
 size;
 stroke;
 strokeDash;
 strokeDashOffset;
 strokeOpacity;
 strokeWidth;
 tension;
 text;
 theta
 } 
end
and
MarkConfigMixins:sig
  type nonrec t =
    {
    tick: TickConfig.t option ;
    text: TextConfig.t option ;
    square: MarkConfig.t option ;
    rule: MarkConfig.t option ;
    rect: MarkConfig.t option ;
    point: MarkConfig.t option ;
    mark: MarkConfig.t option ;
    line: MarkConfig.t option ;
    circle: MarkConfig.t option ;
    bar: BarConfig.t option ;
    area: MarkConfig.t option }
  val to_yojson : t -> Yojson.Safe.json
  val make :
    ?tick:TickConfig.t option ->
      ?text:TextConfig.t option ->
        ?square:MarkConfig.t option ->
          ?rule:MarkConfig.t option ->
            ?rect:MarkConfig.t option ->
              ?point:MarkConfig.t option ->
                ?mark:MarkConfig.t option ->
                  ?line:MarkConfig.t option ->
                    ?circle:MarkConfig.t option ->
                      ?bar:BarConfig.t option ->
                        ?area:MarkConfig.t option ->
                          unit -> t
end =
struct
  type nonrec t =
    {
    tick: TickConfig.t option ;
    text: TextConfig.t option ;
    square: MarkConfig.t option ;
    rule: MarkConfig.t option ;
    rect: MarkConfig.t option ;
    point: MarkConfig.t option ;
    mark: MarkConfig.t option ;
    line: MarkConfig.t option ;
    circle: MarkConfig.t option ;
    bar: BarConfig.t option ;
    area: MarkConfig.t option }

  (** Fields
  
    tick:
      Tick-Specific Config 
  
    text:
      Text-Specific Config 
  
    square:
      Square-Specific Config 
  
    rule:
      Rule-Specific Config 
  
    rect:
      Rect-Specific Config 
  
    point:
      Point-Specific Config 
  
    mark:
      Mark Config 
  
    line:
      Line-Specific Config 
  
    circle:
      Circle-Specific Config 
  
    bar:
      Bar-Specific Config 
  
    area:
      Area-Specific Config 
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  -> match v with | `Null -> false | _ -> true)
         [("area",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun (x : MarkConfig.t)  ->
                       (MarkConfig.to_yojson x : Yojson.Safe.json))) v))
               x.area));
         ("bar",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : BarConfig.t)  ->
                      (BarConfig.to_yojson x : Yojson.Safe.json))) v))
              x.bar));
         ("circle",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : MarkConfig.t)  ->
                      (MarkConfig.to_yojson x : Yojson.Safe.json))) v))
              x.circle));
         ("line",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : MarkConfig.t)  ->
                      (MarkConfig.to_yojson x : Yojson.Safe.json))) v))
              x.line));
         ("mark",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : MarkConfig.t)  ->
                      (MarkConfig.to_yojson x : Yojson.Safe.json))) v))
              x.mark));
         ("point",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : MarkConfig.t)  ->
                      (MarkConfig.to_yojson x : Yojson.Safe.json))) v))
              x.point));
         ("rect",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : MarkConfig.t)  ->
                      (MarkConfig.to_yojson x : Yojson.Safe.json))) v))
              x.rect));
         ("rule",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : MarkConfig.t)  ->
                      (MarkConfig.to_yojson x : Yojson.Safe.json))) v))
              x.rule));
         ("square",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : MarkConfig.t)  ->
                      (MarkConfig.to_yojson x : Yojson.Safe.json))) v))
              x.square));
         ("text",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : TextConfig.t)  ->
                      (TextConfig.to_yojson x : Yojson.Safe.json))) v))
              x.text));
         ("tick",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : TickConfig.t)  ->
                      (TickConfig.to_yojson x : Yojson.Safe.json))) v))
x.tick))])       
  let make ?(tick= None)  ?(text= None)  ?(square= None)  ?(rule= None) 
    ?(rect= None)  ?(point= None)  ?(mark= None)  ?(line= None)  ?(circle=
None)  ?(bar= None)  ?(area= None)  () =
    { area; bar; circle; line; mark; point; rect; rule; square; text; tick
    } 
end and
MarkConfig_FontWeight_Variant:sig
  type t =
    [
      `FontWeightNumber of
FontWeightNumber.t 
    | `FontWeight of FontWeight.t ]
  val to_yojson : t -> Yojson.Safe.json
end =
struct
  type t =
    [ `FontWeightNumber of FontWeightNumber.t 
    | `FontWeight of FontWeight.t ]

  let to_yojson =
    function
    | `FontWeightNumber v ->
        ((fun (x : FontWeightNumber.t)  ->
            (FontWeightNumber.to_yojson x : Yojson.Safe.json))) v
    | `FontWeight v ->
        ((fun (x : FontWeight.t)  ->
(FontWeight.to_yojson x : Yojson.Safe.json))) v            
end and
MarkDef:sig
  type nonrec t =
    {
    type_: Mark.t ;
    tension: int option ;
    style: MarkDef_Style_Variant.t option ;
    orient: Orient.t option ;
    interpolate: Interpolate.t option ;
    filled: bool option ;
    clip: bool option }
  val to_yojson : t -> Yojson.Safe.json
  val make :
    ?tension:int option ->
      ?style:MarkDef_Style_Variant.t option ->
        ?orient:Orient.t option ->
          ?interpolate:Interpolate.t option ->
            ?filled:bool option ->
              ?clip:bool option -> Mark.t -> t
end =
struct
  type nonrec t =
    {
    type_: Mark.t ;
    tension: int option ;
    style: MarkDef_Style_Variant.t option ;
    orient: Orient.t option ;
    interpolate: Interpolate.t option ;
    filled: bool option ;
    clip: bool option }

  (** Fields
  
    type:
      The mark type.
      One of `"bar"`, `"circle"`, `"square"`, `"tick"`, `"line"`,
      `"area"`, `"point"`, `"rule"`, and `"text"`.
  
    tension:
      Depending on the interpolation type, sets the tension parameter (for line and area marks).
      
      TODO: provide the link to D3 docs.
  
    style:
      A string or array of strings indicating the name of custom styles to apply to the mark. A style is a named collection of mark property defaults defined within the [configuration](config.html). If style is an array, later styles will override earlier styles. Any [mark properties](encoding.html#mark-prop) explicitly defined within the `encoding` will override a style default.
      
      __Default value:__ The mark's name.  For example, a bar mark will have style `"bar"` by default.
  
    orient:
      Orientation of the marks.
  
    interpolate:
      The line interpolation method to use for line and area marks. One of the following:
      - `"linear"`: piecewise linear segments, as in a polyline.
      - `"linear-closed"`: close the linear segments to form a polygon.
      - `"step"`: alternate between horizontal and vertical segments, as in a step function.
      - `"step-before"`: alternate between vertical and horizontal segments, as in a step function.
      - `"step-after"`: alternate between horizontal and vertical segments, as in a step function.
      - `"basis"`: a B-spline, with control point duplication on the ends.
      - `"basis-open"`: an open B-spline; may not intersect the start or end.
      - `"basis-closed"`: a closed B-spline, as in a loop.
      - `"cardinal"`: a Cardinal spline, with control point duplication on the ends.
      - `"cardinal-open"`: an open Cardinal spline; may not intersect the start or end, but will intersect other control points.
      - `"cardinal-closed"`: a closed Cardinal spline, as in a loop.
      - `"bundle"`: equivalent to basis, except the tension parameter is used to straighten the spline.
      - `"monotone"`: cubic interpolation that preserves monotonicity in y.
      
      For more information about each interpolation method, please see [Vega's line interpolation docs](https://vega.github.io/vega/docs/marks/line/).
  
    filled:
      Whether the mark's color should be used as fill color instead of stroke color.
      
      __Default value:__ All marks except `"point"`, `"line"`, and `"rule"` are filled by default.
  
    clip:
      Whether a mark be clipped to the enclosing group’s width and height.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  -> match v with | `Null -> false | _ -> true)
         [("clip",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun (b : bool)  ->
                       (`Bool b : Yojson.Safe.json))) v)) x.clip));
         ("filled",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (b : bool)  ->
                      (`Bool b : Yojson.Safe.json))) v)) x.filled));
         ("interpolate",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : Interpolate.t)  ->
                      (Interpolate.to_yojson x : Yojson.Safe.json)))
                    v)) x.interpolate));
         ("orient",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : Orient.t)  ->
                      (Orient.to_yojson x : Yojson.Safe.json))) v))
              x.orient));
         ("style",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : MarkDef_Style_Variant.t)  ->
                      (MarkDef_Style_Variant.to_yojson x : 
Yojson.Safe.json))) v)) x.style));
         ("tension",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json)))
                    v)) x.tension));
         ("type",
           (((fun (x : Mark.t)  ->
(Mark.to_yojson x : Yojson.Safe.json))) x.type_))])                 
  let make ?(tension= None)  ?(style= None)  ?(orient= None) 
    ?(interpolate= None)  ?(filled= None)  ?(clip= None)  type_ =
    { type_; clip; filled; interpolate; orient; style; tension } 
end and
MarkDef_Style_Variant:sig
  type t =
    [ `String_List of string list 
    | `String of string ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [ `String_List of string list  | `String of string ]

  let to_yojson =
    function
    | `String_List v ->
        ((fun (l : string list)  ->
            let yojson_of_el (s : string) =
              (`String s : Yojson.Safe.json)  in
            (`List (List.map yojson_of_el l) : Yojson.Safe.json)))
          v
    | `String v ->
        ((fun (s : string)  ->
(`String s : Yojson.Safe.json))) v                      
end and
Month:sig
  type t = int
  val to_yojson : t -> Yojson.Safe.json
end =
struct
  type t = int

  let to_yojson (i : int) = (`Int i : Yojson.Safe.json) 
end and
MultiSelection:sig
  type nonrec t =
    {
    type_: string ;
    toggle:
MultiSelection_Toggle_Variant.t
        option
      ;
    resolve:
SelectionResolution.t option ;
    on: VgEventStream.t option ;
    nearest: bool option ;
    fields: string list option ;
    encodings:
SingleDefChannel.t list
        option
      }
  val to_yojson :
    t -> Yojson.Safe.json
  val make :
    ?toggle:MultiSelection_Toggle_Variant.t
      option ->
      ?resolve:SelectionResolution.t
        option ->
        ?on:VgEventStream.t option
          ->
          ?nearest:bool option ->
            ?fields:string list
              option ->
              ?encodings:SingleDefChannel.t
                list option ->
                string -> t
end =
struct
  type nonrec t =
    {
    type_: string ;
    toggle: MultiSelection_Toggle_Variant.t option ;
    resolve: SelectionResolution.t option ;
    on: VgEventStream.t option ;
    nearest: bool option ;
    fields: string list option ;
    encodings: SingleDefChannel.t list option }

  (** Fields
  
    toggle:
      Controls whether data values should be toggled or only ever inserted into
      multi selections. Can be `true`, `false` (for insertion only), or a
      [Vega expression](https://vega.github.io/vega/docs/expressions/).
      
      __Default value:__ `true`, which corresponds to `event.shiftKey` (i.e.,
      data values are toggled when a user interacts with the shift-key pressed).
      
      See the [toggle transform](toggle.html) documentation for more information.
  
    resolve:
      With layered and multi-view displays, a strategy that determines how
      selections' data queries are resolved when applied in a filter transform,
      conditional encoding rule, or scale domain.
  
    on:
      A [Vega event stream](https://vega.github.io/vega/docs/event-streams/) (object or selector) that triggers the selection.
      For interval selections, the event stream must specify a [start and end](https://vega.github.io/vega/docs/event-streams/#between-filters).
  
    nearest:
      When true, an invisible voronoi diagram is computed to accelerate discrete
      selection. The data value _nearest_ the mouse cursor is added to the selection.
      
      See the [nearest transform](nearest.html) documentation for more information.
  
    fields:
      An array of field names whose values must match for a data tuple to
      fall within the selection.
  
    encodings:
      An array of encoding channels. The corresponding data field values
      must match for a data tuple to fall within the selection.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null -> false
            | _ -> true)
         [("encodings",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun
                       (l :
SingleDefChannel.t list)
                        ->
                       let yojson_of_el
                         (x : SingleDefChannel.t)
                         =
                         (SingleDefChannel.to_yojson
                            x : Yojson.Safe.json)
                          in
                       (`List
                          (List.map yojson_of_el l) : 
Yojson.Safe.json))) v))
               x.encodings));
         ("fields",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (l : string list)  ->
                      let yojson_of_el
                        (s : string) =
                        (`String s : Yojson.Safe.json)
                         in
                      (`List
                         (List.map yojson_of_el l) : 
Yojson.Safe.json))) v))
              x.fields));
         ("nearest",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (b : bool)  ->
                      (`Bool b : Yojson.Safe.json)))
                    v)) x.nearest));
         ("on",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : VgEventStream.t)  ->
                      (VgEventStream.to_yojson x : 
Yojson.Safe.json))) v)) x.on));
         ("resolve",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x : SelectionResolution.t) 
                      ->
                      (SelectionResolution.to_yojson
                         x : Yojson.Safe.json))) v))
              x.resolve));
         ("toggle",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
MultiSelection_Toggle_Variant.t)
                       ->
                      (MultiSelection_Toggle_Variant.to_yojson
                         x : Yojson.Safe.json))) v))
              x.toggle));
         ("type",
           (((fun (s : string)  ->
                (`String s : Yojson.Safe.json)))
x.type_))])                                
  let make ?(toggle= None)  ?(resolve= None) 
    ?(on= None)  ?(nearest= None)  ?(fields= None)
     ?(encodings= None)  type_ =
    {
      type_;
      encodings;
      fields;
      nearest;
      on;
      resolve;
      toggle
    } 
end and
MultiSelectionConfig:sig
  type nonrec t =
    {
    toggle:
MultiSelectionConfig_Toggle_Variant.t
        option
      ;
    resolve:
SelectionResolution.t
        option
      ;
    on:
VgEventStream.t
        option
      ;
    nearest: bool option ;
    fields:
      string list option ;
    encodings:
SingleDefChannel.t
        list option
      }
  val to_yojson :
    t ->
Yojson.Safe.json
  val make :
    ?toggle:MultiSelectionConfig_Toggle_Variant.t
      option ->
      ?resolve:SelectionResolution.t
        option ->
        ?on:VgEventStream.t
          option ->
          ?nearest:bool
            option ->
            ?fields:string
              list
              option ->
              ?encodings:SingleDefChannel.t
               list
               option ->
               unit -> t
end =
struct
  type nonrec t =
    {
    toggle:
MultiSelectionConfig_Toggle_Variant.t
        option
      ;
    resolve: SelectionResolution.t option ;
    on: VgEventStream.t option ;
    nearest: bool option ;
    fields: string list option ;
    encodings: SingleDefChannel.t list option }

  (** Fields
  
    toggle:
      Controls whether data values should be toggled or only ever inserted into
      multi selections. Can be `true`, `false` (for insertion only), or a
      [Vega expression](https://vega.github.io/vega/docs/expressions/).
      
      __Default value:__ `true`, which corresponds to `event.shiftKey` (i.e.,
      data values are toggled when a user interacts with the shift-key pressed).
      
      See the [toggle transform](toggle.html) documentation for more information.
  
    resolve:
      With layered and multi-view displays, a strategy that determines how
      selections' data queries are resolved when applied in a filter transform,
      conditional encoding rule, or scale domain.
  
    on:
      A [Vega event stream](https://vega.github.io/vega/docs/event-streams/) (object or selector) that triggers the selection.
      For interval selections, the event stream must specify a [start and end](https://vega.github.io/vega/docs/event-streams/#between-filters).
  
    nearest:
      When true, an invisible voronoi diagram is computed to accelerate discrete
      selection. The data value _nearest_ the mouse cursor is added to the selection.
      
      See the [nearest transform](nearest.html) documentation for more information.
  
    fields:
      An array of field names whose values must match for a data tuple to
      fall within the selection.
  
    encodings:
      An array of encoding channels. The corresponding data field values
      must match for a data tuple to fall within the selection.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null -> false
            | _ -> true)
         [("encodings",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun
                       (l :
SingleDefChannel.t
                           list)
                        ->
                       let yojson_of_el
                         (x :
SingleDefChannel.t)
                         =
                         (SingleDefChannel.to_yojson
                            x : Yojson.Safe.json)
                          in
                       (`List
                          (List.map
                             yojson_of_el l) : 
Yojson.Safe.json)))
                     v)) x.encodings));
         ("fields",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (l : string list)  ->
                      let yojson_of_el
                        (s : string) =
                        (`String s : 
Yojson.Safe.json)  in
                      (`List
                         (List.map
                            yojson_of_el l) : 
Yojson.Safe.json))) v))
              x.fields));
         ("nearest",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (b : bool)  ->
                      (`Bool b : Yojson.Safe.json)))
                    v)) x.nearest));
         ("on",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : VgEventStream.t)
                       ->
                      (VgEventStream.to_yojson
                         x : Yojson.Safe.json)))
                    v)) x.on));
         ("resolve",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
SelectionResolution.t)
                       ->
                      (SelectionResolution.to_yojson
                         x : Yojson.Safe.json)))
                    v)) x.resolve));
         ("toggle",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
MultiSelectionConfig_Toggle_Variant.t)
                       ->
                      (MultiSelectionConfig_Toggle_Variant.to_yojson
                         x : Yojson.Safe.json)))
v)) x.toggle))])                                     
  let make ?(toggle= None)  ?(resolve= None) 
    ?(on= None)  ?(nearest= None)  ?(fields=
None)  ?(encodings= None)  () =
    {
      encodings;
      fields;
      nearest;
      on;
      resolve;
      toggle
    } 
end and
MultiSelectionConfig_Toggle_Variant:
                                     sig
  type t =
    [ `String of string 
    | `Bool of bool ]
  val to_yojson : t -> Yojson.Safe.json
end =
struct
  type t =
    [ `String of string 
    | `Bool of bool ]

  let to_yojson =
    function
    | `String v ->
        ((fun (s : string)  ->
            (`String s : Yojson.Safe.json)))
          v
    | `Bool v ->
        ((fun (b : bool)  ->
            (`Bool b : Yojson.Safe.json)))
v                                          
end and
MultiSelection_Toggle_Variant:
                                          sig
  type t =
    [ `String of string 
    | `Bool of bool ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [ `String of string 
    | `Bool of bool ]

  let to_yojson =
    function
    | `String v ->
        ((fun (s : string)  ->
            (`String s : Yojson.Safe.json)))
          v
    | `Bool v ->
        ((fun (b : bool)  ->
            (`Bool b : Yojson.Safe.json)))
v                                               
end and
MultiTimeUnit:sig
  type t =
    [
      `UtcMultiTimeUnit
       of
UtcMultiTimeUnit.t
        | 
      `LocalMultiTimeUnit
       of
LocalMultiTimeUnit.t
       ]
  val to_yojson
    :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [
      `UtcMultiTimeUnit of
UtcMultiTimeUnit.t 
    | `LocalMultiTimeUnit of
LocalMultiTimeUnit.t ]

  let to_yojson =
    function
    | `UtcMultiTimeUnit v ->
        ((fun
            (x :
UtcMultiTimeUnit.t)
             ->
            (UtcMultiTimeUnit.to_yojson
               x : Yojson.Safe.json)))
          v
    | `LocalMultiTimeUnit v ->
        ((fun
            (x :
LocalMultiTimeUnit.t)
             ->
            (LocalMultiTimeUnit.to_yojson
               x : Yojson.Safe.json)))
v                                                    
end and
NamedData:sig
  type nonrec t =
    {
    name:
      string ;
    format:
DataFormat.t
      option }
  val to_yojson
    :
    t ->
Yojson.Safe.json
  val make :
    ?format:DataFormat.t
      option ->
      string ->
      t
end =
struct
  type nonrec t =
    {
    name: string ;
    format:
DataFormat.t option }

  (** Fields
  
    name:
      Provide a placeholder name and bind data at runtime.
  
    format:
      An object that specifies the format for parsing the data.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null ->
                false
            | _ -> true)
         [("format",
            (((function
               | 
None  ->
                `Null
               | 
Some v ->
                ((fun
                (x :
DataFormat.t)
                 ->
                (DataFormat.to_yojson
                x : Yojson.Safe.json)))
                v))
               x.format));
         ("name",
           (((fun
                (s :
                string) 
                ->
                (
                `String s : 
Yojson.Safe.json)))
x.name))])                                                         
  let make ?(format=
None)  name =
    { name; format } 
end and
NiceTime:sig
  type t =
  [ `Year 
  | `Month 
  | `Week 
  | `Day 
  | `Hour 
  | `Minute 
  | `Second ]
  val
  to_yojson
  :
  t ->
Yojson.Safe.json
end =
struct
  type t =
    [ `Year 
    | `Month 
    | `Week  | 
      `Day 
    | `Hour 
    | `Minute 
    | `Second ]

  let to_yojson =
    function
    | `Year ->
        `String
          "year"
    | `Month ->
        `String
          "month"
    | `Week ->
        `String
          "week"
    | `Day ->
        `String
          "day"
    | `Hour ->
        `String
          "hour"
    | `Minute ->
        `String
          "minute"
    | `Second ->
        `String
"second"                                                              
end and
NotFilter:
                                                              sig
  type nonrec t =
    {
    not:
FilterOperand.t
      }
  val to_yojson
    :
    t ->
Yojson.Safe.json
  val make :
FilterOperand.t
      -> 
      t
end =
struct
  type nonrec t =
    {
    not:
FilterOperand.t
      }

  let to_yojson
    x =
    `Assoc
      (
List.filter
      (fun
      (k,v)  ->
      match v
      with
      | 
      `Null ->
      false
      | 
      _ -> true)
      [
      ("not",
      (((fun
      (x :
FilterOperand.t)
       ->
      (FilterOperand.to_yojson
      x : Yojson.Safe.json)))
x.not))])                                                                   
  let make not
    = { not } 
end and
OneOfFilter:
                                                                   sig
 type nonrec t =
 {
 timeUnit:
TimeUnit.t
 option ;
 oneOf:
OneOfFilter_OneOf_Variant.t
 ;
 field:
 string }
 val
 to_yojson
 :
 t ->
Yojson.Safe.json
 val make
 :
 ?timeUnit:TimeUnit.t
 option ->
OneOfFilter_OneOf_Variant.t
 ->
 string ->
 t
end =
struct
 type nonrec t =
 {
 timeUnit:
TimeUnit.t
 option ;
 oneOf:
OneOfFilter_OneOf_Variant.t
 ;
 field:
 string }

  (** Fields
  
    timeUnit:
      time unit for the field to be filtered.
  
    oneOf:
      A set of values that the `field`'s value should be a member of,
      for a data item included in the filtered data.
  
    field:
      Field to be filtered
  *)
 let to_yojson
 x =
 `Assoc
 (List.filter
 (fun
 (k,v)  ->
 match v
 with
 | 
 `Null ->
 false
 | 
 _ -> true)
 [
 ("field",
 (((fun
 (s :
 string) 
 ->
 (`String
 s : Yojson.Safe.json)))
 x.field));
 ("oneOf",
 (((fun
 (x :
OneOfFilter_OneOf_Variant.t)
  ->
 (OneOfFilter_OneOf_Variant.to_yojson
 x : Yojson.Safe.json)))
 x.oneOf));
 ("timeUnit",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
TimeUnit.t)
  ->
 (TimeUnit.to_yojson
 x : Yojson.Safe.json)))
 v))
x.timeUnit))])                                                                     
 let make
 ?(timeUnit=
None) 
 oneOf
 field =
 {
 field;
 oneOf;
 timeUnit
 } 
end
and
OneOfFilter_OneOf_Variant:sig
  type t =
    [ `DateTime_List of DateTime.t list 
    | `Boolean_List of bool list 
    | `Number_List of int list 
    | `String_List of string list ]
  val to_yojson : t -> Yojson.Safe.json
end =
struct
  type t =
    [ `DateTime_List of DateTime.t list  | `Boolean_List of bool list 
    | `Number_List of int list  | `String_List of string list ]

  let to_yojson =
    function
    | `DateTime_List v ->
        ((fun (l : DateTime.t list)  ->
            let yojson_of_el (x : DateTime.t) =
              (DateTime.to_yojson x : Yojson.Safe.json)  in
            (`List (List.map yojson_of_el l) : Yojson.Safe.json))) v
    | `Boolean_List v ->
        ((fun (l : bool list)  ->
            let yojson_of_el (b : bool) = (`Bool b : Yojson.Safe.json)  in
            (`List (List.map yojson_of_el l) : Yojson.Safe.json))) v
    | `Number_List v ->
        ((fun (l : int list)  ->
            let yojson_of_el (i : int) = (`Int i : Yojson.Safe.json)  in
            (`List (List.map yojson_of_el l) : Yojson.Safe.json))) v
    | `String_List v ->
        ((fun (l : string list)  ->
            let yojson_of_el (s : string) = (`String s : Yojson.Safe.json)
               in
(`List (List.map yojson_of_el l) : Yojson.Safe.json))) v       
end and
OrFilter:sig
  type nonrec t = {
    or_: FilterOperand.t list }
  val to_yojson : t -> Yojson.Safe.json
  val make : FilterOperand.t list -> t
end =
struct
  type nonrec t = {
    or_: FilterOperand.t list }

  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  -> match v with | `Null -> false | _ -> true)
         [("or",
            (((fun (l : FilterOperand.t list)  ->
                 let yojson_of_el (x : FilterOperand.t) =
                   (FilterOperand.to_yojson x : Yojson.Safe.json)  in
                 (`List (List.map yojson_of_el l) : Yojson.Safe.json)))
x.or_))])            
  let make or_ = { or_ } 
end and
OrderFieldDef:sig
  type nonrec t =
    {
    type_: Type.t ;
    timeUnit: TimeUnit.t option ;
    sort: SortOrder.t option ;
    field: Field.t option ;
    bin: OrderFieldDef_Bin_Variant.t option ;
    aggregate: Aggregate.t option }
  val to_yojson : t -> Yojson.Safe.json
  val make :
    ?timeUnit:TimeUnit.t option ->
      ?sort:SortOrder.t option ->
        ?field:Field.t option ->
          ?bin:OrderFieldDef_Bin_Variant.t option
            ->
            ?aggregate:Aggregate.t option ->
Type.t -> t
end =
struct
  type nonrec t =
    {
    type_: Type.t ;
    timeUnit: TimeUnit.t option ;
    sort: SortOrder.t option ;
    field: Field.t option ;
    bin: OrderFieldDef_Bin_Variant.t option ;
    aggregate: Aggregate.t option }

  (** Fields
  
    type:
      The encoded field's type of measurement. This can be either a full type
      name (`"quantitative"`, `"temporal"`, `"ordinal"`,  and `"nominal"`).
  
    timeUnit:
      Time unit for a `temporal` field  (e.g., `year`, `yearmonth`, `month`, `hour`).
      
      __Default value:__ `undefined` (None)
  
    sort:
      The sort order. One of `"ascending"` (default) or `"descending"`.
  
    field:
      __Required.__ A string defining the name of the field from which to pull a data value
      or an object defining iterated values from the [`repeat`](repeat.html) operator.
      
      __Note:__ `field` is not required if `aggregate` is `count`.
  
    bin:
      A flag for binning a `quantitative` field, or [an object defining binning parameters](bin.html#params).
      If `true`, default [binning parameters](bin.html) will be applied.
      
      __Default value:__ `false`
  
    aggregate:
      Aggregation function for the field
      (e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).
      
      __Default value:__ `undefined` (None)
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  -> match v with | `Null -> false | _ -> true)
         [("aggregate",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun (x : Aggregate.t)  ->
                       (Aggregate.to_yojson x : Yojson.Safe.json)))
                     v)) x.aggregate));
         ("bin",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : OrderFieldDef_Bin_Variant.t)  ->
                      (OrderFieldDef_Bin_Variant.to_yojson x : 
Yojson.Safe.json))) v)) x.bin));
         ("field",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : Field.t)  ->
                      (Field.to_yojson x : Yojson.Safe.json))) v))
              x.field));
         ("sort",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : SortOrder.t)  ->
                      (SortOrder.to_yojson x : Yojson.Safe.json)))
                    v)) x.sort));
         ("timeUnit",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : TimeUnit.t)  ->
                      (TimeUnit.to_yojson x : Yojson.Safe.json)))
                    v)) x.timeUnit));
         ("type",
           (((fun (x : Type.t)  ->
(Type.to_yojson x : Yojson.Safe.json))) x.type_))])                 
  let make ?(timeUnit= None)  ?(sort= None)  ?(field= None) 
    ?(bin= None)  ?(aggregate= None)  type_ =
    { type_; aggregate; bin; field; sort; timeUnit } 
end and
OrderFieldDef_Bin_Variant:sig
  type t =
    [ `BinParams of BinParams.t 
    | `Boolean of bool ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t = [ `BinParams of BinParams.t  | `Boolean of bool ]

  let to_yojson =
    function
    | `BinParams v ->
        ((fun (x : BinParams.t)  ->
            (BinParams.to_yojson x : Yojson.Safe.json))) v
    | `Boolean v ->
        ((fun (b : bool)  -> (`Bool b : Yojson.Safe.json)))
v                      
end and
Orient:sig
  type t = [ `Vertical  | `Horizontal ]
  val to_yojson : t -> Yojson.Safe.json
end =
struct
  type t = [ `Vertical  | `Horizontal ]

  let to_yojson =
    function
    | `Vertical -> `String "vertical"
    | `Horizontal -> `String "horizontal" 
end and
Padding:sig
  type t =
    [ `Padding_Record of Padding_Record.t 
    | `Number of int ]
  val to_yojson : t -> Yojson.Safe.json
end =
struct
  type t =
    [ `Padding_Record of Padding_Record.t 
    | `Number of int ]

  let to_yojson =
    function
    | `Padding_Record v ->
        ((fun (x : Padding_Record.t)  ->
            (Padding_Record.to_yojson x : 
Yojson.Safe.json))) v
    | `Number v ->
        ((fun (i : int)  ->
(`Int i : Yojson.Safe.json))) v                                
end and
Padding_Record:sig
  type nonrec t =
    {
    top: int option ;
    right: int option ;
    left: int option ;
    bottom: int option }
  val to_yojson :
    t -> Yojson.Safe.json
  val make :
    ?top:int option ->
      ?right:int option ->
        ?left:int option ->
          ?bottom:int option
            -> unit -> t
end =
struct
  type nonrec t =
    {
    top: int option ;
    right: int option ;
    left: int option ;
    bottom: int option }

  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null -> false
            | _ -> true)
         [("bottom",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun (i : int)  ->
                       (`Int i : Yojson.Safe.json)))
                     v)) x.bottom));
         ("left",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.left));
         ("right",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.right));
         ("top",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
v)) x.top))])                                     
  let make ?(top= None)  ?(right= None) 
    ?(left= None)  ?(bottom= None)  () =
    { bottom; left; right; top } 
end and
PositionFieldDef:sig
  type nonrec t =
    {
    type_: Type.t ;
    timeUnit:
TimeUnit.t option ;
    stack:
StackOffset.t
        option
      ;
    sort:
PositionFieldDef_Sort_Variant_1.t
        option
      ;
    scale:
Scale.t option ;
    field:
Field.t option ;
    bin:
PositionFieldDef_Bin_Variant.t
        option
      ;
    axis:
PositionFieldDef_Axis_Variant.t
        option
      ;
    aggregate:
Aggregate.t
        option
      }
  val to_yojson :
    t ->
Yojson.Safe.json
  val make :
    ?timeUnit:TimeUnit.t
      option ->
      ?stack:StackOffset.t
        option ->
        ?sort:PositionFieldDef_Sort_Variant_1.t
          option ->
          ?scale:Scale.t
            option ->
            ?field:Field.t
              option ->
              ?bin:PositionFieldDef_Bin_Variant.t
              option ->
              ?axis:PositionFieldDef_Axis_Variant.t
              option ->
              ?aggregate:Aggregate.t
              option ->
Type.t ->
              t
end =
struct
  type nonrec t =
    {
    type_: Type.t ;
    timeUnit: TimeUnit.t option ;
    stack: StackOffset.t option ;
    sort:
PositionFieldDef_Sort_Variant_1.t
        option
      ;
    scale: Scale.t option ;
    field: Field.t option ;
    bin:
PositionFieldDef_Bin_Variant.t
        option
      ;
    axis:
PositionFieldDef_Axis_Variant.t
        option
      ;
    aggregate: Aggregate.t option }

  (** Fields
  
    type:
      The encoded field's type of measurement. This can be either a full type
      name (`"quantitative"`, `"temporal"`, `"ordinal"`,  and `"nominal"`).
  
    timeUnit:
      Time unit for a `temporal` field  (e.g., `year`, `yearmonth`, `month`, `hour`).
      
      __Default value:__ `undefined` (None)
  
    stack:
      Type of stacking offset if the field should be stacked.
      `stack` is only applicable for `x` and `y` channels with continuous domains.
      For example, `stack` of `y` can be used to customize stacking for a vertical bar chart.
      
      `stack` can be one of the following values:
      - `"zero"`: stacking with baseline offset at zero value of the scale (for creating typical stacked [bar](stack.html#bar) and [area](stack.html#area) chart).
      - `"normalize"` - stacking with normalized domain (for creating [normalized stacked bar and area charts](stack.html#normalized). <br/>
      -`"center"` - stacking with center baseline (for [streamgraph](stack.html#streamgraph)).
      - `"none"` - No-stacking. This will produce layered [bar](stack.html#layered-bar-chart) and area chart.
      
      __Default value:__ `zero` for plots with all of the following conditions are true: (1) `bar` or `area` marks (2) At least one of `color`, `opacity`, `size`, or `detail` channel mapped to a group-by field (3) one position channel has a linear scale and summative aggregation function (e.g., `sum`, `count`) and (4) the other position channel either has discrete domain or unmapped.  Otherwise `"none"` by default.
  
    sort:
      Sort order for the encoded field.
      Supported `sort` values include `"ascending"`, `"descending"` and `null` (no sorting).
      For fields with discrete domains, `sort` can also be a [sort field definition object](sort.html#sort-field).
      
      __Default value:__ `"ascending"`
  
    scale:
      An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.
      
      __Default value:__ If undefined, default [scale properties](scale.html) are applied.
  
    field:
      __Required.__ A string defining the name of the field from which to pull a data value
      or an object defining iterated values from the [`repeat`](repeat.html) operator.
      
      __Note:__ `field` is not required if `aggregate` is `count`.
  
    bin:
      A flag for binning a `quantitative` field, or [an object defining binning parameters](bin.html#params).
      If `true`, default [binning parameters](bin.html) will be applied.
      
      __Default value:__ `false`
  
    axis:
      An object defining properties of axis's gridlines, ticks and labels.
      If `null`, the axis for the encoding channel will be removed.
      
      __Default value:__ If undefined, default [axis properties](axis.html) are applied.
  
    aggregate:
      Aggregation function for the field
      (e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).
      
      __Default value:__ `undefined` (None)
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null -> false
            | _ -> true)
         [("aggregate",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun
                       (x : Aggregate.t)
                        ->
                       (Aggregate.to_yojson
                          x : Yojson.Safe.json)))
                     v)) x.aggregate));
         ("axis",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
PositionFieldDef_Axis_Variant.t)
                       ->
                      (PositionFieldDef_Axis_Variant.to_yojson
                         x : Yojson.Safe.json)))
                    v)) x.axis));
         ("bin",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
PositionFieldDef_Bin_Variant.t)
                       ->
                      (PositionFieldDef_Bin_Variant.to_yojson
                         x : Yojson.Safe.json)))
                    v)) x.bin));
         ("field",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : Field.t) 
                      ->
                      (Field.to_yojson x : 
Yojson.Safe.json)))
                    v)) x.field));
         ("scale",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : Scale.t) 
                      ->
                      (Scale.to_yojson x : 
Yojson.Safe.json)))
                    v)) x.scale));
         ("sort",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
PositionFieldDef_Sort_Variant_1.t)
                       ->
                      (PositionFieldDef_Sort_Variant_1.to_yojson
                         x : Yojson.Safe.json)))
                    v)) x.sort));
         ("stack",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
StackOffset.t)
                       ->
                      (StackOffset.to_yojson
                         x : Yojson.Safe.json)))
                    v)) x.stack));
         ("timeUnit",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : TimeUnit.t)
                       ->
                      (TimeUnit.to_yojson
                         x : Yojson.Safe.json)))
                    v)) x.timeUnit));
         ("type",
           (((fun (x : Type.t)  ->
                (Type.to_yojson x : 
Yojson.Safe.json)))
x.type_))])                                          
  let make ?(timeUnit= None)  ?(stack=
None)  ?(sort= None)  ?(scale= None)
     ?(field= None)  ?(bin= None) 
    ?(axis= None)  ?(aggregate= None) 
    type_ =
    {
      type_;
      aggregate;
      axis;
      bin;
      field;
      scale;
      sort;
      stack;
      timeUnit
    } 
end and
PositionFieldDef_Axis_Variant:
                                          sig
  type t =
    [ `Axis of Axis.t ] option
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [ `Axis of Axis.t ] option

  let to_yojson =
    function
    | None -> `Null
    | Some (`Axis v) ->
        ((fun (x : Axis.t)  ->
            (Axis.to_yojson x : 
Yojson.Safe.json))) v                                               
end and
PositionFieldDef_Bin_Variant:
                                               sig
  type t =
    [
      `BinParams of
BinParams.t 
    | `Boolean of bool ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [
      `BinParams of
BinParams.t 
    | `Boolean of bool ]

  let to_yojson =
    function
    | `BinParams v ->
        ((fun
            (x : BinParams.t) 
            ->
            (BinParams.to_yojson
               x : Yojson.Safe.json)))
          v
    | `Boolean v ->
        ((fun (b : bool)  ->
            (`Bool b : 
Yojson.Safe.json)))
v                                                    
end and
PositionFieldDef_Sort_Variant:
                                                    sig
  type t =
    [
      `SortField of
SortField.t 
    | `SortOrder of
SortOrder.t ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [
      `SortField of
SortField.t 
    | `SortOrder of
SortOrder.t ]

  let to_yojson =
    function
    | `SortField v ->
        ((fun
            (x :
SortField.t)
             ->
            (SortField.to_yojson
               x : 
Yojson.Safe.json)))
          v
    | `SortOrder v ->
        ((fun
            (x :
SortOrder.t)
             ->
            (SortOrder.to_yojson
               x : 
Yojson.Safe.json)))
v                                                         
end and
PositionFieldDef_Sort_Variant_1:
                                                         sig
  type t =
    [
      `PositionFieldDef_Sort_Variant
        of
PositionFieldDef_Sort_Variant.t
        ]
      option
  val to_yojson :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [
      `PositionFieldDef_Sort_Variant
        of
PositionFieldDef_Sort_Variant.t
        ]
      option

  let to_yojson =
    function
    | None -> `Null
    | Some
        (`PositionFieldDef_Sort_Variant
           v)
        ->
        ((fun
           (x :
PositionFieldDef_Sort_Variant.t)
            ->
           (PositionFieldDef_Sort_Variant.to_yojson
           x : 
Yojson.Safe.json)))
v                                                              
end and
RangeConfig:
                                                              sig
  type nonrec t =
    {
    symbol:
      string
      list
      option ;
    ramp:
RangeConfig_Ramp_Variant.t
      option ;
    ordinal:
RangeConfig_Ordinal_Variant.t
      option ;
    heatmap:
RangeConfig_Heatmap_Variant.t
      option ;
    diverging:
RangeConfig_Diverging_Variant.t
      option ;
    category:
RangeConfig_Category_Variant.t
      option ;
    rangeConfigValue:
RangeConfigValue.t
      option }
  val to_yojson
    :
    t ->
Yojson.Safe.json
  val make :
    ?symbol:string
      list
      option ->
      ?rangeConfigValue:RangeConfigValue.t
      option ->
      ?ramp:RangeConfig_Ramp_Variant.t
      option ->
      ?ordinal:RangeConfig_Ordinal_Variant.t
      option ->
      ?heatmap:RangeConfig_Heatmap_Variant.t
      option ->
      ?diverging:RangeConfig_Diverging_Variant.t
      option ->
      ?category:RangeConfig_Category_Variant.t
      option ->
      unit -> t
end =
struct
  type nonrec t =
    {
    symbol:
      string
      list
      option ;
    ramp:
RangeConfig_Ramp_Variant.t
      option ;
    ordinal:
RangeConfig_Ordinal_Variant.t
      option ;
    heatmap:
RangeConfig_Heatmap_Variant.t
      option ;
    diverging:
RangeConfig_Diverging_Variant.t
      option ;
    category:
RangeConfig_Category_Variant.t
      option ;
    rangeConfigValue:
RangeConfigValue.t
      option }

  (** Fields
  
    symbol:
      Default range palette for the `shape` channel.
  
    ramp:
      Default range for _quantitative_ and _temporal_ fields.
  
    ordinal:
      Default range for _ordinal_ fields.
  
    heatmap:
      Default range for _quantitative_ heatmaps.
  
    diverging:
      Default range for diverging _quantitative_ fields.
  
    category:
      Default range for _nominal_ (categorical) fields.
  *)
  let to_yojson
    x =
    `Assoc
      (
List.filter
      (fun
      (k,v)  ->
      match v
      with
      | 
      `Null ->
      false
      | 
      _ -> true)
      [
      ("rangeConfigValue",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (x :
RangeConfigValue.t)
       ->
      (RangeConfigValue.to_yojson
      x : Yojson.Safe.json)))
      v))
      x.rangeConfigValue));
      ("category",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (x :
RangeConfig_Category_Variant.t)
       ->
      (RangeConfig_Category_Variant.to_yojson
      x : Yojson.Safe.json)))
      v))
      x.category));
      ("diverging",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (x :
RangeConfig_Diverging_Variant.t)
       ->
      (RangeConfig_Diverging_Variant.to_yojson
      x : Yojson.Safe.json)))
      v))
      x.diverging));
      ("heatmap",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (x :
RangeConfig_Heatmap_Variant.t)
       ->
      (RangeConfig_Heatmap_Variant.to_yojson
      x : Yojson.Safe.json)))
      v))
      x.heatmap));
      ("ordinal",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (x :
RangeConfig_Ordinal_Variant.t)
       ->
      (RangeConfig_Ordinal_Variant.to_yojson
      x : Yojson.Safe.json)))
      v))
      x.ordinal));
      ("ramp",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (x :
RangeConfig_Ramp_Variant.t)
       ->
      (RangeConfig_Ramp_Variant.to_yojson
      x : Yojson.Safe.json)))
      v))
      x.ramp));
      ("symbol",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (l :
      string
      list)  ->
      let yojson_of_el
      (s :
      string) =
      (`String
      s : 
Yojson.Safe.json)
       in
      (`List
      (List.map
      yojson_of_el
      l) : 
Yojson.Safe.json)))
      v))
x.symbol))])                                                                   
  let make
    ?(symbol=
None) 
    ?(rangeConfigValue=
None) 
    ?(ramp=
None) 
    ?(ordinal=
None) 
    ?(heatmap=
None) 
    ?(diverging=
None) 
    ?(category=
None)  () =
    {
      category;
      diverging;
      heatmap;
      ordinal;
      ramp;
      rangeConfigValue;
      symbol
    } 
end and
RangeConfigValue:
                                                                   sig
 type t =
 [
 `RangeConfigValue_Record
 of
RangeConfigValue_Record.t
  | 
 `VgScheme
 of
VgScheme.t
  | 
 `RangeConfigValue_Variant_List
 of
RangeConfigValue_Variant.t
 list ]
 val
 to_yojson
 :
 t ->
Yojson.Safe.json
end =
struct
 type t =
 [
 `RangeConfigValue_Record
 of
RangeConfigValue_Record.t
  | 
 `VgScheme
 of
VgScheme.t
  | 
 `RangeConfigValue_Variant_List
 of
RangeConfigValue_Variant.t
 list ]

 let to_yojson
 =
 function
 | 
 `RangeConfigValue_Record
 v ->
 ((fun
 (x :
RangeConfigValue_Record.t)
  ->
 (RangeConfigValue_Record.to_yojson
 x : Yojson.Safe.json)))
 v
 | 
 `VgScheme
 v ->
 ((fun
 (x :
VgScheme.t)
  ->
 (VgScheme.to_yojson
 x : Yojson.Safe.json)))
 v
 | 
 `RangeConfigValue_Variant_List
 v ->
 ((fun
 (l :
RangeConfigValue_Variant.t
 list)  ->
 let yojson_of_el
 (x :
RangeConfigValue_Variant.t)
 =
 (RangeConfigValue_Variant.to_yojson
 x : 
Yojson.Safe.json)
  in
 (`List
 (List.map
 yojson_of_el
 l) : 
Yojson.Safe.json)))
 v 
end
and
RangeConfigValue_Record:sig
  type nonrec t = {
    step: int }
  val to_yojson : t -> Yojson.Safe.json
  val make : int -> t
end =
struct
  type nonrec t = {
    step: int }

  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  -> match v with | `Null -> false | _ -> true)
         [("step",
(((fun (i : int)  -> (`Int i : Yojson.Safe.json))) x.step))])       
  let make step = { step } 
end and
RangeConfigValue_Variant:sig
  type t =
    [ `Num of int  | `String of string ]
  val to_yojson : t -> Yojson.Safe.json
end =
struct
  type t = [ `Num of int  | `String of string ]

  let to_yojson =
    function
    | `Num v -> ((fun (i : int)  -> (`Int i : Yojson.Safe.json))) v
    | `String v ->
((fun (s : string)  -> (`String s : Yojson.Safe.json))) v            
end and
RangeConfig_Category_Variant:sig
  type t =
    [ `VgScheme of VgScheme.t 
    | `String_List of string list ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [ `VgScheme of VgScheme.t  | `String_List of string list ]

  let to_yojson =
    function
    | `VgScheme v ->
        ((fun (x : VgScheme.t)  ->
            (VgScheme.to_yojson x : Yojson.Safe.json))) v
    | `String_List v ->
        ((fun (l : string list)  ->
            let yojson_of_el (s : string) =
              (`String s : Yojson.Safe.json)  in
            (`List (List.map yojson_of_el l) : Yojson.Safe.json)))
v                 
end and
RangeConfig_Diverging_Variant:sig
  type t =
    [ `VgScheme of VgScheme.t 
    | `String_List of
        string list ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [ `VgScheme of VgScheme.t 
    | `String_List of string list ]

  let to_yojson =
    function
    | `VgScheme v ->
        ((fun (x : VgScheme.t)  ->
            (VgScheme.to_yojson x : Yojson.Safe.json))) v
    | `String_List v ->
        ((fun (l : string list)  ->
            let yojson_of_el (s : string) =
              (`String s : Yojson.Safe.json)  in
            (`List (List.map yojson_of_el l) : Yojson.Safe.json)))
v                      
end and
RangeConfig_Heatmap_Variant:sig
  type t =
    [
      `VgScheme of
VgScheme.t 
    | `String_List of
        string list ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [ `VgScheme of VgScheme.t 
    | `String_List of string list ]

  let to_yojson =
    function
    | `VgScheme v ->
        ((fun (x : VgScheme.t)  ->
            (VgScheme.to_yojson x : Yojson.Safe.json)))
          v
    | `String_List v ->
        ((fun (l : string list)  ->
            let yojson_of_el (s : string) =
              (`String s : Yojson.Safe.json)  in
            (`List (List.map yojson_of_el l) : 
Yojson.Safe.json))) v                           
end and
RangeConfig_Ordinal_Variant:sig
  type t =
    [
      `VgScheme of
VgScheme.t 
    | `String_List of
        string list ]
  val to_yojson :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [ `VgScheme of VgScheme.t 
    | `String_List of string list ]

  let to_yojson =
    function
    | `VgScheme v ->
        ((fun (x : VgScheme.t)  ->
            (VgScheme.to_yojson x : Yojson.Safe.json)))
          v
    | `String_List v ->
        ((fun (l : string list)  ->
            let yojson_of_el (s : string) =
              (`String s : Yojson.Safe.json)  in
            (`List (List.map yojson_of_el l) : 
Yojson.Safe.json))) v                                
end and
RangeConfig_Ramp_Variant:sig
  type t =
    [
      `VgScheme of
VgScheme.t 
    | `String_List
        of
        string list ]
  val to_yojson :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [ `VgScheme of VgScheme.t 
    | `String_List of string list ]

  let to_yojson =
    function
    | `VgScheme v ->
        ((fun (x : VgScheme.t)  ->
            (VgScheme.to_yojson x : Yojson.Safe.json)))
          v
    | `String_List v ->
        ((fun (l : string list)  ->
            let yojson_of_el (s : string) =
              (`String s : Yojson.Safe.json)
               in
            (`List (List.map yojson_of_el l) : 
Yojson.Safe.json))) v                                     
end and
RangeFilter:sig
  type nonrec t =
    {
    timeUnit:
TimeUnit.t option ;
    range:
RangeFilter_Range_Variant.t
        list
      ;
    field: string }
  val to_yojson :
    t -> Yojson.Safe.json
  val make :
    ?timeUnit:TimeUnit.t
      option ->
RangeFilter_Range_Variant.t
        list -> string -> t
end =
struct
  type nonrec t =
    {
    timeUnit: TimeUnit.t option ;
    range:
RangeFilter_Range_Variant.t list ;
    field: string }

  (** Fields
  
    timeUnit:
      time unit for the field to be filtered.
  
    range:
      An array of inclusive minimum and maximum values
      for a field value of a data item to be included in the filtered data.
  
    field:
      Field to be filtered
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null -> false
            | _ -> true)
         [("field",
            (((fun (s : string)  ->
                 (`String s : Yojson.Safe.json)))
               x.field));
         ("range",
           (((fun
                (l :
RangeFilter_Range_Variant.t
                    list)
                 ->
                let yojson_of_el
                  (x :
RangeFilter_Range_Variant.t)
                  =
                  (RangeFilter_Range_Variant.to_yojson
                     x : Yojson.Safe.json)
                   in
                (`List
                   (List.map
                      yojson_of_el l) : 
Yojson.Safe.json)))
              x.range));
         ("timeUnit",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : TimeUnit.t)
                       ->
                      (TimeUnit.to_yojson
                         x : Yojson.Safe.json)))
v)) x.timeUnit))])                                          
  let make ?(timeUnit= None)  range
    field = { field; range; timeUnit } 
end and
RangeFilter_Range_Variant:sig
                                                                    type t =
                                                                    [
                                                                    `DateTime
                                                                    of
DateTime.t
 | 
                                                                    `Number
                                                                    of 
                                                                    int ]
                                                                    val
                                                                    to_yojson
                                                                    :
                                                                    t ->
Yojson.Safe.json
end =
struct
  type t =
    [ `DateTime of DateTime.t 
    | `Number of int ]

  let to_yojson =
    function
    | `DateTime v ->
        ((fun (x : DateTime.t)  ->
            (DateTime.to_yojson x : 
Yojson.Safe.json))) v
    | `Number v ->
        ((fun (i : int)  ->
            (`Int i : Yojson.Safe.json)))
v                                               
end and
Repeat:sig
  type nonrec t =
    {
    row:
      string list
        option
      ;
    column:
      string list
        option
      }
  val to_yojson :
    t ->
Yojson.Safe.json
  val make :
    ?row:string list
      option ->
      ?column:string
        list option ->
        unit -> t
end =
struct
  type nonrec t =
    {
    row: string list option ;
    column: string list option }

  (** Fields
  
    row:
      Vertical repeated views.
  
    column:
      Horizontal repeated views.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null -> false
            | _ -> true)
         [("column",
            (((function
               | None  ->
                   `Null
               | Some v ->
                   ((fun
                     (l :
                     string
                     list)  ->
                     let yojson_of_el
                     (s :
                     string) =
                     (`String
                     s : 
Yojson.Safe.json)
                      in
                     (`List
                     (List.map
                     yojson_of_el
                     l) : 
Yojson.Safe.json)))
                     v))
               x.column));
         ("row",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                     (l :
                     string
                     list)  ->
                     let yojson_of_el
                     (s :
                     string) =
                     (`String
                     s : 
Yojson.Safe.json)
                      in
                     (`List
                     (List.map
                     yojson_of_el
                     l) : 
Yojson.Safe.json)))
v)) x.row))])                                                    
  let make ?(row= None) 
    ?(column= None)  () =
    { column; row } 
end and
RepeatRef:sig
  type nonrec t =
    {
    repeat:
      string }
  val to_yojson
    :
    t ->
Yojson.Safe.json
  val make :
    string -> t
end =
struct
  type nonrec t =
    {
    repeat: string }

  (** Reference to a repeated value.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null ->
                false
            | _ -> true)
         [("repeat",
            (((fun
                (s :
                string) 
                ->
                (`String
                s : 
Yojson.Safe.json)))
x.repeat))])                                                         
  let make repeat =
    { repeat } 
end and
RepeatSpec:sig
                                                                    type nonrec t =
                                                                    {
                                                                    transform:
Transform.t
                                                                    list
                                                                    option ;
                                                                    title:
RepeatSpec_Title_Variant.t
                                                                    option ;
                                                                    spec:
Spec.t ;
                                                                    resolve:
Resolve.t
                                                                    option ;
                                                                    repeat:
Repeat.t ;
                                                                    name:
                                                                    string
                                                                    option ;
                                                                    description:
                                                                    string
                                                                    option ;
                                                                    data:
Data.t
                                                                    option }
                                                                    val
                                                                    to_yojson
                                                                    :
                                                                    t ->
Yojson.Safe.json
                                                                    val make
                                                                    :
                                                                    ?transform:Transform.t
                                                                    list
                                                                    option ->
                                                                    ?title:RepeatSpec_Title_Variant.t
                                                                    option ->
                                                                    ?resolve:Resolve.t
                                                                    option ->
                                                                    ?name:string
                                                                    option ->
                                                                    ?description:string
                                                                    option ->
                                                                    ?data:Data.t
                                                                    option ->
Spec.t ->
Repeat.t
                                                                    -> 
                                                                    t
end =
struct
  type nonrec t =
    {
    transform:
Transform.t
        list option
      ;
    title:
RepeatSpec_Title_Variant.t
        option
      ;
    spec: Spec.t ;
    resolve:
Resolve.t
        option
      ;
    repeat: Repeat.t ;
    name:
      string option ;
    description:
      string option ;
    data:
Data.t option }

  (** Fields
  
    transform:
      An array of data transformations such as filter and new field calculation.
  
    title:
      Title for the plot.
  
    name:
      Name of the visualization for later reference.
  
    description:
      An optional description of this mark for commenting purpose.
  
    data:
      An object describing the data source
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun 
           (k,v)  ->
           match v
           with
           | 
           `Null ->
           false
           | 
           _ -> true)
         [("data",
           (((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (x :
Data.t) 
           ->
           (Data.to_yojson
           x : Yojson.Safe.json)))
           v))
           x.data));
         ("description",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (s :
           string) 
           ->
           (`String
           s : Yojson.Safe.json)))
           v))
           x.description));
         ("name",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (s :
           string) 
           ->
           (`String
           s : Yojson.Safe.json)))
           v))
           x.name));
         ("repeat",
           (
           ((fun
           (x :
Repeat.t)
            ->
           (Repeat.to_yojson
           x : Yojson.Safe.json)))
           x.repeat));
         ("resolve",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (x :
Resolve.t)
            ->
           (Resolve.to_yojson
           x : Yojson.Safe.json)))
           v))
           x.resolve));
         ("spec",
           (
           ((fun
           (x :
Spec.t) 
           ->
           (Spec.to_yojson
           x : Yojson.Safe.json)))
           x.spec));
         ("title",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (x :
RepeatSpec_Title_Variant.t)
            ->
           (RepeatSpec_Title_Variant.to_yojson
           x : Yojson.Safe.json)))
           v))
           x.title));
         ("transform",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (l :
Transform.t
           list)  ->
           let yojson_of_el
           (x :
Transform.t)
           =
           (Transform.to_yojson
           x : 
Yojson.Safe.json)
            in
           (`List
           (List.map
           yojson_of_el
           l) : 
Yojson.Safe.json)))
           v))
x.transform))])                                                              
  let make
    ?(transform=
None)  ?(title=
None) 
    ?(resolve= None)
     ?(name= None) 
    ?(description=
None)  ?(data=
None)  spec
    repeat =
    {
      repeat;
      spec;
      data;
      description;
      name;
      resolve;
      title;
      transform
    } 
end and
RepeatSpec_Title_Variant:
                                                              sig
  type t =
    [
      `TitleParams
      of
TitleParams.t
       | 
      `String
      of 
      string ]
  val to_yojson
    :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [
      `TitleParams
      of
TitleParams.t
       | 
      `String
      of 
      string ]

  let to_yojson
    =
    function
    | `TitleParams
      v ->
      ((fun
      (x :
TitleParams.t)
       ->
      (TitleParams.to_yojson
      x : Yojson.Safe.json)))
      v
    | `String v
      ->
      ((fun
      (s :
      string) 
      ->
      (`String
      s : Yojson.Safe.json)))
v                                                                   
end and
Resolve:
                                                                   sig
 type nonrec t =
 {
 scale:
ScaleResolveMap.t
 option ;
 legend:
LegendResolveMap.t
 option ;
 axis:
AxisResolveMap.t
 option }
 val
 to_yojson
 :
 t ->
Yojson.Safe.json
 val make
 :
 ?scale:ScaleResolveMap.t
 option ->
 ?legend:LegendResolveMap.t
 option ->
 ?axis:AxisResolveMap.t
 option ->
 unit -> t
end =
struct
 type nonrec t =
 {
 scale:
ScaleResolveMap.t
 option ;
 legend:
LegendResolveMap.t
 option ;
 axis:
AxisResolveMap.t
 option }

 let to_yojson
 x =
 `Assoc
 (List.filter
 (fun
 (k,v)  ->
 match v
 with
 | 
 `Null ->
 false
 | 
 _ -> true)
 [
 ("axis",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
AxisResolveMap.t)
  ->
 (AxisResolveMap.to_yojson
 x : Yojson.Safe.json)))
 v))
 x.axis));
 ("legend",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
LegendResolveMap.t)
  ->
 (LegendResolveMap.to_yojson
 x : Yojson.Safe.json)))
 v))
 x.legend));
 ("scale",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
ScaleResolveMap.t)
  ->
 (ScaleResolveMap.to_yojson
 x : Yojson.Safe.json)))
 v))
x.scale))])                                                                     
 let make
 ?(scale=
None) 
 ?(legend=
None) 
 ?(axis=
None)  ()
 =
 {
 axis;
 legend;
 scale
 } 
end
and
ResolveMode:sig
  type t = [ `Shared  | `Independent ]
  val to_yojson : t -> Yojson.Safe.json
end =
struct
  type t = [ `Shared  | `Independent ]

  let to_yojson =
    function
    | `Shared -> `String "shared"
    | `Independent -> `String "independent" 
end and
Scale:sig
  type nonrec t =
    {
    zero: bool option ;
    type_: ScaleType.t option ;
    scheme: Scale_Scheme_Variant.t option ;
    round: bool option ;
    rangeStep: Scale_RangeStep_Variant.t option ;
    range: Scale_Range_Variant.t option ;
    paddingOuter: int option ;
    paddingInner: int option ;
    padding: int option ;
    nice: Scale_Nice_Variant.t option ;
    interpolate: Scale_Interpolate_Variant.t option ;
    exponent: int option ;
    domain: Scale_Domain_Variant.t option ;
    clamp: bool option ;
    base: int option }
  val to_yojson : t -> Yojson.Safe.json
  val make :
    ?zero:bool option ->
      ?type_:ScaleType.t option ->
        ?scheme:Scale_Scheme_Variant.t option ->
          ?round:bool option ->
            ?rangeStep:Scale_RangeStep_Variant.t option ->
              ?range:Scale_Range_Variant.t option ->
                ?paddingOuter:int option ->
                  ?paddingInner:int option ->
                    ?padding:int option ->
                      ?nice:Scale_Nice_Variant.t option ->
                        ?interpolate:Scale_Interpolate_Variant.t
                          option ->
                          ?exponent:int option ->
                            ?domain:Scale_Domain_Variant.t
                              option ->
                              ?clamp:bool option ->
                                ?base:int option -> unit -> t
end =
struct
  type nonrec t =
    {
    zero: bool option ;
    type_: ScaleType.t option ;
    scheme: Scale_Scheme_Variant.t option ;
    round: bool option ;
    rangeStep: Scale_RangeStep_Variant.t option ;
    range: Scale_Range_Variant.t option ;
    paddingOuter: int option ;
    paddingInner: int option ;
    padding: int option ;
    nice: Scale_Nice_Variant.t option ;
    interpolate: Scale_Interpolate_Variant.t option ;
    exponent: int option ;
    domain: Scale_Domain_Variant.t option ;
    clamp: bool option ;
    base: int option }

  (** Fields
  
    zero:
      If `true`, ensures that a zero baseline value is included in the scale domain.
      
      __Default value:__ `true` for x and y channels if the quantitative field is not binned and no custom `domain` is provided; `false` otherwise.
      
      __Note:__ Log, time, and utc scales do not support `zero`.
  
    type:
      The type of scale.  Vega-Lite supports the following categories of scale types:
      
      1) [**Continuous Scales**](scale.html#continuous) -- mapping continuous domains to continuous output ranges ([`"linear"`](scale.html#linear), [`"pow"`](scale.html#pow), [`"sqrt"`](scale.html#sqrt), [`"log"`](scale.html#log), [`"time"`](scale.html#time), [`"utc"`](scale.html#utc), [`"sequential"`](scale.html#sequential)).
      
      2) [**Discrete Scales**](scale.html#discrete) -- mapping discrete domains to discrete ([`"ordinal"`](scale.html#ordinal)) or continuous ([`"band"`](scale.html#band) and [`"point"`](scale.html#point)) output ranges.
      
      3) [**Discretizing Scales**](scale.html#discretizing) -- mapping continuous domains to discrete output ranges ([`"bin-linear"`](scale.html#bin-linear) and [`"bin-ordinal"`](scale.html#bin-ordinal)).
      
      __Default value:__ please see the [scale type table](scale.html#type).
  
    scheme:
      A string indicating a color [scheme](scale.html#scheme) name (e.g., `"category10"` or `"viridis"`) or a [scheme parameter object](scale.html#scheme-params).
      
      Discrete color schemes may be used with [discrete](scale.html#discrete) or [discretizing](scale.html#discretizing) scales. Continuous color schemes are intended for use with [sequential](scales.html#sequential) scales.
      
      For the full list of supported scheme, please refer to the [Vega Scheme](https://vega.github.io/vega/docs/schemes/#reference) reference.
  
    round:
      If `true`, rounds numeric output values to integers. This can be helpful for snapping to the pixel grid.
      
      __Default value:__ `false`.
  
    rangeStep:
      The distance between the starts of adjacent bands or points in [band](scale.html#band) and [point](scale.html#point) scales.
      
      If `rangeStep` is `null` or if the view contains the scale's corresponding [size](size.html) (`width` for `x` scales and `height` for `y` scales), `rangeStep` will be automatically determined to fit the size of the view.
      
      __Default value:__  derived the [scale config](config.html#scale-config)'s `textXRangeStep` (`90` by default) for x-scales of `text` marks and `rangeStep` (`21` by default) for x-scales of other marks and y-scales.
      
      __Warning__: If `rangeStep` is `null` and the cardinality of the scale's domain is higher than `width` or `height`, the rangeStep might become less than one pixel and the mark might not appear correctly.
  
    range:
      The range of the scale. One of:
      
      - A string indicating a [pre-defined named scale range](scale.html#range-config) (e.g., example, `"symbol"`, or `"diverging"`).
      
      - For [continuous scales](scale.html#continuous), two-element array indicating  minimum and maximum values, or an array with more than two entries for specifying a [piecewise scale](scale.html#piecewise).
      
      - For [discrete](scale.html#discrete) and [discretizing](scale.html#discretizing) scales, an array of desired output values.
      
      __Notes:__
      
      1) For [sequential](scale.html#sequential), [ordinal](scale.html#ordinal), and discretizing color scales, you can also specify a color [`scheme`](scale.html#scheme) instead of `range`.
      
      2) Any directly specified `range` for `x` and `y` channels will be ignored. Range can be customized via the view's corresponding [size](size.html) (`width` and `height`) or via [range steps and paddings properties](#range-step) for [band](#band) and [point](#point) scales.
  
    paddingOuter:
      The outer padding (spacing) at the ends of the range of band and point scales,
      as a fraction of the step size. This value must lie in the range [0,1].
      
      __Default value:__ derived from the [scale config](scale.html#config)'s `bandPaddingOuter` for band scales and `pointPadding` for point scales.
  
    paddingInner:
      The inner padding (spacing) within each band step of band scales, as a fraction of the step size. This value must lie in the range [0,1].
      
      For point scale, this property is invalid as point scales do not have internal band widths (only step sizes between bands).
      
      __Default value:__ derived from the [scale config](scale.html#config)'s `bandPaddingInner`.
  
    padding:
      Shortcut for setting `paddingInner` and `paddingOuter` to the same value.  For point scales, this property only affects `paddingOuter`.
      
      __Default value:__ see `paddingInner` and `paddingOuter`.
  
    nice:
      Extending the domain so that it starts and ends on nice round values. This method typically modifies the scale’s domain, and may only extend the bounds to the nearest round value. Nicing is useful if the domain is computed from data and may be irregular. For example, for a domain of _[0.201479…, 0.996679…]_, a nice domain might be _[0.2, 1.0]_.
      
      For quantitative scales such as linear, `nice` can be either a boolean flag or a number. If `nice` is a number, it will represent a desired tick count. This allows greater control over the step size used to extend the bounds, guaranteeing that the returned ticks will exactly cover the domain.
      
      For temporal fields with time and utc scales, the `nice` value can be a string indicating the desired time interval. Legal values are `"millisecond"`, `"second"`, `"minute"`, `"hour"`, `"day"`, `"week"`, `"month"`, and `"year"`. Alternatively, `time` and `utc` scales can accept an object-valued interval specifier of the form `{"interval": "month", "step": 3}`, which includes a desired number of interval steps. Here, the domain would snap to quarter (Jan, Apr, Jul, Oct) boundaries.
      
      __Default value:__ `true` for unbinned _quantitative_ fields; automatically determined based on the time unit for _temporal_ fields.
  
    interpolate:
      The interpolation method for range values. By default, a general interpolator for numbers, dates, strings and colors (in RGB space) is used. For color ranges, this property allows interpolation in alternative color spaces. Legal values include `rgb`, `hsl`, `hsl-long`, `lab`, `hcl`, `hcl-long`, `cubehelix` and `cubehelix-long` ('-long' variants use longer paths in polar coordinate spaces). If object-valued, this property accepts an object with a string-valued _type_ property and an optional numeric _gamma_ property applicable to rgb and cubehelix interpolators. For more, see the [d3-interpolate documentation](https://github.com/d3/d3-interpolate).
  
    exponent:
      The exponent of the `pow` scale.
  
    domain:
      Customized domain values.
      
      For _quantitative_ fields, `domain` can take the form of a two-element array with minimum and maximum values.  [Piecewise scales](scale.html#piecewise) can be created by providing a `domain` with more than two entries.
      If the input field is aggregated, `domain` can also be a string value `"unaggregated"`, indicating that the domain should include the raw data values prior to the aggregation.
      
      For _temporal_ fields, `domain` can be a two-element array minimum and maximum values, in the form of either timestamps or the [DateTime definition objects](types.html#datetime).
      
      For _ordinal_ and _nominal_ fields, `domain` can be an array that lists valid input values.
      
      The `selection` property can be used to [interactively determine](selection.html#scale-domains) the scale domain.
  
    clamp:
      If `true`, values that exceed the data domain are clamped to either the minimum or maximum range value
      
      __Default value:__ derived from the [scale config](config.html#scale-config)'s `clamp` (`true` by default).
  
    base:
      The logarithm base of the `log` scale (default `10`).
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  -> match v with | `Null -> false | _ -> true)
         [("base",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun (i : int)  -> (`Int i : Yojson.Safe.json))) v))
               x.base));
         ("clamp",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (b : bool)  -> (`Bool b : Yojson.Safe.json)))
                    v)) x.clamp));
         ("domain",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : Scale_Domain_Variant.t)  ->
                      (Scale_Domain_Variant.to_yojson x : Yojson.Safe.json)))
                    v)) x.domain));
         ("exponent",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json))) v))
              x.exponent));
         ("interpolate",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : Scale_Interpolate_Variant.t)  ->
                      (Scale_Interpolate_Variant.to_yojson x : 
Yojson.Safe.json))) v)) x.interpolate));
         ("nice",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : Scale_Nice_Variant.t)  ->
                      (Scale_Nice_Variant.to_yojson x : Yojson.Safe.json)))
                    v)) x.nice));
         ("padding",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json))) v))
              x.padding));
         ("paddingInner",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json))) v))
              x.paddingInner));
         ("paddingOuter",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json))) v))
              x.paddingOuter));
         ("range",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : Scale_Range_Variant.t)  ->
                      (Scale_Range_Variant.to_yojson x : Yojson.Safe.json)))
                    v)) x.range));
         ("rangeStep",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : Scale_RangeStep_Variant.t)  ->
                      (Scale_RangeStep_Variant.to_yojson x : Yojson.Safe.json)))
                    v)) x.rangeStep));
         ("round",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (b : bool)  -> (`Bool b : Yojson.Safe.json)))
                    v)) x.round));
         ("scheme",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : Scale_Scheme_Variant.t)  ->
                      (Scale_Scheme_Variant.to_yojson x : Yojson.Safe.json)))
                    v)) x.scheme));
         ("type",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : ScaleType.t)  ->
                      (ScaleType.to_yojson x : Yojson.Safe.json))) v))
              x.type_));
         ("zero",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (b : bool)  -> (`Bool b : Yojson.Safe.json)))
v)) x.zero))])            
  let make ?(zero= None)  ?(type_= None)  ?(scheme= None)  ?(round=
None)  ?(rangeStep= None)  ?(range= None)  ?(paddingOuter= None) 
    ?(paddingInner= None)  ?(padding= None)  ?(nice= None) 
    ?(interpolate= None)  ?(exponent= None)  ?(domain= None)  ?(clamp=
None)  ?(base= None)  () =
    {
      base;
      clamp;
      domain;
      exponent;
      interpolate;
      nice;
      padding;
      paddingInner;
      paddingOuter;
      range;
      rangeStep;
      round;
      scheme;
      type_;
      zero
    } 
end and
ScaleConfig:sig
  type nonrec t =
    {
    useUnaggregatedDomain: bool option ;
    textXRangeStep: int option ;
    round: bool option ;
    rangeStep: ScaleConfig_RangeStep_Variant.t option ;
    pointPadding: int option ;
    minStrokeWidth: int option ;
    minSize: int option ;
    minOpacity: int option ;
    minFontSize: int option ;
    minBandSize: int option ;
    maxStrokeWidth: int option ;
    maxSize: int option ;
    maxOpacity: int option ;
    maxFontSize: int option ;
    maxBandSize: int option ;
    clamp: bool option ;
    bandPaddingOuter: int option ;
    bandPaddingInner: int option }
  val to_yojson : t -> Yojson.Safe.json
  val make :
    ?useUnaggregatedDomain:bool option ->
      ?textXRangeStep:int option ->
        ?round:bool option ->
          ?rangeStep:ScaleConfig_RangeStep_Variant.t
            option ->
            ?pointPadding:int option ->
              ?minStrokeWidth:int option ->
                ?minSize:int option ->
                  ?minOpacity:int option ->
                    ?minFontSize:int option ->
                      ?minBandSize:int option ->
                        ?maxStrokeWidth:int option ->
                          ?maxSize:int option ->
                            ?maxOpacity:int option ->
                              ?maxFontSize:int option
                                ->
                                ?maxBandSize:int
                                  option ->
                                  ?clamp:bool option
                                    ->
                                    ?bandPaddingOuter:int
                                      option ->
                                      ?bandPaddingInner:int
                                        option ->
                                        unit -> t
end =
struct
  type nonrec t =
    {
    useUnaggregatedDomain: bool option ;
    textXRangeStep: int option ;
    round: bool option ;
    rangeStep: ScaleConfig_RangeStep_Variant.t option ;
    pointPadding: int option ;
    minStrokeWidth: int option ;
    minSize: int option ;
    minOpacity: int option ;
    minFontSize: int option ;
    minBandSize: int option ;
    maxStrokeWidth: int option ;
    maxSize: int option ;
    maxOpacity: int option ;
    maxFontSize: int option ;
    maxBandSize: int option ;
    clamp: bool option ;
    bandPaddingOuter: int option ;
    bandPaddingInner: int option }

  (** Fields
  
    useUnaggregatedDomain:
      Use the source data range before aggregation as scale domain instead of aggregated data for aggregate axis.
      
      This is equivalent to setting `domain` to `"unaggregate"` for aggregated _quantitative_ fields by default.
      
      This property only works with aggregate functions that produce values within the raw data domain (`"mean"`, `"average"`, `"median"`, `"q1"`, `"q3"`, `"min"`, `"max"`). For other aggregations that produce values outside of the raw data domain (e.g. `"count"`, `"sum"`), this property is ignored.
      
      __Default value:__ `false`
  
    textXRangeStep:
      Default range step for `x` band and point scales of text marks.
      
      __Default value:__ `90`
  
    round:
      If true, rounds numeric output values to integers.
      This can be helpful for snapping to the pixel grid.
      (Only available for `x`, `y`, and `size` scales.)
  
    rangeStep:
      Default range step for band and point scales of (1) the `y` channel
      and (2) the `x` channel when the mark is not `text`.
      
      __Default value:__ `21`
  
    pointPadding:
      Default outer padding for `x` and `y` point-ordinal scales.
      
      __Default value:__ `0.5`
  
    minStrokeWidth:
      Default minimum strokeWidth for strokeWidth (or rule/line's size) scale with zero=false.
      
      __Default value:__ `1`
  
    minSize:
      Default minimum value for point size scale with zero=false.
      
      __Default value:__ `9`
  
    minOpacity:
      Default minimum opacity for mapping a field to opacity.
      
      __Default value:__ `0.3`
  
    minFontSize:
      The default min value for mapping quantitative fields to tick's size/fontSize scale with zero=false
      
      __Default value:__ `8`
  
    minBandSize:
      The default min value for mapping quantitative fields to bar and tick's size/bandSize scale with zero=false.
      
      __Default value:__ `2`
  
    maxStrokeWidth:
      Default max strokeWidth for strokeWidth  (or rule/line's size) scale.
      
      __Default value:__ `4`
  
    maxSize:
      Default max value for point size scale.
  
    maxOpacity:
      Default max opacity for mapping a field to opacity.
      
      __Default value:__ `0.8`
  
    maxFontSize:
      The default max value for mapping quantitative fields to text's size/fontSize.
      
      __Default value:__ `40`
  
    maxBandSize:
      The default max value for mapping quantitative fields to bar's size/bandSize.
      
      If undefined (default), we will use the scale's `rangeStep` - 1.
  
    clamp:
      If true, values that exceed the data domain are clamped to either the minimum or maximum range value
  
    bandPaddingOuter:
      Default outer padding for `x` and `y` band-ordinal scales.
      If not specified, by default, band scale's paddingOuter is paddingInner/2.
  
    bandPaddingInner:
      Default inner padding for `x` and `y` band-ordinal scales.
      
      __Default value:__ `0.1`
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  -> match v with | `Null -> false | _ -> true)
         [("bandPaddingInner",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun (i : int)  ->
                       (`Int i : Yojson.Safe.json))) v))
               x.bandPaddingInner));
         ("bandPaddingOuter",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json)))
                    v)) x.bandPaddingOuter));
         ("clamp",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (b : bool)  ->
                      (`Bool b : Yojson.Safe.json))) v)) x.clamp));
         ("maxBandSize",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json)))
                    v)) x.maxBandSize));
         ("maxFontSize",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json)))
                    v)) x.maxFontSize));
         ("maxOpacity",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json)))
                    v)) x.maxOpacity));
         ("maxSize",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json)))
                    v)) x.maxSize));
         ("maxStrokeWidth",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json)))
                    v)) x.maxStrokeWidth));
         ("minBandSize",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json)))
                    v)) x.minBandSize));
         ("minFontSize",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json)))
                    v)) x.minFontSize));
         ("minOpacity",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json)))
                    v)) x.minOpacity));
         ("minSize",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json)))
                    v)) x.minSize));
         ("minStrokeWidth",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json)))
                    v)) x.minStrokeWidth));
         ("pointPadding",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json)))
                    v)) x.pointPadding));
         ("rangeStep",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : ScaleConfig_RangeStep_Variant.t)  ->
                      (ScaleConfig_RangeStep_Variant.to_yojson x : 
Yojson.Safe.json))) v)) x.rangeStep));
         ("round",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (b : bool)  ->
                      (`Bool b : Yojson.Safe.json))) v)) x.round));
         ("textXRangeStep",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json)))
                    v)) x.textXRangeStep));
         ("useUnaggregatedDomain",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (b : bool)  ->
                      (`Bool b : Yojson.Safe.json))) v))
x.useUnaggregatedDomain))])                 
  let make ?(useUnaggregatedDomain= None)  ?(textXRangeStep=
None)  ?(round= None)  ?(rangeStep= None)  ?(pointPadding=
None)  ?(minStrokeWidth= None)  ?(minSize= None) 
    ?(minOpacity= None)  ?(minFontSize= None)  ?(minBandSize=
None)  ?(maxStrokeWidth= None)  ?(maxSize= None) 
    ?(maxOpacity= None)  ?(maxFontSize= None)  ?(maxBandSize=
None)  ?(clamp= None)  ?(bandPaddingOuter= None) 
    ?(bandPaddingInner= None)  () =
    {
      bandPaddingInner;
      bandPaddingOuter;
      clamp;
      maxBandSize;
      maxFontSize;
      maxOpacity;
      maxSize;
      maxStrokeWidth;
      minBandSize;
      minFontSize;
      minOpacity;
      minSize;
      minStrokeWidth;
      pointPadding;
      rangeStep;
      round;
      textXRangeStep;
      useUnaggregatedDomain
    } 
end and
ScaleConfig_RangeStep_Variant:sig
  type t =
    [ `Num of int ] option
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t = [ `Num of int ] option

  let to_yojson =
    function
    | Some (`Num v) ->
        ((fun (i : int)  -> (`Int i : Yojson.Safe.json))) v
    | None -> `Null 
end and
ScaleFieldDef:sig
  type nonrec t =
    {
    type_: Type.t ;
    timeUnit: TimeUnit.t option ;
    sort:
ScaleFieldDef_Sort_Variant_1.t
        option
      ;
    scale: Scale.t option ;
    field: Field.t option ;
    bin:
ScaleFieldDef_Bin_Variant.t option ;
    aggregate: Aggregate.t option }
  val to_yojson : t -> Yojson.Safe.json
  val make :
    ?timeUnit:TimeUnit.t option ->
      ?sort:ScaleFieldDef_Sort_Variant_1.t
        option ->
        ?scale:Scale.t option ->
          ?field:Field.t option ->
            ?bin:ScaleFieldDef_Bin_Variant.t
              option ->
              ?aggregate:Aggregate.t
                option -> Type.t -> t
end =
struct
  type nonrec t =
    {
    type_: Type.t ;
    timeUnit: TimeUnit.t option ;
    sort: ScaleFieldDef_Sort_Variant_1.t option ;
    scale: Scale.t option ;
    field: Field.t option ;
    bin: ScaleFieldDef_Bin_Variant.t option ;
    aggregate: Aggregate.t option }

  (** Fields
  
    type:
      The encoded field's type of measurement. This can be either a full type
      name (`"quantitative"`, `"temporal"`, `"ordinal"`,  and `"nominal"`).
  
    timeUnit:
      Time unit for a `temporal` field  (e.g., `year`, `yearmonth`, `month`, `hour`).
      
      __Default value:__ `undefined` (None)
  
    sort:
      Sort order for the encoded field.
      Supported `sort` values include `"ascending"`, `"descending"` and `null` (no sorting).
      For fields with discrete domains, `sort` can also be a [sort field definition object](sort.html#sort-field).
      
      __Default value:__ `"ascending"`
  
    scale:
      An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.
      
      __Default value:__ If undefined, default [scale properties](scale.html) are applied.
  
    field:
      __Required.__ A string defining the name of the field from which to pull a data value
      or an object defining iterated values from the [`repeat`](repeat.html) operator.
      
      __Note:__ `field` is not required if `aggregate` is `count`.
  
    bin:
      A flag for binning a `quantitative` field, or [an object defining binning parameters](bin.html#params).
      If `true`, default [binning parameters](bin.html) will be applied.
      
      __Default value:__ `false`
  
    aggregate:
      Aggregation function for the field
      (e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).
      
      __Default value:__ `undefined` (None)
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with | `Null -> false | _ -> true)
         [("aggregate",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun (x : Aggregate.t)  ->
                       (Aggregate.to_yojson x : 
Yojson.Safe.json))) v))
               x.aggregate));
         ("bin",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x : ScaleFieldDef_Bin_Variant.t)
                       ->
                      (ScaleFieldDef_Bin_Variant.to_yojson
                         x : Yojson.Safe.json))) v))
              x.bin));
         ("field",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : Field.t)  ->
                      (Field.to_yojson x : Yojson.Safe.json)))
                    v)) x.field));
         ("scale",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : Scale.t)  ->
                      (Scale.to_yojson x : Yojson.Safe.json)))
                    v)) x.scale));
         ("sort",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
ScaleFieldDef_Sort_Variant_1.t)
                       ->
                      (ScaleFieldDef_Sort_Variant_1.to_yojson
                         x : Yojson.Safe.json))) v))
              x.sort));
         ("timeUnit",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : TimeUnit.t)  ->
                      (TimeUnit.to_yojson x : Yojson.Safe.json)))
                    v)) x.timeUnit));
         ("type",
           (((fun (x : Type.t)  ->
                (Type.to_yojson x : Yojson.Safe.json)))
x.type_))])                           
  let make ?(timeUnit= None)  ?(sort= None)  ?(scale=
None)  ?(field= None)  ?(bin= None)  ?(aggregate=
None)  type_ =
    {
      type_;
      aggregate;
      bin;
      field;
      scale;
      sort;
      timeUnit
    } 
end and
ScaleFieldDef_Bin_Variant:sig
  type t =
    [
      `BinParams of
BinParams.t 
    | `Boolean of bool ]
  val to_yojson :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [ `BinParams of BinParams.t 
    | `Boolean of bool ]

  let to_yojson =
    function
    | `BinParams v ->
        ((fun (x : BinParams.t)  ->
            (BinParams.to_yojson x : Yojson.Safe.json)))
          v
    | `Boolean v ->
        ((fun (b : bool)  ->
(`Bool b : Yojson.Safe.json))) v                                
end and
ScaleFieldDef_Sort_Variant:sig
  type t =
    [
      `SortField
        of
SortField.t
         | 
      `SortOrder
        of
SortOrder.t
        ]
  val to_yojson :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [ `SortField of SortField.t 
    | `SortOrder of SortOrder.t ]

  let to_yojson =
    function
    | `SortField v ->
        ((fun (x : SortField.t)  ->
            (SortField.to_yojson x : 
Yojson.Safe.json))) v
    | `SortOrder v ->
        ((fun (x : SortOrder.t)  ->
            (SortOrder.to_yojson x : 
Yojson.Safe.json))) v                                     
end and
ScaleFieldDef_Sort_Variant_1:sig
  type t =
  [
  `ScaleFieldDef_Sort_Variant
  of
ScaleFieldDef_Sort_Variant.t
  ] option
  val
  to_yojson
  :
  t ->
Yojson.Safe.json
end =
struct
  type t =
    [
      `ScaleFieldDef_Sort_Variant of
ScaleFieldDef_Sort_Variant.t ]
      option

  let to_yojson =
    function
    | None -> `Null
    | Some
        (`ScaleFieldDef_Sort_Variant v)
        ->
        ((fun
            (x :
ScaleFieldDef_Sort_Variant.t)
             ->
            (ScaleFieldDef_Sort_Variant.to_yojson
x : Yojson.Safe.json))) v                                          
end and
ScaleResolveMap:sig
  type nonrec t =
    {
    y:
ResolveMode.t
        option
      ;
    x:
ResolveMode.t
        option
      ;
    size:
ResolveMode.t
        option
      ;
    shape:
ResolveMode.t
        option
      ;
    opacity:
ResolveMode.t
        option
      ;
    color:
ResolveMode.t
        option
      }
  val to_yojson :
    t ->
Yojson.Safe.json
  val make :
    ?y:ResolveMode.t
      option ->
      ?x:ResolveMode.t
        option ->
        ?size:ResolveMode.t
          option ->
          ?shape:ResolveMode.t
          option ->
          ?opacity:ResolveMode.t
          option ->
          ?color:ResolveMode.t
          option ->
          unit -> t
end =
struct
  type nonrec t =
    {
    y: ResolveMode.t option ;
    x: ResolveMode.t option ;
    size: ResolveMode.t option ;
    shape: ResolveMode.t option ;
    opacity: ResolveMode.t option ;
    color: ResolveMode.t option }

  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null -> false
            | _ -> true)
         [("color",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun
                       (x :
ResolveMode.t)
                        ->
                       (ResolveMode.to_yojson
                          x : 
Yojson.Safe.json)))
                     v)) x.color));
         ("opacity",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
ResolveMode.t)
                       ->
                      (ResolveMode.to_yojson
                         x : 
Yojson.Safe.json)))
                    v)) x.opacity));
         ("shape",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
ResolveMode.t)
                       ->
                      (ResolveMode.to_yojson
                         x : 
Yojson.Safe.json)))
                    v)) x.shape));
         ("size",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
ResolveMode.t)
                       ->
                      (ResolveMode.to_yojson
                         x : 
Yojson.Safe.json)))
                    v)) x.size));
         ("x",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
ResolveMode.t)
                       ->
                      (ResolveMode.to_yojson
                         x : 
Yojson.Safe.json)))
                    v)) x.x));
         ("y",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
ResolveMode.t)
                       ->
                      (ResolveMode.to_yojson
                         x : 
Yojson.Safe.json)))
v)) x.y))])                                               
  let make ?(y= None)  ?(x= None) 
    ?(size= None)  ?(shape= None) 
    ?(opacity= None)  ?(color=
None)  () =
    {
      color;
      opacity;
      shape;
      size;
      x;
      y
    } 
end and
ScaleType:sig
  type t =
    [ `Band 
    | `Point 
    | `Bin_ordinal 
    | `Ordinal 
    | `Sequential 
    | `Utc  | 
      `Time 
    | `Sqrt  | 
      `Pow 
    | `Log 
    | `Bin_linear 
    | `Linear ]
  val to_yojson :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [ `Band  | `Point 
    | `Bin_ordinal 
    | `Ordinal  | `Sequential 
    | `Utc  | `Time  | 
      `Sqrt 
    | `Pow  | `Log 
    | `Bin_linear  | `Linear ]

  let to_yojson =
    function
    | `Band -> `String "band"
    | `Point ->
        `String "point"
    | `Bin_ordinal ->
        `String "bin_ordinal"
    | `Ordinal ->
        `String "ordinal"
    | `Sequential ->
        `String "sequential"
    | `Utc -> `String "utc"
    | `Time -> `String "time"
    | `Sqrt -> `String "sqrt"
    | `Pow -> `String "pow"
    | `Log -> `String "log"
    | `Bin_linear ->
        `String "bin_linear"
    | `Linear ->
`String "linear"                                                    
end and
Scale_Domain_Variant:
                                                    sig
  type t =
    [
      `SelectionDomain of
SelectionDomain.t 
    | `DateTime_List of
DateTime.t list 
    | `String_List of
        string list 
    | `Number_List of
        int list 
    | `Unaggregated ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [
      `SelectionDomain of
SelectionDomain.t 
    | `DateTime_List of
DateTime.t list 
    | `String_List of
        string list 
    | `Number_List of
        int list 
    | `Unaggregated ]

  let to_yojson =
    function
    | `SelectionDomain v
        ->
        ((fun
            (x :
SelectionDomain.t)
             ->
            (SelectionDomain.to_yojson
               x : 
Yojson.Safe.json)))
          v
    | `DateTime_List v ->
        ((fun
            (l :
DateTime.t
                list)
             ->
            let yojson_of_el
              (x :
DateTime.t)
              =
              (DateTime.to_yojson
                x : 
Yojson.Safe.json)
               in
            (`List
               (List.map
                yojson_of_el
                l) : 
Yojson.Safe.json)))
          v
    | `String_List v ->
        ((fun
            (l :
              string list)
             ->
            let yojson_of_el
              (s :
                string)
              =
              (`String s : 
Yojson.Safe.json)
               in
            (`List
               (List.map
                yojson_of_el
                l) : 
Yojson.Safe.json)))
          v
    | `Number_List v ->
        ((fun
            (l :
              int list)
             ->
            let yojson_of_el
              (i : int) =
              (`Int i : 
Yojson.Safe.json)
               in
            (`List
               (List.map
                yojson_of_el
                l) : 
Yojson.Safe.json)))
          v
    | `Unaggregated ->
        `String
"unaggregated"                                                         
end and
Scale_Interpolate_Variant:
                                                         sig
  type t =
    [
      `InterpolateParams
        of
InterpolateParams.t
         | `Interpolate
           of
Interpolate.t
           ]
  val to_yojson :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [
      `InterpolateParams
        of
InterpolateParams.t
         | `Interpolate
           of
Interpolate.t
           ]

  let to_yojson =
    function
    | `InterpolateParams
        v ->
        ((fun
           (x :
InterpolateParams.t)
            ->
           (InterpolateParams.to_yojson
           x : 
Yojson.Safe.json)))
          v
    | `Interpolate v
        ->
        ((fun
           (x :
Interpolate.t)
            ->
           (Interpolate.to_yojson
           x : 
Yojson.Safe.json)))
v                                                              
end and
Scale_Nice_Record:
                                                              sig
  type nonrec t =
    {
    step: int ;
    interval:
      string }
  val to_yojson
    :
    t ->
Yojson.Safe.json
  val make :
    int ->
      string ->
      t
end =
struct
  type nonrec t =
    {
    step: int ;
    interval:
      string }

  let to_yojson
    x =
    `Assoc
      (
List.filter
      (fun
      (k,v)  ->
      match v
      with
      | 
      `Null ->
      false
      | 
      _ -> true)
      [
      ("interval",
      (((fun
      (s :
      string) 
      ->
      (`String
      s : Yojson.Safe.json)))
      x.interval));
      ("step",
      (((fun
      (i : int)
       ->
      (`Int i : 
Yojson.Safe.json)))
x.step))])                                                                   
  let make step
    interval =
    {
      interval;
      step
    } 
end and
Scale_Nice_Variant:
                                                                   sig
 type t =
 [
 `Scale_Nice_Record
 of
Scale_Nice_Record.t
  | 
 `NiceTime
 of
NiceTime.t
  | 
 `Number
 of 
 int 
 | `Boolean
 of bool ]
 val
 to_yojson
 :
 t ->
Yojson.Safe.json
end =
struct
 type t =
 [
 `Scale_Nice_Record
 of
Scale_Nice_Record.t
  | 
 `NiceTime
 of
NiceTime.t
  | 
 `Number
 of 
 int 
 | `Boolean
 of bool ]

 let to_yojson
 =
 function
 | 
 `Scale_Nice_Record
 v ->
 ((fun
 (x :
Scale_Nice_Record.t)
  ->
 (Scale_Nice_Record.to_yojson
 x : Yojson.Safe.json)))
 v
 | 
 `NiceTime
 v ->
 ((fun
 (x :
NiceTime.t)
  ->
 (NiceTime.to_yojson
 x : Yojson.Safe.json)))
 v
 | 
 `Number v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v
 | 
 `Boolean
 v ->
 ((fun
 (b :
 bool)  ->
 (`Bool b : 
Yojson.Safe.json)))
 v 
end
and
Scale_RangeStep_Variant:sig
  type t = [ `Num of int ] option
  val to_yojson : t -> Yojson.Safe.json
end =
struct
  type t = [ `Num of int ] option

  let to_yojson =
    function
    | Some (`Num v) -> ((fun (i : int)  -> (`Int i : Yojson.Safe.json))) v
    | None -> `Null 
end and
Scale_Range_Variant:sig
  type t =
    [ `String of string 
    | `String_List of string list 
    | `Number_List of int list ]
  val to_yojson : t -> Yojson.Safe.json
end =
struct
  type t =
    [ `String of string  | `String_List of string list 
    | `Number_List of int list ]

  let to_yojson =
    function
    | `String v ->
        ((fun (s : string)  -> (`String s : Yojson.Safe.json))) v
    | `String_List v ->
        ((fun (l : string list)  ->
            let yojson_of_el (s : string) =
              (`String s : Yojson.Safe.json)  in
            (`List (List.map yojson_of_el l) : Yojson.Safe.json))) v
    | `Number_List v ->
        ((fun (l : int list)  ->
            let yojson_of_el (i : int) = (`Int i : Yojson.Safe.json)
               in
(`List (List.map yojson_of_el l) : Yojson.Safe.json))) v            
end and
Scale_Scheme_Variant:sig
  type t =
    [ `SchemeParams of SchemeParams.t 
    | `String of string ]
  val to_yojson : t -> Yojson.Safe.json
end =
struct
  type t =
    [ `SchemeParams of SchemeParams.t  | `String of string ]

  let to_yojson =
    function
    | `SchemeParams v ->
        ((fun (x : SchemeParams.t)  ->
            (SchemeParams.to_yojson x : Yojson.Safe.json))) v
    | `String v ->
((fun (s : string)  -> (`String s : Yojson.Safe.json))) v                 
end and
SchemeParams:sig
  type nonrec t =
    {
    name: string ;
    extent: int list option }
  val to_yojson : t -> Yojson.Safe.json
  val make :
    ?extent:int list option -> string -> t
end =
struct
  type nonrec t = {
    name: string ;
    extent: int list option }

  (** Fields
  
    name:
      A color scheme name for sequential/ordinal scales (e.g., `"category10"` or `"viridis"`).
      
      For the full list of supported scheme, please refer to the [Vega Scheme](https://vega.github.io/vega/docs/schemes/#reference) reference.
  
    extent:
      For sequential and diverging schemes only, determines the extent of the color range to use. For example `[0.2, 1]` will rescale the color scheme such that color values in the range _[0, 0.2)_ are excluded from the scheme.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with | `Null -> false | _ -> true)
         [("extent",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun (l : int list)  ->
                       let yojson_of_el (i : int) =
                         (`Int i : Yojson.Safe.json)  in
                       (`List (List.map yojson_of_el l) : 
Yojson.Safe.json))) v)) x.extent));
         ("name",
           (((fun (s : string)  ->
(`String s : Yojson.Safe.json))) x.name))])                      
  let make ?(extent= None)  name = { name; extent } 
end and
SelectionAnd:sig
  type nonrec t =
    {
and_: SelectionOperand.t list }
  val to_yojson : t -> Yojson.Safe.json
  val make : SelectionOperand.t list -> t
end =
struct
  type nonrec t = {
and_: SelectionOperand.t list }

  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with | `Null -> false | _ -> true)
         [("and",
            (((fun (l : SelectionOperand.t list)  ->
                 let yojson_of_el
                   (x : SelectionOperand.t) =
                   (SelectionOperand.to_yojson x : 
Yojson.Safe.json)  in
                 (`List (List.map yojson_of_el l) : 
Yojson.Safe.json))) x.and_))])                           
  let make and_ = { and_ } 
end and
SelectionConfig:sig
  type nonrec t =
    {
    single:
SingleSelectionConfig.t
        option
      ;
    multi:
MultiSelectionConfig.t
        option
      ;
    interval:
IntervalSelectionConfig.t
        option
      }
  val to_yojson :
    t -> Yojson.Safe.json
  val make :
    ?single:SingleSelectionConfig.t
      option ->
      ?multi:MultiSelectionConfig.t
        option ->
        ?interval:IntervalSelectionConfig.t
          option -> unit -> t
end =
struct
  type nonrec t =
    {
    single: SingleSelectionConfig.t option ;
    multi: MultiSelectionConfig.t option ;
    interval: IntervalSelectionConfig.t option }

  (** Fields
  
    single:
      The default definition for a [`single`](selection.html#type) selection. All properties and transformations
        for a single selection definition (except `type`) may be specified here.
      
      For instance, setting `single` to `{"on": "dblclick"}` populates single selections on double-click by default.
  
    multi:
      The default definition for a [`multi`](selection.html#type) selection. All properties and transformations
      for a multi selection definition (except `type`) may be specified here.
      
      For instance, setting `multi` to `{"toggle": "event.altKey"}` adds additional values to
      multi selections when clicking with the alt-key pressed by default.
  
    interval:
      The default definition for an [`interval`](selection.html#type) selection. All properties and transformations
      for an interval selection definition (except `type`) may be specified here.
      
      For instance, setting `interval` to `{"translate": false}` disables the ability to move
      interval selections by default.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null -> false
            | _ -> true)
         [("interval",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun
                       (x :
IntervalSelectionConfig.t)
                        ->
                       (IntervalSelectionConfig.to_yojson
                          x : Yojson.Safe.json)))
                     v)) x.interval));
         ("multi",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x : MultiSelectionConfig.t)
                       ->
                      (MultiSelectionConfig.to_yojson
                         x : Yojson.Safe.json))) v))
              x.multi));
         ("single",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
SingleSelectionConfig.t)
                       ->
                      (SingleSelectionConfig.to_yojson
                         x : Yojson.Safe.json))) v))
x.single))])                                
  let make ?(single= None)  ?(multi= None) 
    ?(interval= None)  () =
    { interval; multi; single } 
end and
SelectionDef:sig
  type t =
    [
      `IntervalSelection of
IntervalSelection.t 
    | `MultiSelection of
MultiSelection.t 
    | `SingleSelection of
SingleSelection.t ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [
      `IntervalSelection of
IntervalSelection.t 
    | `MultiSelection of MultiSelection.t 
    | `SingleSelection of SingleSelection.t ]

  let to_yojson =
    function
    | `IntervalSelection v ->
        ((fun (x : IntervalSelection.t)  ->
            (IntervalSelection.to_yojson x : 
Yojson.Safe.json))) v
    | `MultiSelection v ->
        ((fun (x : MultiSelection.t)  ->
            (MultiSelection.to_yojson x : 
Yojson.Safe.json))) v
    | `SingleSelection v ->
        ((fun (x : SingleSelection.t)  ->
            (SingleSelection.to_yojson x : 
Yojson.Safe.json))) v                                     
end and
SelectionDomain:sig
  type t =
    [
      `SelectionDomain_Record_1
        of
SelectionDomain_Record_1.t
         | `SelectionDomain_Record
             of
SelectionDomain_Record.t
             ]
  val to_yojson :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [
      `SelectionDomain_Record_1 of
SelectionDomain_Record_1.t 
    | `SelectionDomain_Record of
SelectionDomain_Record.t ]

  let to_yojson =
    function
    | `SelectionDomain_Record_1 v ->
        ((fun
            (x :
SelectionDomain_Record_1.t)
             ->
            (SelectionDomain_Record_1.to_yojson
               x : Yojson.Safe.json))) v
    | `SelectionDomain_Record v ->
        ((fun
            (x :
SelectionDomain_Record.t)
             ->
            (SelectionDomain_Record.to_yojson
x : Yojson.Safe.json))) v                                          
end and
SelectionDomain_Record:sig
  type nonrec t =
   {
   selection:
   string ;
   field:
   string
   option }
  val
   to_yojson
   :
   t ->
Yojson.Safe.json
  val make :
   ?field:string
   option ->
   string ->
   t
end =
struct
  type nonrec t =
    {
    selection: string ;
    field: string option }

  (** Fields
  
    selection:
      The name of a selection.
  
    field:
      The field name to extract selected values for, when a selection is [projected](project.html)
      over multiple fields or encodings.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null -> false
            | _ -> true)
         [("field",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun
                       (s : string)
                        ->
                       (`String s : 
Yojson.Safe.json)))
                     v)) x.field));
         ("selection",
           (((fun (s : string)  ->
                (`String s : 
Yojson.Safe.json)))
x.selection))])                                               
  let make ?(field= None) 
    selection =
    { selection; field } 
end and
SelectionDomain_Record_1:
                                               sig
  type nonrec t =
    {
    selection: string ;
    encoding: string option }
  val to_yojson :
    t -> Yojson.Safe.json
  val make :
    ?encoding:string option ->
      string -> t
end =
struct
  type nonrec t =
    {
    selection: string ;
    encoding: string option }

  (** Fields
  
    selection:
      The name of a selection.
  
    encoding:
      The encoding channel to extract selected values for, when a selection is [projected](project.html)
      over multiple fields or encodings.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null -> false
            | _ -> true)
         [("encoding",
            (((function
               | None  ->
                   `Null
               | Some v ->
                   ((fun
                     (s :
                     string) 
                     ->
                     (`String
                     s : 
Yojson.Safe.json)))
                     v))
               x.encoding));
         ("selection",
           (((fun (s : string)
                 ->
                (`String s : 
Yojson.Safe.json)))
x.selection))])                                                    
  let make ?(encoding= None) 
    selection =
    { selection; encoding } 
end and
SelectionFilter:sig
                                                                    type nonrec t =
                                                                    {
                                                                    selection:
SelectionOperand.t
                                                                    }
                                                                    val
                                                                    to_yojson
                                                                    :
                                                                    t ->
Yojson.Safe.json
                                                                    val make
                                                                    :
SelectionOperand.t
                                                                    -> 
                                                                    t
end =
struct
  type nonrec t =
    {
    selection:
SelectionOperand.t }

  (** Fields
  
    selection:
      Filter using a selection name.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null ->
                false
            | _ -> true)
         [("selection",
            (((fun
                (x :
SelectionOperand.t)
                 ->
                (SelectionOperand.to_yojson
                x : 
Yojson.Safe.json)))
x.selection))])                                                         
  let make selection =
    { selection } 
end and
SelectionNot:
                                                         sig
  type nonrec t =
    {
    not:
SelectionOperand.t
      }
  val to_yojson :
    t ->
Yojson.Safe.json
  val make :
SelectionOperand.t
      -> t
end =
struct
  type nonrec t =
    {
    not:
SelectionOperand.t
      }

  let to_yojson x =
    `Assoc
      (List.filter
         (fun 
           (k,v)  ->
           match v
           with
           | 
           `Null ->
           false
           | 
           _ -> true)
         [("not",
           (((fun
           (x :
SelectionOperand.t)
            ->
           (SelectionOperand.to_yojson
           x : Yojson.Safe.json)))
x.not))])                                                              
  let make not =
    { not } 
end and
SelectionOperand:
                                                              sig
  type t =
    [
      `String
      of 
      string 
    | `SelectionOr
      of
SelectionOr.t
       | 
      `SelectionAnd
      of
SelectionAnd.t
       | 
      `SelectionNot
      of
SelectionNot.t
      ]
  val to_yojson
    :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [
      `String
      of 
      string 
    | `SelectionOr
      of
SelectionOr.t
       | 
      `SelectionAnd
      of
SelectionAnd.t
       | 
      `SelectionNot
      of
SelectionNot.t
      ]

  let to_yojson
    =
    function
    | `String v
      ->
      ((fun
      (s :
      string) 
      ->
      (`String
      s : Yojson.Safe.json)))
      v
    | `SelectionOr
      v ->
      ((fun
      (x :
SelectionOr.t)
       ->
      (SelectionOr.to_yojson
      x : Yojson.Safe.json)))
      v
    | `SelectionAnd
      v ->
      ((fun
      (x :
SelectionAnd.t)
       ->
      (SelectionAnd.to_yojson
      x : Yojson.Safe.json)))
      v
    | `SelectionNot
      v ->
      ((fun
      (x :
SelectionNot.t)
       ->
      (SelectionNot.to_yojson
      x : Yojson.Safe.json)))
v                                                                   
end and
SelectionOr:
                                                                   sig
 type nonrec t =
 {
 or_:
SelectionOperand.t
 list }
 val
 to_yojson
 :
 t ->
Yojson.Safe.json
 val make
 :
SelectionOperand.t
 list -> 
 t
end =
struct
 type nonrec t =
 {
 or_:
SelectionOperand.t
 list }

 let to_yojson
 x =
 `Assoc
 (List.filter
 (fun
 (k,v)  ->
 match v
 with
 | 
 `Null ->
 false
 | 
 _ -> true)
 [
 ("or",
 (((fun
 (l :
SelectionOperand.t
 list)  ->
 let yojson_of_el
 (x :
SelectionOperand.t)
 =
 (SelectionOperand.to_yojson
 x : 
Yojson.Safe.json)
  in
 (`List
 (List.map
 yojson_of_el
 l) : 
Yojson.Safe.json)))
 x.or_))]) 
 let make
 or_ =
 { or_ } 
end
and
SelectionResolution:sig
  type t = [ `Intersect  | `Union  | `Global ]
  val to_yojson : t -> Yojson.Safe.json
end =
struct
  type t = [ `Intersect  | `Union  | `Global ]

  let to_yojson =
    function
    | `Intersect -> `String "intersect"
    | `Union -> `String "union"
    | `Global -> `String "global" 
end and
SingleDefChannel:sig
  type t =
    [ `Tooltip  | `Text  | `Opacity  | `Color 
    | `Shape  | `Size  | `Column  | `Row  | `Y2 
    | `X2  | `Y  | `X ]
  val to_yojson : t -> Yojson.Safe.json
end =
struct
  type t =
    [ `Tooltip  | `Text  | `Opacity  | `Color  | `Shape  | `Size 
    | `Column  | `Row  | `Y2  | `X2  | `Y  | `X ]

  let to_yojson =
    function
    | `Tooltip -> `String "tooltip"
    | `Text -> `String "text"
    | `Opacity -> `String "opacity"
    | `Color -> `String "color"
    | `Shape -> `String "shape"
    | `Size -> `String "size"
    | `Column -> `String "column"
    | `Row -> `String "row"
    | `Y2 -> `String "y2"
    | `X2 -> `String "x2"
    | `Y -> `String "y"
    | `X -> `String "x" 
end and
SingleSelection:sig
  type nonrec t =
    {
    type_: string ;
    resolve: SelectionResolution.t option ;
    on: VgEventStream.t option ;
    nearest: bool option ;
    fields: string list option ;
    encodings: SingleDefChannel.t list option ;
    bind: SingleSelection_Bind_Variant.t option }
  val to_yojson : t -> Yojson.Safe.json
  val make :
    ?resolve:SelectionResolution.t option ->
      ?on:VgEventStream.t option ->
        ?nearest:bool option ->
          ?fields:string list option ->
            ?encodings:SingleDefChannel.t list
              option ->
              ?bind:SingleSelection_Bind_Variant.t
                option -> string -> t
end =
struct
  type nonrec t =
    {
    type_: string ;
    resolve: SelectionResolution.t option ;
    on: VgEventStream.t option ;
    nearest: bool option ;
    fields: string list option ;
    encodings: SingleDefChannel.t list option ;
    bind: SingleSelection_Bind_Variant.t option }

  (** Fields
  
    resolve:
      With layered and multi-view displays, a strategy that determines how
      selections' data queries are resolved when applied in a filter transform,
      conditional encoding rule, or scale domain.
  
    on:
      A [Vega event stream](https://vega.github.io/vega/docs/event-streams/) (object or selector) that triggers the selection.
      For interval selections, the event stream must specify a [start and end](https://vega.github.io/vega/docs/event-streams/#between-filters).
  
    nearest:
      When true, an invisible voronoi diagram is computed to accelerate discrete
      selection. The data value _nearest_ the mouse cursor is added to the selection.
      
      See the [nearest transform](nearest.html) documentation for more information.
  
    fields:
      An array of field names whose values must match for a data tuple to
      fall within the selection.
  
    encodings:
      An array of encoding channels. The corresponding data field values
      must match for a data tuple to fall within the selection.
  
    bind:
      Establish a two-way binding between a single selection and input elements
      (also known as dynamic query widgets). A binding takes the form of
      Vega's [input element binding definition](https://vega.github.io/vega/docs/signals/#bind)
      or can be a mapping between projected field/encodings and binding definitions.
      
      See the [bind transform](bind.html) documentation for more information.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  -> match v with | `Null -> false | _ -> true)
         [("bind",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun (x : SingleSelection_Bind_Variant.t)  ->
                       (SingleSelection_Bind_Variant.to_yojson x : 
Yojson.Safe.json))) v)) x.bind));
         ("encodings",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (l : SingleDefChannel.t list)  ->
                      let yojson_of_el (x : SingleDefChannel.t) =
                        (SingleDefChannel.to_yojson x : Yojson.Safe.json)
                         in
                      (`List (List.map yojson_of_el l) : 
Yojson.Safe.json))) v)) x.encodings));
         ("fields",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (l : string list)  ->
                      let yojson_of_el (s : string) =
                        (`String s : Yojson.Safe.json)  in
                      (`List (List.map yojson_of_el l) : 
Yojson.Safe.json))) v)) x.fields));
         ("nearest",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (b : bool)  ->
                      (`Bool b : Yojson.Safe.json))) v))
              x.nearest));
         ("on",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : VgEventStream.t)  ->
                      (VgEventStream.to_yojson x : Yojson.Safe.json)))
                    v)) x.on));
         ("resolve",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : SelectionResolution.t)  ->
                      (SelectionResolution.to_yojson x : 
Yojson.Safe.json))) v)) x.resolve));
         ("type",
           (((fun (s : string)  -> (`String s : Yojson.Safe.json)))
x.type_))])                 
  let make ?(resolve= None)  ?(on= None)  ?(nearest= None) 
    ?(fields= None)  ?(encodings= None)  ?(bind= None)  type_ =
    { type_; bind; encodings; fields; nearest; on; resolve } 
end and
SingleSelectionConfig:sig
  type nonrec t =
    {
    resolve:
SelectionResolution.t option ;
    on: VgEventStream.t option ;
    nearest: bool option ;
    fields: string list option ;
    encodings:
SingleDefChannel.t list option ;
    bind:
SingleSelectionConfig_Bind_Variant.t
        option
      }
  val to_yojson :
    t -> Yojson.Safe.json
  val make :
    ?resolve:SelectionResolution.t
      option ->
      ?on:VgEventStream.t option ->
        ?nearest:bool option ->
          ?fields:string list option
            ->
            ?encodings:SingleDefChannel.t
              list option ->
              ?bind:SingleSelectionConfig_Bind_Variant.t
                option -> unit -> t
end =
struct
  type nonrec t =
    {
    resolve: SelectionResolution.t option ;
    on: VgEventStream.t option ;
    nearest: bool option ;
    fields: string list option ;
    encodings: SingleDefChannel.t list option ;
    bind: SingleSelectionConfig_Bind_Variant.t option }

  (** Fields
  
    resolve:
      With layered and multi-view displays, a strategy that determines how
      selections' data queries are resolved when applied in a filter transform,
      conditional encoding rule, or scale domain.
  
    on:
      A [Vega event stream](https://vega.github.io/vega/docs/event-streams/) (object or selector) that triggers the selection.
      For interval selections, the event stream must specify a [start and end](https://vega.github.io/vega/docs/event-streams/#between-filters).
  
    nearest:
      When true, an invisible voronoi diagram is computed to accelerate discrete
      selection. The data value _nearest_ the mouse cursor is added to the selection.
      
      See the [nearest transform](nearest.html) documentation for more information.
  
    fields:
      An array of field names whose values must match for a data tuple to
      fall within the selection.
  
    encodings:
      An array of encoding channels. The corresponding data field values
      must match for a data tuple to fall within the selection.
  
    bind:
      Establish a two-way binding between a single selection and input elements
      (also known as dynamic query widgets). A binding takes the form of
      Vega's [input element binding definition](https://vega.github.io/vega/docs/signals/#bind)
      or can be a mapping between projected field/encodings and binding definitions.
      
      See the [bind transform](bind.html) documentation for more information.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with | `Null -> false | _ -> true)
         [("bind",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun
                       (x :
SingleSelectionConfig_Bind_Variant.t)
                        ->
                       (SingleSelectionConfig_Bind_Variant.to_yojson
                          x : Yojson.Safe.json))) v)) x.bind));
         ("encodings",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (l : SingleDefChannel.t list)  ->
                      let yojson_of_el
                        (x : SingleDefChannel.t) =
                        (SingleDefChannel.to_yojson x : 
Yojson.Safe.json)  in
                      (`List (List.map yojson_of_el l) : 
Yojson.Safe.json))) v)) x.encodings));
         ("fields",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (l : string list)  ->
                      let yojson_of_el (s : string) =
                        (`String s : Yojson.Safe.json)  in
                      (`List (List.map yojson_of_el l) : 
Yojson.Safe.json))) v)) x.fields));
         ("nearest",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (b : bool)  ->
                      (`Bool b : Yojson.Safe.json))) v))
              x.nearest));
         ("on",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : VgEventStream.t)  ->
                      (VgEventStream.to_yojson x : Yojson.Safe.json)))
                    v)) x.on));
         ("resolve",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : SelectionResolution.t)  ->
                      (SelectionResolution.to_yojson x : 
Yojson.Safe.json))) v)) x.resolve))])                      
  let make ?(resolve= None)  ?(on= None)  ?(nearest= None) 
    ?(fields= None)  ?(encodings= None)  ?(bind= None)  () =
    { bind; encodings; fields; nearest; on; resolve } 
end and
SingleSelectionConfig_Bind_Record:sig
  type nonrec t =
    {
    vgBinding:
VgBinding.t
        option
      }
  val to_yojson :
    t ->
Yojson.Safe.json
  val make :
    ?vgBinding:VgBinding.t
      option ->
      unit -> t
end =
struct
  type nonrec t = {
    vgBinding: VgBinding.t option }

  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with | `Null -> false | _ -> true)
         [("vgBinding",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun (x : VgBinding.t)  ->
                       (VgBinding.to_yojson x : 
Yojson.Safe.json))) v))
x.vgBinding))])                           
  let make ?(vgBinding= None)  () = { vgBinding } 
end and
SingleSelectionConfig_Bind_Variant:sig
  type t =
    [
      `SingleSelectionConfig_Bind_Record
      of
SingleSelectionConfig_Bind_Record.t
       | 
      `VgBinding
      of
VgBinding.t
      ]
  val to_yojson
    :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [
      `SingleSelectionConfig_Bind_Record of
SingleSelectionConfig_Bind_Record.t 
    | `VgBinding of VgBinding.t ]

  let to_yojson =
    function
    | `SingleSelectionConfig_Bind_Record v ->
        ((fun
            (x :
SingleSelectionConfig_Bind_Record.t)
             ->
            (SingleSelectionConfig_Bind_Record.to_yojson
               x : Yojson.Safe.json))) v
    | `VgBinding v ->
        ((fun (x : VgBinding.t)  ->
            (VgBinding.to_yojson x : Yojson.Safe.json)))
v                                
end and
SingleSelection_Bind_Record:sig
  type nonrec t =
    {
    vgBinding:
VgBinding.t
        option
      }
  val to_yojson :
    t ->
Yojson.Safe.json
  val make :
    ?vgBinding:VgBinding.t
      option ->
      unit -> t
end =
struct
  type nonrec t =
    {
    vgBinding: VgBinding.t option }

  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null -> false
            | _ -> true)
         [("vgBinding",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun (x : VgBinding.t) 
                       ->
                       (VgBinding.to_yojson x : 
Yojson.Safe.json))) v))
x.vgBinding))])                                     
  let make ?(vgBinding= None)  () =
    { vgBinding } 
end and
SingleSelection_Bind_Variant:sig
  type t =
  [
  `SingleSelection_Bind_Record
  of
SingleSelection_Bind_Record.t
   | 
  `VgBinding
  of
VgBinding.t
  ]
  val
  to_yojson
  :
  t ->
Yojson.Safe.json
end =
struct
  type t =
    [
      `SingleSelection_Bind_Record of
SingleSelection_Bind_Record.t 
    | `VgBinding of VgBinding.t ]

  let to_yojson =
    function
    | `SingleSelection_Bind_Record v ->
        ((fun
            (x :
SingleSelection_Bind_Record.t)
             ->
            (SingleSelection_Bind_Record.to_yojson
               x : Yojson.Safe.json))) v
    | `VgBinding v ->
        ((fun (x : VgBinding.t)  ->
            (VgBinding.to_yojson x : 
Yojson.Safe.json))) v                                          
end and
SingleTimeUnit:sig
  type t =
    [
      `UtcSingleTimeUnit
        of
UtcSingleTimeUnit.t
         | `LocalSingleTimeUnit
           of
LocalSingleTimeUnit.t
           ]
  val to_yojson :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [
      `UtcSingleTimeUnit of
UtcSingleTimeUnit.t 
    | `LocalSingleTimeUnit of
LocalSingleTimeUnit.t ]

  let to_yojson =
    function
    | `UtcSingleTimeUnit v ->
        ((fun
            (x :
UtcSingleTimeUnit.t)
             ->
            (UtcSingleTimeUnit.to_yojson
               x : Yojson.Safe.json)))
          v
    | `LocalSingleTimeUnit v ->
        ((fun
            (x :
LocalSingleTimeUnit.t)
             ->
            (LocalSingleTimeUnit.to_yojson
               x : Yojson.Safe.json)))
v                                               
end and
SortField:sig
  type nonrec t =
    {
    order:
SortOrder.t
        option
      ;
    op:
AggregateOp.t ;
    field:
      string option }
  val to_yojson :
    t ->
Yojson.Safe.json
  val make :
    ?order:SortOrder.t
      option ->
      ?field:string
        option ->
AggregateOp.t
          -> 
          t
end =
struct
  type nonrec t =
    {
    order: SortOrder.t option ;
    op: AggregateOp.t ;
    field: string option }

  (** Fields
  
    order:
      The sort order. One of `"ascending"` (default) or `"descending"`.
  
    op:
      An [aggregate operation](aggregate.html#ops) to perform on the field prior to sorting (e.g., `"count"`, `"mean"` and `"median"`).
      This property is required in cases where the sort field and the data reference field do not match.
      The input data objects will be aggregated, grouped by the encoded data field.
      
      For a full list of operations, please see the documentation for [aggregate](aggregate.html#ops).
  
    field:
      The data field to sort by.
      
      __Default value:__ If unspecified, defaults to the field specified in the outer data reference.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null -> false
            | _ -> true)
         [("field",
            (((function
               | None  ->
                   `Null
               | Some v ->
                   ((fun
                     (s :
                     string) 
                     ->
                     (`String
                     s : 
Yojson.Safe.json)))
                     v))
               x.field));
         ("op",
           (((fun
                (x :
AggregateOp.t)
                 ->
                (AggregateOp.to_yojson
                   x : 
Yojson.Safe.json)))
              x.op));
         ("order",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                     (x :
SortOrder.t)
                      ->
                     (SortOrder.to_yojson
                     x : 
Yojson.Safe.json)))
                    v))
x.order))])                                                    
  let make ?(order= None) 
    ?(field= None)  op =
    { op; field; order } 
end and
SortOrder:sig
  type t =
    [
      `Ascending
       | 
      `Descending
      ] option
  val to_yojson
    :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [ `Ascending 
    | `Descending ]
      option

  let to_yojson =
    function
    | None -> `Null
    | Some `Ascending ->
        `String
          "ascending"
    | Some `Descending ->
        `String
"descending"                                                         
end and
Spec:sig
  type t =
    [
      `HConcatSpec
      of
HConcatSpec.t
       | 
      `VConcatSpec
      of
VConcatSpec.t
       | 
      `RepeatSpec
      of
RepeatSpec.t
       | 
      `FacetedSpec
      of
FacetedSpec.t
       | 
      `LayerSpec
      of
LayerSpec.t
       | 
      `CompositeUnitSpec
      of
CompositeUnitSpec.t
      ]
  val to_yojson
    :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [
      `HConcatSpec
        of
HConcatSpec.t
         | `VConcatSpec
           of
VConcatSpec.t
            | 
      `RepeatSpec of
RepeatSpec.t 
    | `FacetedSpec
        of
FacetedSpec.t
         | `LayerSpec
           of
LayerSpec.t
            | 
      `CompositeUnitSpec
        of
CompositeUnitSpec.t
        ]

  let to_yojson =
    function
    | `HConcatSpec v
        ->
        ((fun
           (x :
HConcatSpec.t)
            ->
           (HConcatSpec.to_yojson
           x : 
Yojson.Safe.json)))
          v
    | `VConcatSpec v
        ->
        ((fun
           (x :
VConcatSpec.t)
            ->
           (VConcatSpec.to_yojson
           x : 
Yojson.Safe.json)))
          v
    | `RepeatSpec v
        ->
        ((fun
           (x :
RepeatSpec.t)
            ->
           (RepeatSpec.to_yojson
           x : 
Yojson.Safe.json)))
          v
    | `FacetedSpec v
        ->
        ((fun
           (x :
FacetedSpec.t)
            ->
           (FacetedSpec.to_yojson
           x : 
Yojson.Safe.json)))
          v
    | `LayerSpec v
        ->
        ((fun
           (x :
LayerSpec.t)
            ->
           (LayerSpec.to_yojson
           x : 
Yojson.Safe.json)))
          v
    | `CompositeUnitSpec
        v ->
        ((fun
           (x :
CompositeUnitSpec.t)
            ->
           (CompositeUnitSpec.to_yojson
           x : 
Yojson.Safe.json)))
v                                                              
end and
StackOffset:
                                                              sig
  type t =
    [ `None 
    | `Normalize
       | 
      `Center 
    | `Zero ]
  val to_yojson
    :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [ `None 
    | `Normalize
       | 
      `Center 
    | `Zero ]

  let to_yojson
    =
    function
    | `None ->
      `String
      "none"
    | `Normalize
      ->
      `String
      "normalize"
    | `Center
      ->
      `String
      "center"
    | `Zero ->
      `String
"zero"                                                                   
end and
StyleConfigIndex:
                                                                   sig
 type nonrec t =
 {
 vgMarkConfig:
VgMarkConfig.t
 option }
 val
 to_yojson
 :
 t ->
Yojson.Safe.json
 val make
 :
 ?vgMarkConfig:VgMarkConfig.t
 option ->
 unit -> t
end =
struct
 type nonrec t =
 {
 vgMarkConfig:
VgMarkConfig.t
 option }

 let to_yojson
 x =
 `Assoc
 (List.filter
 (fun
 (k,v)  ->
 match v
 with
 | 
 `Null ->
 false
 | 
 _ -> true)
 [
 ("vgMarkConfig",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
VgMarkConfig.t)
  ->
 (VgMarkConfig.to_yojson
 x : Yojson.Safe.json)))
 v))
x.vgMarkConfig))])                                                                     
 let make
 ?(vgMarkConfig=
None)  ()
 =
 {
 vgMarkConfig
 } 
end
and
Summarize:sig
  type nonrec t =
    {
    field: string ;
    as_: string ;
    aggregate: AggregateOp.t }
  val to_yojson : t -> Yojson.Safe.json
  val make : string -> string -> AggregateOp.t -> t
end =
struct
  type nonrec t = {
    field: string ;
    as_: string ;
    aggregate: AggregateOp.t }

  (** Fields
  
    field:
      The data field for which to compute aggregate function.
  
    as:
      The output field names to use for each aggregated field.
  
    aggregate:
      The aggregation operations to apply to the fields, such as sum, average or count.
      See the [full list of supported aggregation operations](https://vega.github.io/vega-lite/docs/aggregate.html#supported-aggregation-operations)
      for more information.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  -> match v with | `Null -> false | _ -> true)
         [("aggregate",
            (((fun (x : AggregateOp.t)  ->
                 (AggregateOp.to_yojson x : Yojson.Safe.json))) x.aggregate));
         ("as",
           (((fun (s : string)  -> (`String s : Yojson.Safe.json))) x.as_));
         ("field",
(((fun (s : string)  -> (`String s : Yojson.Safe.json))) x.field))])       
  let make field as_ aggregate = { aggregate; as_; field } 
end and
SummarizeTransform:sig
  type nonrec t =
    {
    summarize: Summarize.t list ;
    groupby: string list option }
  val to_yojson : t -> Yojson.Safe.json
  val make :
    ?groupby:string list option ->
Summarize.t list -> t
end =
struct
  type nonrec t =
    {
    summarize: Summarize.t list ;
    groupby: string list option }

  (** Fields
  
    summarize:
      Array of objects that define aggregate fields.
  
    groupby:
      The data fields to group by. If not specified, a single group containing all data objects will be used.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  -> match v with | `Null -> false | _ -> true)
         [("groupby",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun (l : string list)  ->
                       let yojson_of_el (s : string) =
                         (`String s : Yojson.Safe.json)  in
                       (`List (List.map yojson_of_el l) : Yojson.Safe.json)))
                     v)) x.groupby));
         ("summarize",
           (((fun (l : Summarize.t list)  ->
                let yojson_of_el (x : Summarize.t) =
                  (Summarize.to_yojson x : Yojson.Safe.json)  in
                (`List (List.map yojson_of_el l) : Yojson.Safe.json)))
x.summarize))])            
  let make ?(groupby= None)  summarize = { summarize; groupby } 
end and
TextConfig:sig
  type nonrec t =
    {
    theta: int option ;
    text: string option ;
    tension: int option ;
    strokeWidth: int option ;
    strokeOpacity: int option ;
    strokeDashOffset: int option ;
    strokeDash: int list option ;
    stroke: string option ;
    size: int option ;
    shortTimeLabels: bool option ;
    shape: string option ;
    radius: int option ;
    orient: Orient.t option ;
    opacity: int option ;
    limit: int option ;
    interpolate: Interpolate.t option ;
    fontWeight: TextConfig_FontWeight_Variant.t option ;
    fontStyle: FontStyle.t option ;
    fontSize: int option ;
    font: string option ;
    filled: bool option ;
    fillOpacity: int option ;
    fill: string option ;
    dy: int option ;
    dx: int option ;
    color: string option ;
    baseline: VerticalAlign.t option ;
    angle: int option ;
    align: string option }
  val to_yojson : t -> Yojson.Safe.json
  val make :
    ?theta:int option ->
      ?text:string option ->
        ?tension:int option ->
          ?strokeWidth:int option ->
            ?strokeOpacity:int option ->
              ?strokeDashOffset:int option ->
                ?strokeDash:int list option ->
                  ?stroke:string option ->
                    ?size:int option ->
                      ?shortTimeLabels:bool option ->
                        ?shape:string option ->
                          ?radius:int option ->
                            ?orient:Orient.t option ->
                              ?opacity:int option ->
                                ?limit:int option ->
                                  ?interpolate:Interpolate.t
                                    option ->
                                    ?fontWeight:TextConfig_FontWeight_Variant.t
                                      option ->
                                      ?fontStyle:FontStyle.t
                                        option ->
                                        ?fontSize:int
                                          option ->
                                          ?font:string
                                            option ->
                                            ?filled:bool
                                             option ->
                                             ?fillOpacity:int
                                             option ->
                                             ?fill:string
                                             option ->
                                             ?dy:int
                                             option ->
                                             ?dx:int
                                             option ->
                                             ?color:string
                                             option ->
                                             ?baseline:VerticalAlign.t
                                             option ->
                                             ?angle:int
                                             option ->
                                             ?align:string
                                             option ->
                                             unit -> t
end =
struct
  type nonrec t =
    {
    theta: int option ;
    text: string option ;
    tension: int option ;
    strokeWidth: int option ;
    strokeOpacity: int option ;
    strokeDashOffset: int option ;
    strokeDash: int list option ;
    stroke: string option ;
    size: int option ;
    shortTimeLabels: bool option ;
    shape: string option ;
    radius: int option ;
    orient: Orient.t option ;
    opacity: int option ;
    limit: int option ;
    interpolate: Interpolate.t option ;
    fontWeight: TextConfig_FontWeight_Variant.t option ;
    fontStyle: FontStyle.t option ;
    fontSize: int option ;
    font: string option ;
    filled: bool option ;
    fillOpacity: int option ;
    fill: string option ;
    dy: int option ;
    dx: int option ;
    color: string option ;
    baseline: VerticalAlign.t option ;
    angle: int option ;
    align: string option }

  (** Fields
  
    theta:
      Polar coordinate angle, in radians, of the text label from the origin determined by the `x` and `y` properties. Values for `theta` follow the same convention of `arc` mark `startAngle` and `endAngle` properties: angles are measured in radians, with `0` indicating "north".
  
    text:
      Placeholder text if the `text` channel is not specified
  
    tension:
      Depending on the interpolation type, sets the tension parameter (for line and area marks).
  
    strokeWidth:
      The stroke width, in pixels.
  
    strokeOpacity:
      The stroke opacity (value between [0,1]).
      
      __Default value:__ `1`
  
    strokeDashOffset:
      The offset (in pixels) into which to begin drawing with the stroke dash array.
  
    strokeDash:
      An array of alternating stroke, space lengths for creating dashed or dotted lines.
  
    stroke:
      Default Stroke Color.  This has higher precedence than config.color
      
      __Default value:__ (None)
  
    size:
      The pixel area each the point/circle/square.
      For example: in the case of circles, the radius is determined in part by the square root of the size value.
      
      __Default value:__ `30`
  
    shortTimeLabels:
      Whether month names and weekday names should be abbreviated.
  
    shape:
      The default symbol shape to use. One of: `"circle"` (default), `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`, or `"triangle-down"`, or a custom SVG path.
      
      __Default value:__ `"circle"`
  
    radius:
      Polar coordinate radial offset, in pixels, of the text label from the origin determined by the `x` and `y` properties.
  
    orient:
      The orientation of a non-stacked bar, tick, area, and line charts.
      The value is either horizontal (default) or vertical.
      - For bar, rule and tick, this determines whether the size of the bar and tick
      should be applied to x or y dimension.
      - For area, this property determines the orient property of the Vega output.
      - For line, this property determines the sort order of the points in the line
      if `config.sortLineBy` is not specified.
      For stacked charts, this is always determined by the orientation of the stack;
      therefore explicitly specified value will be ignored.
  
    opacity:
      The overall opacity (value between [0,1]).
      
      __Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.
  
    limit:
      The maximum length of the text mark in pixels (default 0, indicating no limit). The text value will be automatically truncated if the rendered size exceeds the limit.
  
    interpolate:
      The line interpolation method to use for line and area marks. One of the following:
      - `"linear"`: piecewise linear segments, as in a polyline.
      - `"linear-closed"`: close the linear segments to form a polygon.
      - `"step"`: alternate between horizontal and vertical segments, as in a step function.
      - `"step-before"`: alternate between vertical and horizontal segments, as in a step function.
      - `"step-after"`: alternate between horizontal and vertical segments, as in a step function.
      - `"basis"`: a B-spline, with control point duplication on the ends.
      - `"basis-open"`: an open B-spline; may not intersect the start or end.
      - `"basis-closed"`: a closed B-spline, as in a loop.
      - `"cardinal"`: a Cardinal spline, with control point duplication on the ends.
      - `"cardinal-open"`: an open Cardinal spline; may not intersect the start or end, but will intersect other control points.
      - `"cardinal-closed"`: a closed Cardinal spline, as in a loop.
      - `"bundle"`: equivalent to basis, except the tension parameter is used to straighten the spline.
      - `"monotone"`: cubic interpolation that preserves monotonicity in y.
  
    fontWeight:
      The font weight (e.g., `"bold"`).
  
    fontStyle:
      The font style (e.g., `"italic"`).
  
    fontSize:
      The font size, in pixels.
  
    font:
      The typeface to set the text in (e.g., `"Helvetica Neue"`).
  
    filled:
      Whether the mark's color should be used as fill color instead of stroke color.
      
      __Default value:__ `true` for all marks except `point` and `false` for `point`.
      
      __Applicable for:__ `bar`, `point`, `circle`, `square`, and `area` marks.
  
    fillOpacity:
      The fill opacity (value between [0,1]).
      
      __Default value:__ `1`
  
    fill:
      Default Fill Color.  This has higher precedence than config.color
      
      __Default value:__ (None)
  
    dy:
      The vertical offset in pixels (before rotation), between the text and anchor point.
  
    dx:
      The horizontal offset in pixels (before rotation), between the text and anchor point.
  
    color:
      Default color.  Note that `fill` and `stroke` have higher precedence than `color` and will override `color`.
      
      __Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`
  
    baseline:
      The vertical alignment of the text. One of `"top"`, `"middle"`, `"bottom"`.
      
      __Default value:__ `"middle"`
  
    angle:
      The rotation angle of the text, in degrees.
  
    align:
      The horizontal text alignment.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  -> match v with | `Null -> false | _ -> true)
         [("align",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun (s : string)  ->
                       (`String s : Yojson.Safe.json))) v))
               x.align));
         ("angle",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json)))
                    v)) x.angle));
         ("baseline",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : VerticalAlign.t)  ->
                      (VerticalAlign.to_yojson x : Yojson.Safe.json)))
                    v)) x.baseline));
         ("color",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json))) v))
              x.color));
         ("dx",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json)))
                    v)) x.dx));
         ("dy",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json)))
                    v)) x.dy));
         ("fill",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json))) v)) x.fill));
         ("fillOpacity",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json)))
                    v)) x.fillOpacity));
         ("filled",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (b : bool)  ->
                      (`Bool b : Yojson.Safe.json))) v)) x.filled));
         ("font",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json))) v)) x.font));
         ("fontSize",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json)))
                    v)) x.fontSize));
         ("fontStyle",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : FontStyle.t)  ->
                      (FontStyle.to_yojson x : Yojson.Safe.json)))
                    v)) x.fontStyle));
         ("fontWeight",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : TextConfig_FontWeight_Variant.t)  ->
                      (TextConfig_FontWeight_Variant.to_yojson x : 
Yojson.Safe.json))) v)) x.fontWeight));
         ("interpolate",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : Interpolate.t)  ->
                      (Interpolate.to_yojson x : Yojson.Safe.json)))
                    v)) x.interpolate));
         ("limit",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json)))
                    v)) x.limit));
         ("opacity",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json)))
                    v)) x.opacity));
         ("orient",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : Orient.t)  ->
                      (Orient.to_yojson x : Yojson.Safe.json))) v))
              x.orient));
         ("radius",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json)))
                    v)) x.radius));
         ("shape",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json))) v))
              x.shape));
         ("shortTimeLabels",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (b : bool)  ->
                      (`Bool b : Yojson.Safe.json))) v))
              x.shortTimeLabels));
         ("size",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json)))
                    v)) x.size));
         ("stroke",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json))) v))
              x.stroke));
         ("strokeDash",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (l : int list)  ->
                      let yojson_of_el (i : int) =
                        (`Int i : Yojson.Safe.json)  in
                      (`List (List.map yojson_of_el l) : 
Yojson.Safe.json))) v)) x.strokeDash));
         ("strokeDashOffset",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json)))
                    v)) x.strokeDashOffset));
         ("strokeOpacity",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json)))
                    v)) x.strokeOpacity));
         ("strokeWidth",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json)))
                    v)) x.strokeWidth));
         ("tension",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json)))
                    v)) x.tension));
         ("text",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json))) v)) x.text));
         ("theta",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json)))
v)) x.theta))])                 
  let make ?(theta= None)  ?(text= None)  ?(tension= None) 
    ?(strokeWidth= None)  ?(strokeOpacity= None) 
    ?(strokeDashOffset= None)  ?(strokeDash= None)  ?(stroke=
None)  ?(size= None)  ?(shortTimeLabels= None)  ?(shape=
None)  ?(radius= None)  ?(orient= None)  ?(opacity= None) 
    ?(limit= None)  ?(interpolate= None)  ?(fontWeight= None) 
    ?(fontStyle= None)  ?(fontSize= None)  ?(font= None) 
    ?(filled= None)  ?(fillOpacity= None)  ?(fill= None)  ?(dy=
None)  ?(dx= None)  ?(color= None)  ?(baseline= None) 
    ?(angle= None)  ?(align= None)  () =
    {
      align;
      angle;
      baseline;
      color;
      dx;
      dy;
      fill;
      fillOpacity;
      filled;
      font;
      fontSize;
      fontStyle;
      fontWeight;
      interpolate;
      limit;
      opacity;
      orient;
      radius;
      shape;
      shortTimeLabels;
      size;
      stroke;
      strokeDash;
      strokeDashOffset;
      strokeOpacity;
      strokeWidth;
      tension;
      text;
      theta
    } 
end and
TextConfig_FontWeight_Variant:sig
  type t =
    [
      `FontWeightNumber of
FontWeightNumber.t 
    | `FontWeight of
FontWeight.t ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [ `FontWeightNumber of FontWeightNumber.t 
    | `FontWeight of FontWeight.t ]

  let to_yojson =
    function
    | `FontWeightNumber v ->
        ((fun (x : FontWeightNumber.t)  ->
            (FontWeightNumber.to_yojson x : Yojson.Safe.json)))
          v
    | `FontWeight v ->
        ((fun (x : FontWeight.t)  ->
(FontWeight.to_yojson x : Yojson.Safe.json))) v                      
end and
TextFieldDef:sig
  type nonrec t =
    {
    type_: Type.t ;
    timeUnit: TimeUnit.t option ;
    format: string option ;
    field: Field.t option ;
    bin: TextFieldDef_Bin_Variant.t option ;
    aggregate: Aggregate.t option }
  val to_yojson : t -> Yojson.Safe.json
  val make :
    ?timeUnit:TimeUnit.t option ->
      ?format:string option ->
        ?field:Field.t option ->
          ?bin:TextFieldDef_Bin_Variant.t
            option ->
            ?aggregate:Aggregate.t option
              -> Type.t -> t
end =
struct
  type nonrec t =
    {
    type_: Type.t ;
    timeUnit: TimeUnit.t option ;
    format: string option ;
    field: Field.t option ;
    bin: TextFieldDef_Bin_Variant.t option ;
    aggregate: Aggregate.t option }

  (** Fields
  
    type:
      The encoded field's type of measurement. This can be either a full type
      name (`"quantitative"`, `"temporal"`, `"ordinal"`,  and `"nominal"`).
  
    timeUnit:
      Time unit for a `temporal` field  (e.g., `year`, `yearmonth`, `month`, `hour`).
      
      __Default value:__ `undefined` (None)
  
    format:
      The [formatting pattern](format.html) for a text field. If not defined, this will be determined automatically.
  
    field:
      __Required.__ A string defining the name of the field from which to pull a data value
      or an object defining iterated values from the [`repeat`](repeat.html) operator.
      
      __Note:__ `field` is not required if `aggregate` is `count`.
  
    bin:
      A flag for binning a `quantitative` field, or [an object defining binning parameters](bin.html#params).
      If `true`, default [binning parameters](bin.html) will be applied.
      
      __Default value:__ `false`
  
    aggregate:
      Aggregation function for the field
      (e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).
      
      __Default value:__ `undefined` (None)
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with | `Null -> false | _ -> true)
         [("aggregate",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun (x : Aggregate.t)  ->
                       (Aggregate.to_yojson x : 
Yojson.Safe.json))) v))
               x.aggregate));
         ("bin",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x : TextFieldDef_Bin_Variant.t) 
                      ->
                      (TextFieldDef_Bin_Variant.to_yojson
                         x : Yojson.Safe.json))) v))
              x.bin));
         ("field",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : Field.t)  ->
                      (Field.to_yojson x : Yojson.Safe.json)))
                    v)) x.field));
         ("format",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json)))
                    v)) x.format));
         ("timeUnit",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : TimeUnit.t)  ->
                      (TimeUnit.to_yojson x : Yojson.Safe.json)))
                    v)) x.timeUnit));
         ("type",
           (((fun (x : Type.t)  ->
                (Type.to_yojson x : Yojson.Safe.json)))
x.type_))])                           
  let make ?(timeUnit= None)  ?(format= None)  ?(field=
None)  ?(bin= None)  ?(aggregate= None)  type_ =
    { type_; aggregate; bin; field; format; timeUnit } 
end and
TextFieldDef_Bin_Variant:sig
  type t =
    [
      `BinParams of
BinParams.t 
    | `Boolean of bool ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [ `BinParams of BinParams.t 
    | `Boolean of bool ]

  let to_yojson =
    function
    | `BinParams v ->
        ((fun (x : BinParams.t)  ->
            (BinParams.to_yojson x : Yojson.Safe.json)))
          v
    | `Boolean v ->
        ((fun (b : bool)  ->
(`Bool b : Yojson.Safe.json))) v                                
end and
TickConfig:sig
  type nonrec t =
    {
    thickness: int option ;
    theta: int option ;
    text: string option ;
    tension: int option ;
    strokeWidth: int option ;
    strokeOpacity: int option ;
    strokeDashOffset: int option ;
    strokeDash: int list option ;
    stroke: string option ;
    size: int option ;
    shape: string option ;
    radius: int option ;
    orient: Orient.t option ;
    opacity: int option ;
    limit: int option ;
    interpolate:
Interpolate.t option ;
    fontWeight:
TickConfig_FontWeight_Variant.t
        option
      ;
    fontStyle: FontStyle.t option ;
    fontSize: int option ;
    font: string option ;
    filled: bool option ;
    fillOpacity: int option ;
    fill: string option ;
    dy: int option ;
    dx: int option ;
    color: string option ;
    baseline:
VerticalAlign.t option ;
    bandSize: int option ;
    angle: int option ;
    align:
HorizontalAlign.t option }
  val to_yojson :
    t -> Yojson.Safe.json
  val make :
    ?thickness:int option ->
      ?theta:int option ->
        ?text:string option ->
          ?tension:int option ->
            ?strokeWidth:int
              option ->
              ?strokeOpacity:int
                option ->
                ?strokeDashOffset:int
                  option ->
                  ?strokeDash:int
                    list option ->
                    ?stroke:string
                      option ->
                      ?size:int
                        option ->
                        ?shape:string
                         option ->
                         ?radius:int
                         option ->
                         ?orient:Orient.t
                         option ->
                         ?opacity:int
                         option ->
                         ?limit:int
                         option ->
                         ?interpolate:Interpolate.t
                         option ->
                         ?fontWeight:TickConfig_FontWeight_Variant.t
                         option ->
                         ?fontStyle:FontStyle.t
                         option ->
                         ?fontSize:int
                         option ->
                         ?font:string
                         option ->
                         ?filled:bool
                         option ->
                         ?fillOpacity:int
                         option ->
                         ?fill:string
                         option ->
                         ?dy:int
                         option ->
                         ?dx:int
                         option ->
                         ?color:string
                         option ->
                         ?baseline:VerticalAlign.t
                         option ->
                         ?bandSize:int
                         option ->
                         ?angle:int
                         option ->
                         ?align:HorizontalAlign.t
                         option ->
                         unit -> t
end =
struct
  type nonrec t =
    {
    thickness: int option ;
    theta: int option ;
    text: string option ;
    tension: int option ;
    strokeWidth: int option ;
    strokeOpacity: int option ;
    strokeDashOffset: int option ;
    strokeDash: int list option ;
    stroke: string option ;
    size: int option ;
    shape: string option ;
    radius: int option ;
    orient: Orient.t option ;
    opacity: int option ;
    limit: int option ;
    interpolate: Interpolate.t option ;
    fontWeight:
TickConfig_FontWeight_Variant.t option ;
    fontStyle: FontStyle.t option ;
    fontSize: int option ;
    font: string option ;
    filled: bool option ;
    fillOpacity: int option ;
    fill: string option ;
    dy: int option ;
    dx: int option ;
    color: string option ;
    baseline: VerticalAlign.t option ;
    bandSize: int option ;
    angle: int option ;
    align: HorizontalAlign.t option }

  (** Fields
  
    thickness:
      Thickness of the tick mark.
      
      __Default value:__  `1`
  
    theta:
      Polar coordinate angle, in radians, of the text label from the origin determined by the `x` and `y` properties. Values for `theta` follow the same convention of `arc` mark `startAngle` and `endAngle` properties: angles are measured in radians, with `0` indicating "north".
  
    text:
      Placeholder text if the `text` channel is not specified
  
    tension:
      Depending on the interpolation type, sets the tension parameter (for line and area marks).
  
    strokeWidth:
      The stroke width, in pixels.
  
    strokeOpacity:
      The stroke opacity (value between [0,1]).
      
      __Default value:__ `1`
  
    strokeDashOffset:
      The offset (in pixels) into which to begin drawing with the stroke dash array.
  
    strokeDash:
      An array of alternating stroke, space lengths for creating dashed or dotted lines.
  
    stroke:
      Default Stroke Color.  This has higher precedence than config.color
      
      __Default value:__ (None)
  
    size:
      The pixel area each the point/circle/square.
      For example: in the case of circles, the radius is determined in part by the square root of the size value.
      
      __Default value:__ `30`
  
    shape:
      The default symbol shape to use. One of: `"circle"` (default), `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`, or `"triangle-down"`, or a custom SVG path.
      
      __Default value:__ `"circle"`
  
    radius:
      Polar coordinate radial offset, in pixels, of the text label from the origin determined by the `x` and `y` properties.
  
    orient:
      The orientation of a non-stacked bar, tick, area, and line charts.
      The value is either horizontal (default) or vertical.
      - For bar, rule and tick, this determines whether the size of the bar and tick
      should be applied to x or y dimension.
      - For area, this property determines the orient property of the Vega output.
      - For line, this property determines the sort order of the points in the line
      if `config.sortLineBy` is not specified.
      For stacked charts, this is always determined by the orientation of the stack;
      therefore explicitly specified value will be ignored.
  
    opacity:
      The overall opacity (value between [0,1]).
      
      __Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.
  
    limit:
      The maximum length of the text mark in pixels (default 0, indicating no limit). The text value will be automatically truncated if the rendered size exceeds the limit.
  
    interpolate:
      The line interpolation method to use for line and area marks. One of the following:
      - `"linear"`: piecewise linear segments, as in a polyline.
      - `"linear-closed"`: close the linear segments to form a polygon.
      - `"step"`: alternate between horizontal and vertical segments, as in a step function.
      - `"step-before"`: alternate between vertical and horizontal segments, as in a step function.
      - `"step-after"`: alternate between horizontal and vertical segments, as in a step function.
      - `"basis"`: a B-spline, with control point duplication on the ends.
      - `"basis-open"`: an open B-spline; may not intersect the start or end.
      - `"basis-closed"`: a closed B-spline, as in a loop.
      - `"cardinal"`: a Cardinal spline, with control point duplication on the ends.
      - `"cardinal-open"`: an open Cardinal spline; may not intersect the start or end, but will intersect other control points.
      - `"cardinal-closed"`: a closed Cardinal spline, as in a loop.
      - `"bundle"`: equivalent to basis, except the tension parameter is used to straighten the spline.
      - `"monotone"`: cubic interpolation that preserves monotonicity in y.
  
    fontWeight:
      The font weight (e.g., `"bold"`).
  
    fontStyle:
      The font style (e.g., `"italic"`).
  
    fontSize:
      The font size, in pixels.
  
    font:
      The typeface to set the text in (e.g., `"Helvetica Neue"`).
  
    filled:
      Whether the mark's color should be used as fill color instead of stroke color.
      
      __Default value:__ `true` for all marks except `point` and `false` for `point`.
      
      __Applicable for:__ `bar`, `point`, `circle`, `square`, and `area` marks.
  
    fillOpacity:
      The fill opacity (value between [0,1]).
      
      __Default value:__ `1`
  
    fill:
      Default Fill Color.  This has higher precedence than config.color
      
      __Default value:__ (None)
  
    dy:
      The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.
  
    dx:
      The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.
  
    color:
      Default color.  Note that `fill` and `stroke` have higher precedence than `color` and will override `color`.
      
      __Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`
  
    baseline:
      The vertical alignment of the text. One of `"top"`, `"middle"`, `"bottom"`.
      
      __Default value:__ `"middle"`
  
    bandSize:
      The width of the ticks.
      
      __Default value:__  2/3 of rangeStep.
  
    angle:
      The rotation angle of the text, in degrees.
  
    align:
      The horizontal alignment of the text. One of `"left"`, `"right"`, `"center"`.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null -> false
            | _ -> true)
         [("align",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun
                       (x :
HorizontalAlign.t)
                        ->
                       (HorizontalAlign.to_yojson
                          x : Yojson.Safe.json)))
                     v)) x.align));
         ("angle",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.angle));
         ("bandSize",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.bandSize));
         ("baseline",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : VerticalAlign.t)
                       ->
                      (VerticalAlign.to_yojson
                         x : Yojson.Safe.json)))
                    v)) x.baseline));
         ("color",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json)))
                    v)) x.color));
         ("dx",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.dx));
         ("dy",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.dy));
         ("fill",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json)))
                    v)) x.fill));
         ("fillOpacity",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.fillOpacity));
         ("filled",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (b : bool)  ->
                      (`Bool b : Yojson.Safe.json)))
                    v)) x.filled));
         ("font",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json)))
                    v)) x.font));
         ("fontSize",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.fontSize));
         ("fontStyle",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : FontStyle.t)  ->
                      (FontStyle.to_yojson x : 
Yojson.Safe.json))) v))
              x.fontStyle));
         ("fontWeight",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
TickConfig_FontWeight_Variant.t)
                       ->
                      (TickConfig_FontWeight_Variant.to_yojson
                         x : Yojson.Safe.json)))
                    v)) x.fontWeight));
         ("interpolate",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : Interpolate.t) 
                      ->
                      (Interpolate.to_yojson
                         x : Yojson.Safe.json)))
                    v)) x.interpolate));
         ("limit",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.limit));
         ("opacity",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.opacity));
         ("orient",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : Orient.t)  ->
                      (Orient.to_yojson x : 
Yojson.Safe.json))) v))
              x.orient));
         ("radius",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.radius));
         ("shape",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json)))
                    v)) x.shape));
         ("size",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.size));
         ("stroke",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json)))
                    v)) x.stroke));
         ("strokeDash",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (l : int list)  ->
                      let yojson_of_el
                        (i : int) =
                        (`Int i : Yojson.Safe.json)
                         in
                      (`List
                         (List.map
                            yojson_of_el l) : 
Yojson.Safe.json))) v))
              x.strokeDash));
         ("strokeDashOffset",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.strokeDashOffset));
         ("strokeOpacity",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.strokeOpacity));
         ("strokeWidth",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.strokeWidth));
         ("tension",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.tension));
         ("text",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json)))
                    v)) x.text));
         ("theta",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.theta));
         ("thickness",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
v)) x.thickness))])                                     
  let make ?(thickness= None)  ?(theta= None)
     ?(text= None)  ?(tension= None) 
    ?(strokeWidth= None)  ?(strokeOpacity=
None)  ?(strokeDashOffset= None) 
    ?(strokeDash= None)  ?(stroke= None) 
    ?(size= None)  ?(shape= None)  ?(radius=
None)  ?(orient= None)  ?(opacity= None) 
    ?(limit= None)  ?(interpolate= None) 
    ?(fontWeight= None)  ?(fontStyle= None) 
    ?(fontSize= None)  ?(font= None) 
    ?(filled= None)  ?(fillOpacity= None) 
    ?(fill= None)  ?(dy= None)  ?(dx= None) 
    ?(color= None)  ?(baseline= None) 
    ?(bandSize= None)  ?(angle= None) 
    ?(align= None)  () =
    {
      align;
      angle;
      bandSize;
      baseline;
      color;
      dx;
      dy;
      fill;
      fillOpacity;
      filled;
      font;
      fontSize;
      fontStyle;
      fontWeight;
      interpolate;
      limit;
      opacity;
      orient;
      radius;
      shape;
      size;
      stroke;
      strokeDash;
      strokeDashOffset;
      strokeOpacity;
      strokeWidth;
      tension;
      text;
      theta;
      thickness
    } 
end and
TickConfig_FontWeight_Variant:sig
 type t =
 [
 `FontWeightNumber
 of
FontWeightNumber.t
  | 
 `FontWeight
 of
FontWeight.t
 ]
 val
 to_yojson
 :
 t ->
Yojson.Safe.json
end =
struct
  type t =
    [
      `FontWeightNumber of
FontWeightNumber.t 
    | `FontWeight of FontWeight.t ]

  let to_yojson =
    function
    | `FontWeightNumber v ->
        ((fun (x : FontWeightNumber.t) 
            ->
            (FontWeightNumber.to_yojson
               x : Yojson.Safe.json))) v
    | `FontWeight v ->
        ((fun (x : FontWeight.t)  ->
            (FontWeight.to_yojson x : 
Yojson.Safe.json))) v                                          
end and
TimeUnit:sig
  type t =
    [
      `MultiTimeUnit of
MultiTimeUnit.t 
    | `SingleTimeUnit of
SingleTimeUnit.t ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [
      `MultiTimeUnit of
MultiTimeUnit.t 
    | `SingleTimeUnit of
SingleTimeUnit.t ]

  let to_yojson =
    function
    | `MultiTimeUnit v ->
        ((fun (x : MultiTimeUnit.t)
             ->
            (MultiTimeUnit.to_yojson
               x : Yojson.Safe.json)))
          v
    | `SingleTimeUnit v ->
        ((fun
            (x : SingleTimeUnit.t) 
            ->
            (SingleTimeUnit.to_yojson
               x : Yojson.Safe.json)))
v                                               
end and
TimeUnitTransform:sig
  type nonrec t =
   {
   timeUnit:
TimeUnit.t
   ;
   field:
   string ;
   as_:
   string }
  val
   to_yojson
   :
   t ->
Yojson.Safe.json
  val make :
TimeUnit.t
   ->
   string ->
   string ->
   t
end =
struct
  type nonrec t =
    {
    timeUnit: TimeUnit.t ;
    field: string ;
    as_: string }

  (** Fields
  
    timeUnit:
      The timeUnit.
  
    field:
      The data field to apply time unit.
  
    as:
      The output field to write the timeUnit value.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null -> false
            | _ -> true)
         [("as",
            (((fun
                 (s : string) 
                 ->
                 (`String s : 
Yojson.Safe.json)))
               x.as_));
         ("field",
           (((fun (s : string)
                 ->
                (`String s : 
Yojson.Safe.json)))
              x.field));
         ("timeUnit",
           (((fun
                (x :
TimeUnit.t)
                 ->
                (TimeUnit.to_yojson
                   x : 
Yojson.Safe.json)))
x.timeUnit))])                                                    
  let make timeUnit field as_
    = { as_; field; timeUnit } 
end and
TitleBase:sig
  type nonrec t =
    {
    style:
TitleBase_Style_Variant.t
      option ;
    orient:
TitleOrient.t
      option ;
    offset:
      int
      option ;
    anchor:
Anchor.t
      option }
  val to_yojson
    :
    t ->
Yojson.Safe.json
  val make :
    ?style:TitleBase_Style_Variant.t
      option ->
      ?orient:TitleOrient.t
      option ->
      ?offset:int
      option ->
      ?anchor:Anchor.t
      option ->
      unit -> t
end =
struct
  type nonrec t =
    {
    style:
TitleBase_Style_Variant.t
        option
      ;
    orient:
TitleOrient.t
        option
      ;
    offset: int option ;
    anchor:
Anchor.t option }

  (** Fields
  
    style:
      A [mark style property](config.html#style) to apply to the title text mark.
      
      __Default value:__ `"group-title"`.
  
    orient:
      The orientation of the title relative to the chart. One of `"top"` (the default), `"bottom"`, `"left"`, or `"right"`.
  
    offset:
      The orthogonal offset in pixels by which to displace the title from its position along the edge of the chart.
  
    anchor:
      The anchor position for placing the title. One of `"start"`, `"middle"`, or `"end"`. For example, with an orientation of top these anchor positions map to a left-, center-, or right-aligned title.
      
      __Default value:__ `"middle"` for [single](spec.html) and [layered](layer.html) views.
      `"start"` for other composite views.
      
      __Note:__ [For now](https://github.com/vega/vega-lite/issues/2875), `anchor` is only customizable only for [single](spec.html) and [layered](layer.html) views.  For other composite views, `anchor` is always `"start"`.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null ->
                false
            | _ -> true)
         [("anchor",
            (((function
               | 
None  ->
                `Null
               | 
Some v ->
                ((fun
                (x :
Anchor.t)
                 ->
                (Anchor.to_yojson
                x : Yojson.Safe.json)))
                v))
               x.anchor));
         ("offset",
           (((function
              | None  ->
                `Null
              | Some v ->
                ((fun
                (i : int)
                 ->
                (`Int i : 
Yojson.Safe.json)))
                v))
              x.offset));
         ("orient",
           (((function
              | None  ->
                `Null
              | Some v ->
                ((fun
                (x :
TitleOrient.t)
                 ->
                (TitleOrient.to_yojson
                x : Yojson.Safe.json)))
                v))
              x.orient));
         ("style",
           (((function
              | None  ->
                `Null
              | Some v ->
                ((fun
                (x :
TitleBase_Style_Variant.t)
                 ->
                (TitleBase_Style_Variant.to_yojson
                x : Yojson.Safe.json)))
                v))
x.style))])                                                         
  let make ?(style= None)
     ?(orient= None) 
    ?(offset= None) 
    ?(anchor= None)  () =
    {
      anchor;
      offset;
      orient;
      style
    } 
end and
TitleBase_Style_Variant:
                                                         sig
  type t =
    [
      `String_List
        of
        string list 
    | `String of
        string ]
  val to_yojson :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [
      `String_List
        of
        string list 
    | `String of
        string ]

  let to_yojson =
    function
    | `String_List v
        ->
        ((fun
           (l :
           string
           list)  ->
           let yojson_of_el
           (s :
           string) =
           (`String
           s : 
Yojson.Safe.json)
            in
           (`List
           (List.map
           yojson_of_el
           l) : 
Yojson.Safe.json)))
          v
    | `String v ->
        ((fun
           (s :
           string) 
           ->
           (`String
           s : 
Yojson.Safe.json)))
v                                                              
end and
TitleOrient:
                                                              sig
  type t =
    [ `Right 
    | `Left 
    | `Bottom 
    | `Top ]
  val to_yojson
    :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [ `Right 
    | `Left 
    | `Bottom 
    | `Top ]

  let to_yojson
    =
    function
    | `Right ->
      `String
      "right"
    | `Left ->
      `String
      "left"
    | `Bottom
      ->
      `String
      "bottom"
    | `Top ->
      `String
"top"                                                                   
end and
TitleParams:
                                                                   sig
 type nonrec t =
 {
 text:
 string ;
 style:
TitleParams_Style_Variant.t
 option ;
 orient:
TitleOrient.t
 option ;
 offset:
 int
 option ;
 anchor:
Anchor.t
 option }
 val
 to_yojson
 :
 t ->
Yojson.Safe.json
 val make
 :
 ?style:TitleParams_Style_Variant.t
 option ->
 ?orient:TitleOrient.t
 option ->
 ?offset:int
 option ->
 ?anchor:Anchor.t
 option ->
 string ->
 t
end =
struct
 type nonrec t =
 {
 text:
 string ;
 style:
TitleParams_Style_Variant.t
 option ;
 orient:
TitleOrient.t
 option ;
 offset:
 int
 option ;
 anchor:
Anchor.t
 option }

  (** Fields
  
    text:
      The title text.
  
    style:
      A [mark style property](config.html#style) to apply to the title text mark.
      
      __Default value:__ `"group-title"`.
  
    orient:
      The orientation of the title relative to the chart. One of `"top"` (the default), `"bottom"`, `"left"`, or `"right"`.
  
    offset:
      The orthogonal offset in pixels by which to displace the title from its position along the edge of the chart.
  
    anchor:
      The anchor position for placing the title. One of `"start"`, `"middle"`, or `"end"`. For example, with an orientation of top these anchor positions map to a left-, center-, or right-aligned title.
      
      __Default value:__ `"middle"` for [single](spec.html) and [layered](layer.html) views.
      `"start"` for other composite views.
      
      __Note:__ [For now](https://github.com/vega/vega-lite/issues/2875), `anchor` is only customizable only for [single](spec.html) and [layered](layer.html) views.  For other composite views, `anchor` is always `"start"`.
  *)
 let to_yojson
 x =
 `Assoc
 (List.filter
 (fun
 (k,v)  ->
 match v
 with
 | 
 `Null ->
 false
 | 
 _ -> true)
 [
 ("anchor",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
Anchor.t)
  ->
 (Anchor.to_yojson
 x : Yojson.Safe.json)))
 v))
 x.anchor));
 ("offset",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
 x.offset));
 ("orient",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
TitleOrient.t)
  ->
 (TitleOrient.to_yojson
 x : Yojson.Safe.json)))
 v))
 x.orient));
 ("style",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
TitleParams_Style_Variant.t)
  ->
 (TitleParams_Style_Variant.to_yojson
 x : Yojson.Safe.json)))
 v))
 x.style));
 ("text",
 (((fun
 (s :
 string) 
 ->
 (`String
 s : Yojson.Safe.json)))
x.text))])                                                                     
 let make
 ?(style=
None) 
 ?(orient=
None) 
 ?(offset=
None) 
 ?(anchor=
None) 
 text =
 {
 text;
 anchor;
 offset;
 orient;
 style
 } 
end
and
TitleParams_Style_Variant:sig
  type t =
    [ `String_List of string list 
    | `String of string ]
  val to_yojson : t -> Yojson.Safe.json
end =
struct
  type t = [ `String_List of string list  | `String of string ]

  let to_yojson =
    function
    | `String_List v ->
        ((fun (l : string list)  ->
            let yojson_of_el (s : string) = (`String s : Yojson.Safe.json)
               in
            (`List (List.map yojson_of_el l) : Yojson.Safe.json))) v
    | `String v ->
((fun (s : string)  -> (`String s : Yojson.Safe.json))) v       
end and
TopLevelExtendedSpec:sig
  type t =
    [
      `TopLevelHConcatSpec of
TopLevelHConcatSpec.t 
    | `TopLevelVConcatSpec of
TopLevelVConcatSpec.t 
    | `TopLevelRepeatSpec of TopLevelRepeatSpec.t 
    | `TopLevelFacetedSpec of
TopLevelFacetedSpec.t 
    | `TopLevelLayerSpec of TopLevelLayerSpec.t 
    | `TopLevelFacetedUnitSpec of
TopLevelFacetedUnitSpec.t ]
  val to_yojson : t -> Yojson.Safe.json
end =
struct
  type t =
    [ `TopLevelHConcatSpec of TopLevelHConcatSpec.t 
    | `TopLevelVConcatSpec of TopLevelVConcatSpec.t 
    | `TopLevelRepeatSpec of TopLevelRepeatSpec.t 
    | `TopLevelFacetedSpec of TopLevelFacetedSpec.t 
    | `TopLevelLayerSpec of TopLevelLayerSpec.t 
    | `TopLevelFacetedUnitSpec of TopLevelFacetedUnitSpec.t ]

  let to_yojson =
    function
    | `TopLevelHConcatSpec v ->
        ((fun (x : TopLevelHConcatSpec.t)  ->
            (TopLevelHConcatSpec.to_yojson x : Yojson.Safe.json))) v
    | `TopLevelVConcatSpec v ->
        ((fun (x : TopLevelVConcatSpec.t)  ->
            (TopLevelVConcatSpec.to_yojson x : Yojson.Safe.json))) v
    | `TopLevelRepeatSpec v ->
        ((fun (x : TopLevelRepeatSpec.t)  ->
            (TopLevelRepeatSpec.to_yojson x : Yojson.Safe.json))) v
    | `TopLevelFacetedSpec v ->
        ((fun (x : TopLevelFacetedSpec.t)  ->
            (TopLevelFacetedSpec.to_yojson x : Yojson.Safe.json))) v
    | `TopLevelLayerSpec v ->
        ((fun (x : TopLevelLayerSpec.t)  ->
            (TopLevelLayerSpec.to_yojson x : Yojson.Safe.json))) v
    | `TopLevelFacetedUnitSpec v ->
        ((fun (x : TopLevelFacetedUnitSpec.t)  ->
            (TopLevelFacetedUnitSpec.to_yojson x : Yojson.Safe.json)))
v            
end and
TopLevelFacetedSpec:sig
  type nonrec t =
    {
    transform: Transform.t list option ;
    title:
TopLevelFacetedSpec_Title_Variant.t
        option
      ;
    spec: TopLevelFacetedSpec_Spec_Variant.t ;
    resolve: Resolve.t option ;
    padding: Padding.t option ;
    name: string option ;
    facet: Facet.t ;
    description: string option ;
    data: Data.t option ;
    config: Config.t option ;
    background: string option ;
    autoResize: bool option ;
    schema: string option }
  val to_yojson : t -> Yojson.Safe.json
  val make :
    ?transform:Transform.t list option ->
      ?title:TopLevelFacetedSpec_Title_Variant.t
        option ->
        ?resolve:Resolve.t option ->
          ?padding:Padding.t option ->
            ?name:string option ->
              ?description:string option ->
                ?data:Data.t option ->
                  ?config:Config.t option ->
                    ?background:string option
                      ->
                      ?autoResize:bool option
                        ->
                        ?schema:string option
                          ->
TopLevelFacetedSpec_Spec_Variant.t
                            -> Facet.t -> t
end =
struct
  type nonrec t =
    {
    transform: Transform.t list option ;
    title: TopLevelFacetedSpec_Title_Variant.t option ;
    spec: TopLevelFacetedSpec_Spec_Variant.t ;
    resolve: Resolve.t option ;
    padding: Padding.t option ;
    name: string option ;
    facet: Facet.t ;
    description: string option ;
    data: Data.t option ;
    config: Config.t option ;
    background: string option ;
    autoResize: bool option ;
    schema: string option }

  (** Fields
  
    transform:
      An array of data transformations such as filter and new field calculation.
  
    title:
      Title for the plot.
  
    padding:
      The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle.  If a number, specifies padding for all sides.
      If an object, the value should have the format `{"left": 5, "top": 5, "right": 5, "bottom": 5}` to specify padding for each side of the visualization.
      
      __Default value__: `5`
  
    name:
      Name of the visualization for later reference.
  
    description:
      An optional description of this mark for commenting purpose.
  
    data:
      An object describing the data source
  
    config:
      Vega-Lite configuration object.  This property can only be defined at the top-level of a specification.
  
    background:
      CSS color property to use as the background of visualization.
      
      __Default value:__ none (transparent)
  
    autoResize:
      Resize is a boolean indicating if autosize layout should be re-calculated on every update.
      
      __Default value__: `false`
  
    $schema:
      URL to [JSON schema](http://json-schema.org/) for a Vega-Lite specification. Unless you have a reason to change this, use `https://vega.github.io/schema/vega-lite/v2.json`. Setting the `$schema` property allows automatic validation and autocomplete in editors that support JSON schema.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  -> match v with | `Null -> false | _ -> true)
         [("$schema",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun (s : string)  ->
                       (`String s : Yojson.Safe.json))) v))
               x.schema));
         ("autoResize",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (b : bool)  ->
                      (`Bool b : Yojson.Safe.json))) v))
              x.autoResize));
         ("background",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json))) v))
              x.background));
         ("config",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : Config.t)  ->
                      (Config.to_yojson x : Yojson.Safe.json))) v))
              x.config));
         ("data",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : Data.t)  ->
                      (Data.to_yojson x : Yojson.Safe.json))) v))
              x.data));
         ("description",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json))) v))
              x.description));
         ("facet",
           (((fun (x : Facet.t)  ->
                (Facet.to_yojson x : Yojson.Safe.json))) x.facet));
         ("name",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json))) v)) x.name));
         ("padding",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : Padding.t)  ->
                      (Padding.to_yojson x : Yojson.Safe.json)))
                    v)) x.padding));
         ("resolve",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : Resolve.t)  ->
                      (Resolve.to_yojson x : Yojson.Safe.json)))
                    v)) x.resolve));
         ("spec",
           (((fun (x : TopLevelFacetedSpec_Spec_Variant.t)  ->
                (TopLevelFacetedSpec_Spec_Variant.to_yojson x : 
Yojson.Safe.json))) x.spec));
         ("title",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : TopLevelFacetedSpec_Title_Variant.t)
                       ->
                      (TopLevelFacetedSpec_Title_Variant.to_yojson
                         x : Yojson.Safe.json))) v)) x.title));
         ("transform",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (l : Transform.t list)  ->
                      let yojson_of_el (x : Transform.t) =
                        (Transform.to_yojson x : Yojson.Safe.json)
                         in
                      (`List (List.map yojson_of_el l) : 
Yojson.Safe.json))) v)) x.transform))])                 
  let make ?(transform= None)  ?(title= None)  ?(resolve= None) 
    ?(padding= None)  ?(name= None)  ?(description= None) 
    ?(data= None)  ?(config= None)  ?(background= None) 
    ?(autoResize= None)  ?(schema=
Some "https://vega.github.io/schema/vega-lite/v2.json")  spec
    facet =
    {
      facet;
      spec;
      schema;
      autoResize;
      background;
      config;
      data;
      description;
      name;
      padding;
      resolve;
      title;
      transform
    } 
end and
TopLevelFacetedSpec_Spec_Variant:sig
  type t =
    [
      `CompositeUnitSpec of
CompositeUnitSpec.t 
    | `LayerSpec of
LayerSpec.t ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [ `CompositeUnitSpec of CompositeUnitSpec.t 
    | `LayerSpec of LayerSpec.t ]

  let to_yojson =
    function
    | `CompositeUnitSpec v ->
        ((fun (x : CompositeUnitSpec.t)  ->
            (CompositeUnitSpec.to_yojson x : Yojson.Safe.json)))
          v
    | `LayerSpec v ->
        ((fun (x : LayerSpec.t)  ->
(LayerSpec.to_yojson x : Yojson.Safe.json))) v                      
end and
TopLevelFacetedSpec_Title_Variant:sig
  type t =
    [
      `TitleParams of
TitleParams.t 
    | `String of
        string ]
  val to_yojson :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [ `TitleParams of TitleParams.t 
    | `String of string ]

  let to_yojson =
    function
    | `TitleParams v ->
        ((fun (x : TitleParams.t)  ->
            (TitleParams.to_yojson x : Yojson.Safe.json)))
          v
    | `String v ->
        ((fun (s : string)  ->
(`String s : Yojson.Safe.json))) v                           
end and
TopLevelFacetedUnitSpec:sig
  type nonrec t =
    {
    width: int option ;
    transform:
Transform.t list
        option
      ;
    title:
TopLevelFacetedUnitSpec_Title_Variant.t
        option
      ;
    selection:
TopLevelFacetedUnitSpec_Selection_Record.t
        option
      ;
    padding:
Padding.t option ;
    name: string option ;
    mark: AnyMark.t ;
    height: int option ;
    encoding:
EncodingWithFacet.t ;
    description:
      string option ;
    data: Data.t option ;
    config:
Config.t option ;
    background:
      string option ;
    autoResize:
      bool option ;
    schema: string option }
  val to_yojson :
    t -> Yojson.Safe.json
  val make :
    ?width:int option ->
      ?transform:Transform.t
        list option ->
        ?title:TopLevelFacetedUnitSpec_Title_Variant.t
          option ->
          ?selection:TopLevelFacetedUnitSpec_Selection_Record.t
            option ->
            ?padding:Padding.t
              option ->
              ?name:string
                option ->
                ?height:int
                 option ->
                 ?description:string
                 option ->
                 ?data:Data.t
                 option ->
                 ?config:Config.t
                 option ->
                 ?background:string
                 option ->
                 ?autoResize:bool
                 option ->
                 ?schema:string
                 option ->
AnyMark.t
                 ->
EncodingWithFacet.t
                 -> 
                 t
end =
struct
  type nonrec t =
    {
    width: int option ;
    transform: Transform.t list option ;
    title:
TopLevelFacetedUnitSpec_Title_Variant.t
        option
      ;
    selection:
TopLevelFacetedUnitSpec_Selection_Record.t
        option
      ;
    padding: Padding.t option ;
    name: string option ;
    mark: AnyMark.t ;
    height: int option ;
    encoding: EncodingWithFacet.t ;
    description: string option ;
    data: Data.t option ;
    config: Config.t option ;
    background: string option ;
    autoResize: bool option ;
    schema: string option }

  (** Fields
  
    width:
      The width of a visualization.
      
      __Default value:__ This will be determined by the following rules:
      
      - For x-axis with a continuous (non-ordinal) scale, the width will be the value of [`config.view.width`](spec.html#config).
      - For x-axis with an ordinal scale: if [`rangeStep`](scale.html#ordinal) is a numeric value (default), the width is determined by the value of `rangeStep` and the cardinality of the field mapped to x-channel.   Otherwise, if the `rangeStep` is `null`, the width will be the value of [`config.view.width`](spec.html#config).
      - If no field is mapped to `x` channel, the `width` will be the value of [`config.scale.textXRangeStep`](size.html#default-width-and-height) for `text` mark and the value of `rangeStep` for other marks.
      
      __Note:__ For plot with `row` and `column` channels, this represents the width of a single view.
      
      __See also:__ The documentation for [width and height](size.html) contains more examples.
  
    transform:
      An array of data transformations such as filter and new field calculation.
  
    title:
      Title for the plot.
  
    selection:
      A key-value mapping between selection names and definitions.
  
    padding:
      The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle.  If a number, specifies padding for all sides.
      If an object, the value should have the format `{"left": 5, "top": 5, "right": 5, "bottom": 5}` to specify padding for each side of the visualization.
      
      __Default value__: `5`
  
    name:
      Name of the visualization for later reference.
  
    mark:
      A string describing the mark type (one of `"bar"`, `"circle"`, `"square"`, `"tick"`, `"line"`,
      `"area"`, `"point"`, `"rule"`, and `"text"`) or a [mark definition object](mark.html#mark-def).
  
    height:
      The height of a visualization.
      
      __Default value:__
      - For y-axis with a continuous (non-ordinal) scale, the height will be the value of [`config.view.height`](spec.html#config).
      - For y-axis with an ordinal scale: if [`rangeStep`](scale.html#ordinal) is a numeric value (default), the height is determined by the value of `rangeStep` and the cardinality of the field mapped to y-channel.   Otherwise, if the `rangeStep` is `null`, the height will be the value of [`config.view.height`](spec.html#config).
      - If no field is mapped to `x` channel, the `height` will be the value of `rangeStep`.
      
      __Note__: For plot with `row` and `column` channels, this represents the height of a single view.
      
      __See also:__ The documentation for [width and height](size.html) contains more examples.
  
    encoding:
      A key-value mapping between encoding channels and definition of fields.
  
    description:
      An optional description of this mark for commenting purpose.
  
    data:
      An object describing the data source
  
    config:
      Vega-Lite configuration object.  This property can only be defined at the top-level of a specification.
  
    background:
      CSS color property to use as the background of visualization.
      
      __Default value:__ none (transparent)
  
    autoResize:
      Resize is a boolean indicating if autosize layout should be re-calculated on every update.
      
      __Default value__: `false`
  
    $schema:
      URL to [JSON schema](http://json-schema.org/) for a Vega-Lite specification. Unless you have a reason to change this, use `https://vega.github.io/schema/vega-lite/v2.json`. Setting the `$schema` property allows automatic validation and autocomplete in editors that support JSON schema.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null -> false
            | _ -> true)
         [("$schema",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun (s : string)  ->
                       (`String s : Yojson.Safe.json)))
                     v)) x.schema));
         ("autoResize",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (b : bool)  ->
                      (`Bool b : Yojson.Safe.json)))
                    v)) x.autoResize));
         ("background",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json)))
                    v)) x.background));
         ("config",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : Config.t)  ->
                      (Config.to_yojson x : 
Yojson.Safe.json))) v))
              x.config));
         ("data",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : Data.t)  ->
                      (Data.to_yojson x : 
Yojson.Safe.json))) v))
              x.data));
         ("description",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json)))
                    v)) x.description));
         ("encoding",
           (((fun (x : EncodingWithFacet.t)  ->
                (EncodingWithFacet.to_yojson x : 
Yojson.Safe.json))) x.encoding));
         ("height",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.height));
         ("mark",
           (((fun (x : AnyMark.t)  ->
                (AnyMark.to_yojson x : Yojson.Safe.json)))
              x.mark));
         ("name",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json)))
                    v)) x.name));
         ("padding",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : Padding.t)  ->
                      (Padding.to_yojson x : 
Yojson.Safe.json))) v))
              x.padding));
         ("selection",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
TopLevelFacetedUnitSpec_Selection_Record.t)
                       ->
                      (TopLevelFacetedUnitSpec_Selection_Record.to_yojson
                         x : Yojson.Safe.json))) v))
              x.selection));
         ("title",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
TopLevelFacetedUnitSpec_Title_Variant.t)
                       ->
                      (TopLevelFacetedUnitSpec_Title_Variant.to_yojson
                         x : Yojson.Safe.json))) v))
              x.title));
         ("transform",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (l : Transform.t list)  ->
                      let yojson_of_el
                        (x : Transform.t) =
                        (Transform.to_yojson x : 
Yojson.Safe.json)  in
                      (`List
                         (List.map yojson_of_el l) : 
Yojson.Safe.json))) v))
              x.transform));
         ("width",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
v)) x.width))])                                
  let make ?(width= None)  ?(transform= None) 
    ?(title= None)  ?(selection= None)  ?(padding=
None)  ?(name= None)  ?(height= None) 
    ?(description= None)  ?(data= None)  ?(config=
None)  ?(background= None)  ?(autoResize=
None)  ?(schema=
Some
      "https://vega.github.io/schema/vega-lite/v2.json")
     mark encoding =
    {
      encoding;
      mark;
      schema;
      autoResize;
      background;
      config;
      data;
      description;
      height;
      name;
      padding;
      selection;
      title;
      transform;
      width
    } 
end and
TopLevelFacetedUnitSpec_Selection_Record:
                                sig
  type nonrec t =
    {
    selectionDef: SelectionDef.t option }
  val to_yojson : t -> Yojson.Safe.json
  val make :
    ?selectionDef:SelectionDef.t option ->
      unit -> t
end =
struct
  type nonrec t =
    {
    selectionDef: SelectionDef.t option }

  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null -> false
            | _ -> true)
         [("selectionDef",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun (x : SelectionDef.t)
                        ->
                       (SelectionDef.to_yojson
                          x : Yojson.Safe.json)))
v)) x.selectionDef))])                                     
  let make ?(selectionDef= None)  () =
    { selectionDef } 
end and
TopLevelFacetedUnitSpec_Title_Variant:
                                     sig
  type t =
    [ `TitleParams of TitleParams.t 
    | `String of string ]
  val to_yojson : t -> Yojson.Safe.json
end =
struct
  type t =
    [ `TitleParams of TitleParams.t 
    | `String of string ]

  let to_yojson =
    function
    | `TitleParams v ->
        ((fun (x : TitleParams.t)  ->
            (TitleParams.to_yojson x : 
Yojson.Safe.json))) v
    | `String v ->
        ((fun (s : string)  ->
            (`String s : Yojson.Safe.json)))
v                                          
end and
TopLevelHConcatSpec:sig
  type nonrec t =
    {
    transform:
Transform.t
      list
      option ;
    title:
TopLevelHConcatSpec_Title_Variant.t
      option ;
    resolve:
Resolve.t
      option ;
    padding:
Padding.t
      option ;
    name:
      string
      option ;
    hconcat:
Spec.t
      list ;
    description:
      string
      option ;
    data:
Data.t
      option ;
    config:
Config.t
      option ;
    background:
      string
      option ;
    autoResize:
      bool
      option ;
    schema:
      string
      option }
  val to_yojson
    :
    t ->
Yojson.Safe.json
  val make :
    ?transform:Transform.t
      list
      option ->
      ?title:TopLevelHConcatSpec_Title_Variant.t
      option ->
      ?resolve:Resolve.t
      option ->
      ?padding:Padding.t
      option ->
      ?name:string
      option ->
      ?description:string
      option ->
      ?data:Data.t
      option ->
      ?config:Config.t
      option ->
      ?background:string
      option ->
      ?autoResize:bool
      option ->
      ?schema:string
      option ->
Spec.t
      list -> 
      t
end =
struct
  type nonrec t =
    {
    transform:
Transform.t list option ;
    title:
TopLevelHConcatSpec_Title_Variant.t
        option
      ;
    resolve: Resolve.t option ;
    padding: Padding.t option ;
    name: string option ;
    hconcat: Spec.t list ;
    description: string option ;
    data: Data.t option ;
    config: Config.t option ;
    background: string option ;
    autoResize: bool option ;
    schema: string option }

  (** Fields
  
    transform:
      An array of data transformations such as filter and new field calculation.
  
    title:
      Title for the plot.
  
    padding:
      The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle.  If a number, specifies padding for all sides.
      If an object, the value should have the format `{"left": 5, "top": 5, "right": 5, "bottom": 5}` to specify padding for each side of the visualization.
      
      __Default value__: `5`
  
    name:
      Name of the visualization for later reference.
  
    description:
      An optional description of this mark for commenting purpose.
  
    data:
      An object describing the data source
  
    config:
      Vega-Lite configuration object.  This property can only be defined at the top-level of a specification.
  
    background:
      CSS color property to use as the background of visualization.
      
      __Default value:__ none (transparent)
  
    autoResize:
      Resize is a boolean indicating if autosize layout should be re-calculated on every update.
      
      __Default value__: `false`
  
    $schema:
      URL to [JSON schema](http://json-schema.org/) for a Vega-Lite specification. Unless you have a reason to change this, use `https://vega.github.io/schema/vega-lite/v2.json`. Setting the `$schema` property allows automatic validation and autocomplete in editors that support JSON schema.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null -> false
            | _ -> true)
         [("$schema",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun
                       (s : string)
                        ->
                       (`String s : 
Yojson.Safe.json)))
                     v)) x.schema));
         ("autoResize",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (b : bool) 
                      ->
                      (`Bool b : 
Yojson.Safe.json)))
                    v))
              x.autoResize));
         ("background",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (s : string) 
                      ->
                      (`String s : 
Yojson.Safe.json)))
                    v))
              x.background));
         ("config",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
Config.t)
                       ->
                      (Config.to_yojson
                         x : 
Yojson.Safe.json)))
                    v)) x.config));
         ("data",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x : Data.t) 
                      ->
                      (Data.to_yojson
                         x : 
Yojson.Safe.json)))
                    v)) x.data));
         ("description",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (s : string) 
                      ->
                      (`String s : 
Yojson.Safe.json)))
                    v))
              x.description));
         ("hconcat",
           (((fun (l : Spec.t list)
                 ->
                let yojson_of_el
                  (x : Spec.t) =
                  (Spec.to_yojson x : 
Yojson.Safe.json)
                   in
                (`List
                   (List.map
                      yojson_of_el
                      l) : 
Yojson.Safe.json)))
              x.hconcat));
         ("name",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (s : string) 
                      ->
                      (`String s : 
Yojson.Safe.json)))
                    v)) x.name));
         ("padding",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
Padding.t)
                       ->
                      (Padding.to_yojson
                         x : 
Yojson.Safe.json)))
                    v)) x.padding));
         ("resolve",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
Resolve.t)
                       ->
                      (Resolve.to_yojson
                         x : 
Yojson.Safe.json)))
                    v)) x.resolve));
         ("title",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
TopLevelHConcatSpec_Title_Variant.t)
                       ->
                      (TopLevelHConcatSpec_Title_Variant.to_yojson
                         x : 
Yojson.Safe.json)))
                    v)) x.title));
         ("transform",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (l :
Transform.t
                          list)
                       ->
                      let yojson_of_el
                        (x :
Transform.t)
                        =
                        (Transform.to_yojson
                          x : 
Yojson.Safe.json)
                         in
                      (`List
                         (List.map
                          yojson_of_el
                          l) : 
Yojson.Safe.json)))
v)) x.transform))])                                               
  let make ?(transform= None) 
    ?(title= None)  ?(resolve=
None)  ?(padding= None) 
    ?(name= None)  ?(description=
None)  ?(data= None)  ?(config=
None)  ?(background= None) 
    ?(autoResize= None)  ?(schema=
Some
      "https://vega.github.io/schema/vega-lite/v2.json")
     hconcat =
    {
      hconcat;
      schema;
      autoResize;
      background;
      config;
      data;
      description;
      name;
      padding;
      resolve;
      title;
      transform
    } 
end and
TopLevelHConcatSpec_Title_Variant:
                                               sig
  type t =
    [
      `TitleParams of
TitleParams.t 
    | `String of string ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [
      `TitleParams of
TitleParams.t 
    | `String of string ]

  let to_yojson =
    function
    | `TitleParams v ->
        ((fun
            (x :
TitleParams.t)
             ->
            (TitleParams.to_yojson
               x : Yojson.Safe.json)))
          v
    | `String v ->
        ((fun (s : string)  ->
            (`String s : 
Yojson.Safe.json)))
v                                                    
end and
TopLevelLayerSpec:
                                                    sig
  type nonrec t =
    {
    width: int option ;
    transform:
Transform.t list
        option
      ;
    title:
TopLevelLayerSpec_Title_Variant.t
        option
      ;
    resolve:
Resolve.t option ;
    padding:
Padding.t option ;
    name: string option ;
    layer:
TopLevelLayerSpec_Layer_Variant.t
        list
      ;
    height: int option ;
    description:
      string option ;
    data: Data.t option ;
    config:
Config.t option ;
    background:
      string option ;
    autoResize:
      bool option ;
    schema: string option }
  val to_yojson :
    t -> Yojson.Safe.json
  val make :
    ?width:int option ->
      ?transform:Transform.t
        list option ->
        ?title:TopLevelLayerSpec_Title_Variant.t
          option ->
          ?resolve:Resolve.t
            option ->
            ?padding:Padding.t
              option ->
              ?name:string
                option ->
                ?height:int
                option ->
                ?description:string
                option ->
                ?data:Data.t
                option ->
                ?config:Config.t
                option ->
                ?background:string
                option ->
                ?autoResize:bool
                option ->
                ?schema:string
                option ->
TopLevelLayerSpec_Layer_Variant.t
                list -> 
                t
end =
struct
  type nonrec t =
    {
    width: int option ;
    transform:
Transform.t list
        option
      ;
    title:
TopLevelLayerSpec_Title_Variant.t
        option
      ;
    resolve:
Resolve.t option ;
    padding:
Padding.t option ;
    name: string option ;
    layer:
TopLevelLayerSpec_Layer_Variant.t
        list
      ;
    height: int option ;
    description:
      string option ;
    data: Data.t option ;
    config:
Config.t option ;
    background:
      string option ;
    autoResize:
      bool option ;
    schema: string option }

  (** Fields
  
    width:
      The width of a visualization.
      
      __Default value:__ This will be determined by the following rules:
      
      - For x-axis with a continuous (non-ordinal) scale, the width will be the value of [`config.view.width`](spec.html#config).
      - For x-axis with an ordinal scale: if [`rangeStep`](scale.html#ordinal) is a numeric value (default), the width is determined by the value of `rangeStep` and the cardinality of the field mapped to x-channel.   Otherwise, if the `rangeStep` is `null`, the width will be the value of [`config.view.width`](spec.html#config).
      - If no field is mapped to `x` channel, the `width` will be the value of [`config.scale.textXRangeStep`](size.html#default-width-and-height) for `text` mark and the value of `rangeStep` for other marks.
      
      __Note:__ For plot with `row` and `column` channels, this represents the width of a single view.
      
      __See also:__ The documentation for [width and height](size.html) contains more examples.
  
    transform:
      An array of data transformations such as filter and new field calculation.
  
    title:
      Title for the plot.
  
    padding:
      The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle.  If a number, specifies padding for all sides.
      If an object, the value should have the format `{"left": 5, "top": 5, "right": 5, "bottom": 5}` to specify padding for each side of the visualization.
      
      __Default value__: `5`
  
    name:
      Name of the visualization for later reference.
  
    layer:
      Layer or single view specifications to be layered.
      
      __Note__: Specifications inside `layer` cannot use `row` and `column` channels as layering facet specifications is not allowed.
  
    height:
      The height of a visualization.
      
      __Default value:__
      - For y-axis with a continuous (non-ordinal) scale, the height will be the value of [`config.view.height`](spec.html#config).
      - For y-axis with an ordinal scale: if [`rangeStep`](scale.html#ordinal) is a numeric value (default), the height is determined by the value of `rangeStep` and the cardinality of the field mapped to y-channel.   Otherwise, if the `rangeStep` is `null`, the height will be the value of [`config.view.height`](spec.html#config).
      - If no field is mapped to `x` channel, the `height` will be the value of `rangeStep`.
      
      __Note__: For plot with `row` and `column` channels, this represents the height of a single view.
      
      __See also:__ The documentation for [width and height](size.html) contains more examples.
  
    description:
      An optional description of this mark for commenting purpose.
  
    data:
      An object describing the data source
  
    config:
      Vega-Lite configuration object.  This property can only be defined at the top-level of a specification.
  
    background:
      CSS color property to use as the background of visualization.
      
      __Default value:__ none (transparent)
  
    autoResize:
      Resize is a boolean indicating if autosize layout should be re-calculated on every update.
      
      __Default value__: `false`
  
    $schema:
      URL to [JSON schema](http://json-schema.org/) for a Vega-Lite specification. Unless you have a reason to change this, use `https://vega.github.io/schema/vega-lite/v2.json`. Setting the `$schema` property allows automatic validation and autocomplete in editors that support JSON schema.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null ->
                false
            | _ -> true)
         [("$schema",
            (((function
               | 
None  ->
                `Null
               | 
Some v ->
                ((fun
                (s :
                string) 
                ->
                (`String
                s : Yojson.Safe.json)))
                v))
               x.schema));
         ("autoResize",
           (((function
              | None  ->
                `Null
              | Some v ->
                ((fun
                (b :
                bool)  ->
                (`Bool b : 
Yojson.Safe.json)))
                v))
              x.autoResize));
         ("background",
           (((function
              | None  ->
                `Null
              | Some v ->
                ((fun
                (s :
                string) 
                ->
                (`String
                s : Yojson.Safe.json)))
                v))
              x.background));
         ("config",
           (((function
              | None  ->
                `Null
              | Some v ->
                ((fun
                (x :
Config.t)
                 ->
                (Config.to_yojson
                x : Yojson.Safe.json)))
                v))
              x.config));
         ("data",
           (((function
              | None  ->
                `Null
              | Some v ->
                ((fun
                (x :
Data.t) 
                ->
                (Data.to_yojson
                x : Yojson.Safe.json)))
                v))
              x.data));
         ("description",
           (((function
              | None  ->
                `Null
              | Some v ->
                ((fun
                (s :
                string) 
                ->
                (`String
                s : Yojson.Safe.json)))
                v))
              x.description));
         ("height",
           (((function
              | None  ->
                `Null
              | Some v ->
                ((fun
                (i : int)
                 ->
                (`Int i : 
Yojson.Safe.json)))
                v))
              x.height));
         ("layer",
           (((fun
                (l :
TopLevelLayerSpec_Layer_Variant.t
                list)  ->
                let yojson_of_el
                (x :
TopLevelLayerSpec_Layer_Variant.t)
                =
                (TopLevelLayerSpec_Layer_Variant.to_yojson
                x : 
Yojson.Safe.json)
                 in
                (`List
                (List.map
                yojson_of_el
                l) : 
Yojson.Safe.json)))
              x.layer));
         ("name",
           (((function
              | None  ->
                `Null
              | Some v ->
                ((fun
                (s :
                string) 
                ->
                (`String
                s : Yojson.Safe.json)))
                v))
              x.name));
         ("padding",
           (((function
              | None  ->
                `Null
              | Some v ->
                ((fun
                (x :
Padding.t)
                 ->
                (Padding.to_yojson
                x : Yojson.Safe.json)))
                v))
              x.padding));
         ("resolve",
           (((function
              | None  ->
                `Null
              | Some v ->
                ((fun
                (x :
Resolve.t)
                 ->
                (Resolve.to_yojson
                x : Yojson.Safe.json)))
                v))
              x.resolve));
         ("title",
           (((function
              | None  ->
                `Null
              | Some v ->
                ((fun
                (x :
TopLevelLayerSpec_Title_Variant.t)
                 ->
                (TopLevelLayerSpec_Title_Variant.to_yojson
                x : Yojson.Safe.json)))
                v))
              x.title));
         ("transform",
           (((function
              | None  ->
                `Null
              | Some v ->
                ((fun
                (l :
Transform.t
                list)  ->
                let yojson_of_el
                (x :
Transform.t)
                =
                (Transform.to_yojson
                x : 
Yojson.Safe.json)
                 in
                (`List
                (List.map
                yojson_of_el
                l) : 
Yojson.Safe.json)))
                v))
              x.transform));
         ("width",
           (((function
              | None  ->
                `Null
              | Some v ->
                ((fun
                (i : int)
                 ->
                (`Int i : 
Yojson.Safe.json)))
                v))
x.width))])                                                         
  let make ?(width= None)
     ?(transform= None) 
    ?(title= None) 
    ?(resolve= None) 
    ?(padding= None) 
    ?(name= None) 
    ?(height= None) 
    ?(description= None) 
    ?(data= None) 
    ?(config= None) 
    ?(background= None) 
    ?(autoResize= None) 
    ?(schema=
Some
      "https://vega.github.io/schema/vega-lite/v2.json")
     layer =
    {
      layer;
      schema;
      autoResize;
      background;
      config;
      data;
      description;
      height;
      name;
      padding;
      resolve;
      title;
      transform;
      width
    } 
end and
TopLevelLayerSpec_Layer_Variant:
                                                         sig
  type t =
    [
      `CompositeUnitSpec
        of
CompositeUnitSpec.t
         | `LayerSpec
           of
LayerSpec.t
           ]
  val to_yojson :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [
      `CompositeUnitSpec
        of
CompositeUnitSpec.t
         | `LayerSpec
           of
LayerSpec.t
           ]

  let to_yojson =
    function
    | `CompositeUnitSpec
        v ->
        ((fun
           (x :
CompositeUnitSpec.t)
            ->
           (CompositeUnitSpec.to_yojson
           x : 
Yojson.Safe.json)))
          v
    | `LayerSpec v
        ->
        ((fun
           (x :
LayerSpec.t)
            ->
           (LayerSpec.to_yojson
           x : 
Yojson.Safe.json)))
v                                                              
end and
TopLevelLayerSpec_Title_Variant:
                                                              sig
  type t =
    [
      `TitleParams
      of
TitleParams.t
       | 
      `String
      of 
      string ]
  val to_yojson
    :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [
      `TitleParams
      of
TitleParams.t
       | 
      `String
      of 
      string ]

  let to_yojson
    =
    function
    | `TitleParams
      v ->
      ((fun
      (x :
TitleParams.t)
       ->
      (TitleParams.to_yojson
      x : Yojson.Safe.json)))
      v
    | `String v
      ->
      ((fun
      (s :
      string) 
      ->
      (`String
      s : Yojson.Safe.json)))
v                                                                   
end and
TopLevelProperties:
                                                                   sig
 type nonrec t =
 {
 padding:
Padding.t
 option ;
 background:
 string
 option ;
 autoResize:
 bool
 option }
 val
 to_yojson
 :
 t ->
Yojson.Safe.json
 val make
 :
 ?padding:Padding.t
 option ->
 ?background:string
 option ->
 ?autoResize:bool
 option ->
 unit -> t
end =
struct
 type nonrec t =
 {
 padding:
Padding.t
 option ;
 background:
 string
 option ;
 autoResize:
 bool
 option }

  (** Fields
  
    padding:
      The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle.  If a number, specifies padding for all sides.
      If an object, the value should have the format `{"left": 5, "top": 5, "right": 5, "bottom": 5}` to specify padding for each side of the visualization.
      
      __Default value__: `5`
  
    background:
      CSS color property to use as the background of visualization.
      
      __Default value:__ none (transparent)
  
    autoResize:
      Resize is a boolean indicating if autosize layout should be re-calculated on every update.
      
      __Default value__: `false`
  *)
 let to_yojson
 x =
 `Assoc
 (List.filter
 (fun
 (k,v)  ->
 match v
 with
 | 
 `Null ->
 false
 | 
 _ -> true)
 [
 ("autoResize",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (b :
 bool)  ->
 (`Bool b : 
Yojson.Safe.json)))
 v))
 x.autoResize));
 ("background",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (s :
 string) 
 ->
 (`String
 s : Yojson.Safe.json)))
 v))
 x.background));
 ("padding",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
Padding.t)
  ->
 (Padding.to_yojson
 x : Yojson.Safe.json)))
 v))
x.padding))])                                                                     
 let make
 ?(padding=
None) 
 ?(background=
None) 
 ?(autoResize=
None)  ()
 =
 {
 autoResize;
 background;
 padding
 } 
end
and
TopLevelRepeatSpec:sig
  type nonrec t =
    {
    transform: Transform.t list option ;
    title: TopLevelRepeatSpec_Title_Variant.t option ;
    spec: Spec.t ;
    resolve: Resolve.t option ;
    repeat: Repeat.t ;
    padding: Padding.t option ;
    name: string option ;
    description: string option ;
    data: Data.t option ;
    config: Config.t option ;
    background: string option ;
    autoResize: bool option ;
    schema: string option }
  val to_yojson : t -> Yojson.Safe.json
  val make :
    ?transform:Transform.t list option ->
      ?title:TopLevelRepeatSpec_Title_Variant.t option
        ->
        ?resolve:Resolve.t option ->
          ?padding:Padding.t option ->
            ?name:string option ->
              ?description:string option ->
                ?data:Data.t option ->
                  ?config:Config.t option ->
                    ?background:string option ->
                      ?autoResize:bool option ->
                        ?schema:string option ->
Spec.t -> Repeat.t -> t
end =
struct
  type nonrec t =
    {
    transform: Transform.t list option ;
    title: TopLevelRepeatSpec_Title_Variant.t option ;
    spec: Spec.t ;
    resolve: Resolve.t option ;
    repeat: Repeat.t ;
    padding: Padding.t option ;
    name: string option ;
    description: string option ;
    data: Data.t option ;
    config: Config.t option ;
    background: string option ;
    autoResize: bool option ;
    schema: string option }

  (** Fields
  
    transform:
      An array of data transformations such as filter and new field calculation.
  
    title:
      Title for the plot.
  
    padding:
      The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle.  If a number, specifies padding for all sides.
      If an object, the value should have the format `{"left": 5, "top": 5, "right": 5, "bottom": 5}` to specify padding for each side of the visualization.
      
      __Default value__: `5`
  
    name:
      Name of the visualization for later reference.
  
    description:
      An optional description of this mark for commenting purpose.
  
    data:
      An object describing the data source
  
    config:
      Vega-Lite configuration object.  This property can only be defined at the top-level of a specification.
  
    background:
      CSS color property to use as the background of visualization.
      
      __Default value:__ none (transparent)
  
    autoResize:
      Resize is a boolean indicating if autosize layout should be re-calculated on every update.
      
      __Default value__: `false`
  
    $schema:
      URL to [JSON schema](http://json-schema.org/) for a Vega-Lite specification. Unless you have a reason to change this, use `https://vega.github.io/schema/vega-lite/v2.json`. Setting the `$schema` property allows automatic validation and autocomplete in editors that support JSON schema.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  -> match v with | `Null -> false | _ -> true)
         [("$schema",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun (s : string)  -> (`String s : Yojson.Safe.json)))
                     v)) x.schema));
         ("autoResize",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (b : bool)  -> (`Bool b : Yojson.Safe.json))) v))
              x.autoResize));
         ("background",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  -> (`String s : Yojson.Safe.json))) v))
              x.background));
         ("config",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : Config.t)  ->
                      (Config.to_yojson x : Yojson.Safe.json))) v))
              x.config));
         ("data",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : Data.t)  ->
                      (Data.to_yojson x : Yojson.Safe.json))) v)) x.data));
         ("description",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  -> (`String s : Yojson.Safe.json))) v))
              x.description));
         ("name",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  -> (`String s : Yojson.Safe.json))) v))
              x.name));
         ("padding",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : Padding.t)  ->
                      (Padding.to_yojson x : Yojson.Safe.json))) v))
              x.padding));
         ("repeat",
           (((fun (x : Repeat.t)  ->
                (Repeat.to_yojson x : Yojson.Safe.json))) x.repeat));
         ("resolve",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : Resolve.t)  ->
                      (Resolve.to_yojson x : Yojson.Safe.json))) v))
              x.resolve));
         ("spec",
           (((fun (x : Spec.t)  -> (Spec.to_yojson x : Yojson.Safe.json)))
              x.spec));
         ("title",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : TopLevelRepeatSpec_Title_Variant.t)  ->
                      (TopLevelRepeatSpec_Title_Variant.to_yojson x : 
Yojson.Safe.json))) v)) x.title));
         ("transform",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (l : Transform.t list)  ->
                      let yojson_of_el (x : Transform.t) =
                        (Transform.to_yojson x : Yojson.Safe.json)  in
                      (`List (List.map yojson_of_el l) : Yojson.Safe.json)))
v)) x.transform))])       
  let make ?(transform= None)  ?(title= None)  ?(resolve= None)  ?(padding=
None)  ?(name= None)  ?(description= None)  ?(data= None)  ?(config=
None)  ?(background= None)  ?(autoResize= None)  ?(schema=
Some "https://vega.github.io/schema/vega-lite/v2.json")  spec repeat =
    {
      repeat;
      spec;
      schema;
      autoResize;
      background;
      config;
      data;
      description;
      name;
      padding;
      resolve;
      title;
      transform
    } 
end and
TopLevelRepeatSpec_Title_Variant:sig
  type t =
    [ `TitleParams of TitleParams.t 
    | `String of string ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t = [ `TitleParams of TitleParams.t  | `String of string ]

  let to_yojson =
    function
    | `TitleParams v ->
        ((fun (x : TitleParams.t)  ->
            (TitleParams.to_yojson x : Yojson.Safe.json))) v
    | `String v ->
((fun (s : string)  -> (`String s : Yojson.Safe.json))) v            
end and
TopLevelVConcatSpec:sig
  type nonrec t =
    {
    vconcat: Spec.t list ;
    transform: Transform.t list option ;
    title:
TopLevelVConcatSpec_Title_Variant.t
        option
      ;
    resolve: Resolve.t option ;
    padding: Padding.t option ;
    name: string option ;
    description: string option ;
    data: Data.t option ;
    config: Config.t option ;
    background: string option ;
    autoResize: bool option ;
    schema: string option }
  val to_yojson : t -> Yojson.Safe.json
  val make :
    ?transform:Transform.t list option ->
      ?title:TopLevelVConcatSpec_Title_Variant.t
        option ->
        ?resolve:Resolve.t option ->
          ?padding:Padding.t option ->
            ?name:string option ->
              ?description:string option ->
                ?data:Data.t option ->
                  ?config:Config.t option ->
                    ?background:string option
                      ->
                      ?autoResize:bool option
                        ->
                        ?schema:string option
                          -> Spec.t list -> t
end =
struct
  type nonrec t =
    {
    vconcat: Spec.t list ;
    transform: Transform.t list option ;
    title: TopLevelVConcatSpec_Title_Variant.t option ;
    resolve: Resolve.t option ;
    padding: Padding.t option ;
    name: string option ;
    description: string option ;
    data: Data.t option ;
    config: Config.t option ;
    background: string option ;
    autoResize: bool option ;
    schema: string option }

  (** Fields
  
    transform:
      An array of data transformations such as filter and new field calculation.
  
    title:
      Title for the plot.
  
    padding:
      The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle.  If a number, specifies padding for all sides.
      If an object, the value should have the format `{"left": 5, "top": 5, "right": 5, "bottom": 5}` to specify padding for each side of the visualization.
      
      __Default value__: `5`
  
    name:
      Name of the visualization for later reference.
  
    description:
      An optional description of this mark for commenting purpose.
  
    data:
      An object describing the data source
  
    config:
      Vega-Lite configuration object.  This property can only be defined at the top-level of a specification.
  
    background:
      CSS color property to use as the background of visualization.
      
      __Default value:__ none (transparent)
  
    autoResize:
      Resize is a boolean indicating if autosize layout should be re-calculated on every update.
      
      __Default value__: `false`
  
    $schema:
      URL to [JSON schema](http://json-schema.org/) for a Vega-Lite specification. Unless you have a reason to change this, use `https://vega.github.io/schema/vega-lite/v2.json`. Setting the `$schema` property allows automatic validation and autocomplete in editors that support JSON schema.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  -> match v with | `Null -> false | _ -> true)
         [("$schema",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun (s : string)  ->
                       (`String s : Yojson.Safe.json))) v))
               x.schema));
         ("autoResize",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (b : bool)  ->
                      (`Bool b : Yojson.Safe.json))) v))
              x.autoResize));
         ("background",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json))) v))
              x.background));
         ("config",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : Config.t)  ->
                      (Config.to_yojson x : Yojson.Safe.json))) v))
              x.config));
         ("data",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : Data.t)  ->
                      (Data.to_yojson x : Yojson.Safe.json))) v))
              x.data));
         ("description",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json))) v))
              x.description));
         ("name",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json))) v)) x.name));
         ("padding",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : Padding.t)  ->
                      (Padding.to_yojson x : Yojson.Safe.json)))
                    v)) x.padding));
         ("resolve",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : Resolve.t)  ->
                      (Resolve.to_yojson x : Yojson.Safe.json)))
                    v)) x.resolve));
         ("title",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : TopLevelVConcatSpec_Title_Variant.t)
                       ->
                      (TopLevelVConcatSpec_Title_Variant.to_yojson
                         x : Yojson.Safe.json))) v)) x.title));
         ("transform",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (l : Transform.t list)  ->
                      let yojson_of_el (x : Transform.t) =
                        (Transform.to_yojson x : Yojson.Safe.json)
                         in
                      (`List (List.map yojson_of_el l) : 
Yojson.Safe.json))) v)) x.transform));
         ("vconcat",
           (((fun (l : Spec.t list)  ->
                let yojson_of_el (x : Spec.t) =
                  (Spec.to_yojson x : Yojson.Safe.json)  in
                (`List (List.map yojson_of_el l) : Yojson.Safe.json)))
x.vconcat))])                 
  let make ?(transform= None)  ?(title= None)  ?(resolve= None) 
    ?(padding= None)  ?(name= None)  ?(description= None) 
    ?(data= None)  ?(config= None)  ?(background= None) 
    ?(autoResize= None)  ?(schema=
Some "https://vega.github.io/schema/vega-lite/v2.json") 
    vconcat =
    {
      vconcat;
      schema;
      autoResize;
      background;
      config;
      data;
      description;
      name;
      padding;
      resolve;
      title;
      transform
    } 
end and
TopLevelVConcatSpec_Title_Variant:sig
  type t =
    [
      `TitleParams of
TitleParams.t 
    | `String of string ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [ `TitleParams of TitleParams.t  | `String of string ]

  let to_yojson =
    function
    | `TitleParams v ->
        ((fun (x : TitleParams.t)  ->
            (TitleParams.to_yojson x : Yojson.Safe.json))) v
    | `String v ->
        ((fun (s : string)  ->
(`String s : Yojson.Safe.json))) v                      
end and
TopoDataFormat:sig
  type nonrec t =
    {
    type_: string option ;
    parse:
TopoDataFormat_Parse_Variant.t
        option
      ;
    mesh: string option ;
    feature: string option }
  val to_yojson : t -> Yojson.Safe.json
  val make :
    ?type_:string option ->
      ?parse:TopoDataFormat_Parse_Variant.t
        option ->
        ?mesh:string option ->
          ?feature:string option ->
            unit -> t
end =
struct
  type nonrec t =
    {
    type_: string option ;
    parse: TopoDataFormat_Parse_Variant.t option ;
    mesh: string option ;
    feature: string option }

  (** Fields
  
    type:
      Type of input data: `"json"`, `"csv"`, `"tsv"`.
      The default format type is determined by the extension of the file URL.
      If no extension is detected, `"json"` will be used by default.
  
    parse:
      If set to auto (the default), perform automatic type inference to determine the desired data types.
      Alternatively, a parsing directive object can be provided for explicit data types. Each property of the object corresponds to a field name, and the value to the desired data type (one of `"number"`, `"boolean"` or `"date"`).
      For example, `"parse": {"modified_on": "date"}` parses the `modified_on` field in each input record a Date value.
      
      For `"date"`, we parse data based using Javascript's [`Date.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse).
      For Specific date formats can be provided (e.g., `{foo: 'date:"%m%d%Y"'}`), using the [d3-time-format syntax](https://github.com/d3/d3-time-format#locale_format). UTC date format parsing is supported similarly (e.g., `{foo: 'utc:"%m%d%Y"'}`). See more about [UTC time](timeunit.html#utc)
  
    mesh:
      The name of the TopoJSON object set to convert to mesh.
      Similar to the `feature` option, `mesh` extracts a named TopoJSON object set.
        Unlike the `feature` option, the corresponding geo data is returned as a single, unified mesh instance, not as individual GeoJSON features.
      Extracting a mesh is useful for more efficiently drawing borders or other geographic elements that you do not need to associate with specific regions such as individual countries, states or counties.
  
    feature:
      The name of the TopoJSON object set to convert to a GeoJSON feature collection.
      For example, in a map of the world, there may be an object set named `"countries"`.
      Using the feature property, we can extract this set and generate a GeoJSON feature object for each country.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with | `Null -> false | _ -> true)
         [("feature",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun (s : string)  ->
                       (`String s : Yojson.Safe.json)))
                     v)) x.feature));
         ("mesh",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json)))
                    v)) x.mesh));
         ("parse",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
TopoDataFormat_Parse_Variant.t)
                       ->
                      (TopoDataFormat_Parse_Variant.to_yojson
                         x : Yojson.Safe.json))) v))
              x.parse));
         ("type",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json)))
v)) x.type_))])                           
  let make ?(type_= None)  ?(parse= None)  ?(mesh=
None)  ?(feature= None)  () =
    { feature; mesh; parse; type_ } 
end and
TopoDataFormat_Parse_Variant:sig
  type t =
    [
      `JSON of
Yojson.Safe.json
         | `Auto ]
  val to_yojson :
    t ->
Yojson.Safe.json
end =
struct
  type t = [ `JSON of Yojson.Safe.json  | `Auto ]

  let to_yojson =
    function
    | `JSON v ->
        ((fun (j : Yojson.Safe.json)  ->
            (j : Yojson.Safe.json))) v
    | `Auto -> `String "auto" 
end and
Transform:sig
  type t =
    [
      `SummarizeTransform of
SummarizeTransform.t 
    | `TimeUnitTransform of
TimeUnitTransform.t 
    | `BinTransform of
BinTransform.t 
    | `LookupTransform of
LookupTransform.t 
    | `CalculateTransform of
CalculateTransform.t 
    | `FilterTransform of
FilterTransform.t ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [
      `SummarizeTransform of
SummarizeTransform.t 
    | `TimeUnitTransform of
TimeUnitTransform.t 
    | `BinTransform of BinTransform.t 
    | `LookupTransform of LookupTransform.t 
    | `CalculateTransform of
CalculateTransform.t 
    | `FilterTransform of FilterTransform.t ]

  let to_yojson =
    function
    | `SummarizeTransform v ->
        ((fun (x : SummarizeTransform.t)  ->
            (SummarizeTransform.to_yojson x : 
Yojson.Safe.json))) v
    | `TimeUnitTransform v ->
        ((fun (x : TimeUnitTransform.t)  ->
            (TimeUnitTransform.to_yojson x : 
Yojson.Safe.json))) v
    | `BinTransform v ->
        ((fun (x : BinTransform.t)  ->
            (BinTransform.to_yojson x : 
Yojson.Safe.json))) v
    | `LookupTransform v ->
        ((fun (x : LookupTransform.t)  ->
            (LookupTransform.to_yojson x : 
Yojson.Safe.json))) v
    | `CalculateTransform v ->
        ((fun (x : CalculateTransform.t)  ->
            (CalculateTransform.to_yojson x : 
Yojson.Safe.json))) v
    | `FilterTransform v ->
        ((fun (x : FilterTransform.t)  ->
            (FilterTransform.to_yojson x : 
Yojson.Safe.json))) v                                     
end and
Type:sig
  type t =
    [ `Nominal  | `Temporal 
    | `Ordinal  | `Quantitative ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [ `Nominal  | `Temporal  | `Ordinal 
    | `Quantitative ]

  (** Constants and utilities for data type  
   Data type based on level of measurement 
  *)
  let to_yojson =
    function
    | `Nominal -> `String "nominal"
    | `Temporal -> `String "temporal"
    | `Ordinal -> `String "ordinal"
    | `Quantitative ->
`String "quantitative"                                          
end and
UrlData:sig
  type nonrec t =
    {
    url: string ;
    format:
DataFormat.t option }
  val to_yojson :
    t -> Yojson.Safe.json
  val make :
    ?format:DataFormat.t
      option -> string -> t
end =
struct
  type nonrec t =
    {
    url: string ;
    format: DataFormat.t option }

  (** Fields
  
    url:
      An URL from which to load the data set. Use the `format.type` property
      to ensure the loaded data is correctly parsed.
  
    format:
      An object that specifies the format for parsing the data file.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null -> false
            | _ -> true)
         [("format",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun
                       (x :
DataFormat.t)
                        ->
                       (DataFormat.to_yojson
                          x : 
Yojson.Safe.json)))
                     v)) x.format));
         ("url",
           (((fun (s : string)  ->
                (`String s : 
Yojson.Safe.json)))
x.url))])                                               
  let make ?(format= None)  url =
    { url; format } 
end and
UtcMultiTimeUnit:sig
  type t =
    [
    `Utcsecondsmilliseconds
     | 
    `Utcminutesseconds
     | 
    `Utchoursminutesseconds
     | 
    `Utchoursminutes
     | 
    `Utcmonthdate
     | 
    `Utcquartermonth
     | 
    `Utcyearmonthdatehoursminutesseconds
     | 
    `Utcyearmonthdatehoursminutes
     | 
    `Utcyearmonthdatehours
     | 
    `Utcyearmonthdate
     | 
    `Utcyearmonth
     | 
    `Utcyearquartermonth
     | 
    `Utcyearquarter
    ]
  val
    to_yojson
    :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [ `Utcsecondsmilliseconds 
    | `Utcminutesseconds 
    | `Utchoursminutesseconds 
    | `Utchoursminutes 
    | `Utcmonthdate 
    | `Utcquartermonth 
    | `Utcyearmonthdatehoursminutesseconds
         | `Utcyearmonthdatehoursminutes
              | `Utcyearmonthdatehours
                   | `Utcyearmonthdate
                      | 
      `Utcyearmonth 
    | `Utcyearquartermonth 
    | `Utcyearquarter ]

  let to_yojson =
    function
    | `Utcsecondsmilliseconds
        ->
        `String
          "utcsecondsmilliseconds"
    | `Utcminutesseconds ->
        `String
          "utcminutesseconds"
    | `Utchoursminutesseconds
        ->
        `String
          "utchoursminutesseconds"
    | `Utchoursminutes ->
        `String
          "utchoursminutes"
    | `Utcmonthdate ->
        `String "utcmonthdate"
    | `Utcquartermonth ->
        `String
          "utcquartermonth"
    | `Utcyearmonthdatehoursminutesseconds
        ->
        `String
          "utcyearmonthdatehoursminutesseconds"
    | `Utcyearmonthdatehoursminutes
        ->
        `String
          "utcyearmonthdatehoursminutes"
    | `Utcyearmonthdatehours
        ->
        `String
          "utcyearmonthdatehours"
    | `Utcyearmonthdate ->
        `String
          "utcyearmonthdate"
    | `Utcyearmonth ->
        `String "utcyearmonth"
    | `Utcyearquartermonth ->
        `String
          "utcyearquartermonth"
    | `Utcyearquarter ->
        `String
"utcyearquarter"                                                    
end and
UtcSingleTimeUnit:
                                                    sig
  type t =
    [ `Utcmilliseconds 
    | `Utcseconds 
    | `Utcminutes 
    | `Utchours 
    | `Utcdate 
    | `Utcday 
    | `Utcmonth 
    | `Utcquarter 
    | `Utcyear ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [ `Utcmilliseconds 
    | `Utcseconds 
    | `Utcminutes 
    | `Utchours 
    | `Utcdate 
    | `Utcday 
    | `Utcmonth 
    | `Utcquarter 
    | `Utcyear ]

  let to_yojson =
    function
    | `Utcmilliseconds ->
        `String
          "utcmilliseconds"
    | `Utcseconds ->
        `String
          "utcseconds"
    | `Utcminutes ->
        `String
          "utcminutes"
    | `Utchours ->
        `String
          "utchours"
    | `Utcdate ->
        `String "utcdate"
    | `Utcday ->
        `String "utcday"
    | `Utcmonth ->
        `String
          "utcmonth"
    | `Utcquarter ->
        `String
          "utcquarter"
    | `Utcyear ->
`String "utcyear"                                                         
end and
VConcatSpec:
                                                         sig
  type nonrec t =
    {
    vconcat:
Spec.t list ;
    transform:
Transform.t
        list option
      ;
    title:
VConcatSpec_Title_Variant.t
        option
      ;
    resolve:
Resolve.t
        option
      ;
    name:
      string option ;
    description:
      string option ;
    data:
Data.t option }
  val to_yojson :
    t ->
Yojson.Safe.json
  val make :
    ?transform:Transform.t
      list option ->
      ?title:VConcatSpec_Title_Variant.t
        option ->
        ?resolve:Resolve.t
          option ->
          ?name:string
           option ->
           ?description:string
           option ->
           ?data:Data.t
           option ->
Spec.t
           list -> 
           t
end =
struct
  type nonrec t =
    {
    vconcat:
Spec.t list ;
    transform:
Transform.t
        list option
      ;
    title:
VConcatSpec_Title_Variant.t
        option
      ;
    resolve:
Resolve.t
        option
      ;
    name:
      string option ;
    description:
      string option ;
    data:
Data.t option }

  (** Fields
  
    transform:
      An array of data transformations such as filter and new field calculation.
  
    title:
      Title for the plot.
  
    name:
      Name of the visualization for later reference.
  
    description:
      An optional description of this mark for commenting purpose.
  
    data:
      An object describing the data source
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun 
           (k,v)  ->
           match v
           with
           | 
           `Null ->
           false
           | 
           _ -> true)
         [("data",
           (((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (x :
Data.t) 
           ->
           (Data.to_yojson
           x : Yojson.Safe.json)))
           v))
           x.data));
         ("description",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (s :
           string) 
           ->
           (`String
           s : Yojson.Safe.json)))
           v))
           x.description));
         ("name",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (s :
           string) 
           ->
           (`String
           s : Yojson.Safe.json)))
           v))
           x.name));
         ("resolve",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (x :
Resolve.t)
            ->
           (Resolve.to_yojson
           x : Yojson.Safe.json)))
           v))
           x.resolve));
         ("title",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (x :
VConcatSpec_Title_Variant.t)
            ->
           (VConcatSpec_Title_Variant.to_yojson
           x : Yojson.Safe.json)))
           v))
           x.title));
         ("transform",
           (
           ((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (l :
Transform.t
           list)  ->
           let yojson_of_el
           (x :
Transform.t)
           =
           (Transform.to_yojson
           x : 
Yojson.Safe.json)
            in
           (`List
           (List.map
           yojson_of_el
           l) : 
Yojson.Safe.json)))
           v))
           x.transform));
         ("vconcat",
           (
           ((fun
           (l :
Spec.t
           list)  ->
           let yojson_of_el
           (x :
Spec.t) =
           (Spec.to_yojson
           x : 
Yojson.Safe.json)
            in
           (`List
           (List.map
           yojson_of_el
           l) : 
Yojson.Safe.json)))
x.vconcat))])                                                              
  let make
    ?(transform=
None)  ?(title=
None) 
    ?(resolve= None)
     ?(name= None) 
    ?(description=
None)  ?(data=
None)  vconcat =
    {
      vconcat;
      data;
      description;
      name;
      resolve;
      title;
      transform
    } 
end and
VConcatSpec_Title_Variant:
                                                              sig
  type t =
    [
      `TitleParams
      of
TitleParams.t
       | 
      `String
      of 
      string ]
  val to_yojson
    :
    t ->
Yojson.Safe.json
end =
struct
  type t =
    [
      `TitleParams
      of
TitleParams.t
       | 
      `String
      of 
      string ]

  let to_yojson
    =
    function
    | `TitleParams
      v ->
      ((fun
      (x :
TitleParams.t)
       ->
      (TitleParams.to_yojson
      x : Yojson.Safe.json)))
      v
    | `String v
      ->
      ((fun
      (s :
      string) 
      ->
      (`String
      s : Yojson.Safe.json)))
v                                                                   
end and
VLOnlyConfig:
                                                                   sig
 type nonrec t =
 {
 view:
ViewConfig.t
 option ;
 timeFormat:
 string
 option ;
 stack:
StackOffset.t
 option ;
 selection:
SelectionConfig.t
 option ;
 scale:
ScaleConfig.t
 option ;
 numberFormat:
 string
 option ;
 invalidValues:
 string
 option ;
 countTitle:
 string
 option }
 val
 to_yojson
 :
 t ->
Yojson.Safe.json
 val make
 :
 ?view:ViewConfig.t
 option ->
 ?timeFormat:string
 option ->
 ?stack:StackOffset.t
 option ->
 ?selection:SelectionConfig.t
 option ->
 ?scale:ScaleConfig.t
 option ->
 ?numberFormat:string
 option ->
 ?invalidValues:string
 option ->
 ?countTitle:string
 option ->
 unit -> t
end =
struct
 type nonrec t =
 {
 view:
ViewConfig.t
 option ;
 timeFormat:
 string
 option ;
 stack:
StackOffset.t
 option ;
 selection:
SelectionConfig.t
 option ;
 scale:
ScaleConfig.t
 option ;
 numberFormat:
 string
 option ;
 invalidValues:
 string
 option ;
 countTitle:
 string
 option }

  (** Fields
  
    view:
      Default properties for [single view plots](spec.html#single). 
  
    timeFormat:
      Default datetime format for axis and legend labels. The format can be set directly on each axis and legend. Use [D3's time format pattern](https://github.com/d3/d3-time-format#locale_format).
      
      __Default value:__ `'%b %d, %Y'`.
  
    stack:
      Default stack offset for stackable mark. 
  
    selection:
      An object hash for defining default properties for each type of selections. 
  
    scale:
      Scale configuration determines default properties for all [scales](scale.html). For a full list of scale configuration options, please see the [corresponding section of the scale documentation](scale.html#config).
  
    numberFormat:
      D3 Number format for axis labels and text tables. For example "s" for SI units. Use [D3's number format pattern](https://github.com/d3/d3-format#locale_format).
  
    invalidValues:
      Defines how Vega-Lite should handle invalid values (`null` and `NaN`).
      - If set to `"filter"` (default), all data items with null values are filtered.
      - If `null`, all data items are included. In this case, invalid values will be interpreted as zeroes.
  
    countTitle:
      Default axis and legend title for count fields.
      
      __Default value:__ `'Number of Records'`.
  *)
 let to_yojson
 x =
 `Assoc
 (List.filter
 (fun
 (k,v)  ->
 match v
 with
 | 
 `Null ->
 false
 | 
 _ -> true)
 [
 ("countTitle",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (s :
 string) 
 ->
 (`String
 s : Yojson.Safe.json)))
 v))
 x.countTitle));
 ("invalidValues",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (s :
 string) 
 ->
 (`String
 s : Yojson.Safe.json)))
 v))
 x.invalidValues));
 ("numberFormat",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (s :
 string) 
 ->
 (`String
 s : Yojson.Safe.json)))
 v))
 x.numberFormat));
 ("scale",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
ScaleConfig.t)
  ->
 (ScaleConfig.to_yojson
 x : Yojson.Safe.json)))
 v))
 x.scale));
 ("selection",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
SelectionConfig.t)
  ->
 (SelectionConfig.to_yojson
 x : Yojson.Safe.json)))
 v))
 x.selection));
 ("stack",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
StackOffset.t)
  ->
 (StackOffset.to_yojson
 x : Yojson.Safe.json)))
 v))
 x.stack));
 ("timeFormat",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (s :
 string) 
 ->
 (`String
 s : Yojson.Safe.json)))
 v))
 x.timeFormat));
 ("view",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
ViewConfig.t)
  ->
 (ViewConfig.to_yojson
 x : Yojson.Safe.json)))
 v))
x.view))])                                                                     
 let make
 ?(view=
None) 
 ?(timeFormat=
None) 
 ?(stack=
None) 
 ?(selection=
None) 
 ?(scale=
None) 
 ?(numberFormat=
None) 
 ?(invalidValues=
None) 
 ?(countTitle=
None)  ()
 =
 {
 countTitle;
 invalidValues;
 numberFormat;
 scale;
 selection;
 stack;
 timeFormat;
 view
 } 
end
and
ValueDef:sig
  type nonrec t = {
    value: ValueDef_Value_Variant.t }
  val to_yojson : t -> Yojson.Safe.json
  val make : ValueDef_Value_Variant.t -> t
end =
struct
  type nonrec t = {
    value: ValueDef_Value_Variant.t }

  (** Definition object for a constant value of an encoding channel.
  
  
  Fields:
  
    value:
      A constant value in visual domain.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  -> match v with | `Null -> false | _ -> true)
         [("value",
            (((fun (x : ValueDef_Value_Variant.t)  ->
                 (ValueDef_Value_Variant.to_yojson x : Yojson.Safe.json)))
x.value))])       
  let make value = { value } 
end and
ValueDef_Value_Variant:sig
  type t =
    [ `Num of int  | `String of string 
    | `Bool of bool ]
  val to_yojson : t -> Yojson.Safe.json
end =
struct
  type t = [ `Num of int  | `String of string  | `Bool of bool ]

  let to_yojson =
    function
    | `Num v -> ((fun (i : int)  -> (`Int i : Yojson.Safe.json))) v
    | `String v ->
        ((fun (s : string)  -> (`String s : Yojson.Safe.json))) v
    | `Bool v -> ((fun (b : bool)  -> (`Bool b : Yojson.Safe.json))) v 
end and
VerticalAlign:sig
  type t = [ `Bottom  | `Middle  | `Top ]
  val to_yojson : t -> Yojson.Safe.json
end =
struct
  type t = [ `Bottom  | `Middle  | `Top ]

  let to_yojson =
    function
    | `Bottom -> `String "bottom"
    | `Middle -> `String "middle"
    | `Top -> `String "top" 
end and
VgAxisBase:sig
  type nonrec t =
    {
    titlePadding: int option ;
    titleMaxLength: int option ;
    titleAngle: int option ;
    titleAlign: string option ;
    ticks: bool option ;
    tickSize: int option ;
    minExtent: int option ;
    maxExtent: int option ;
    labels: bool option ;
    labelPadding: int option ;
    labelOverlap:
VgAxisBase_LabelOverlap_Variant.t option ;
    labelAngle: int option ;
    grid: bool option ;
    domain: bool option }
  val to_yojson : t -> Yojson.Safe.json
  val make :
    ?titlePadding:int option ->
      ?titleMaxLength:int option ->
        ?titleAngle:int option ->
          ?titleAlign:string option ->
            ?ticks:bool option ->
              ?tickSize:int option ->
                ?minExtent:int option ->
                  ?maxExtent:int option ->
                    ?labels:bool option ->
                      ?labelPadding:int option ->
                        ?labelOverlap:VgAxisBase_LabelOverlap_Variant.t
                          option ->
                          ?labelAngle:int option
                            ->
                            ?grid:bool option ->
                              ?domain:bool option
                                -> unit -> t
end =
struct
  type nonrec t =
    {
    titlePadding: int option ;
    titleMaxLength: int option ;
    titleAngle: int option ;
    titleAlign: string option ;
    ticks: bool option ;
    tickSize: int option ;
    minExtent: int option ;
    maxExtent: int option ;
    labels: bool option ;
    labelPadding: int option ;
    labelOverlap: VgAxisBase_LabelOverlap_Variant.t option ;
    labelAngle: int option ;
    grid: bool option ;
    domain: bool option }

  (** Base object for Vega's Axis and Axis Config.
  All of these properties are both properties of Vega's Axis and Axis Config.
  
  
  Fields:
  
    titlePadding:
      The padding, in pixels, between title and axis.
  
    titleMaxLength:
      Max length for axis title if the title is automatically generated from the field's description.
  
    titleAngle:
      Angle in degrees of axis titles.
  
    titleAlign:
      Horizontal text alignment of axis titles.
  
    ticks:
      Boolean value that determines whether the axis should include ticks.
  
    tickSize:
      The size in pixels of axis ticks.
  
    minExtent:
      The minimum extent in pixels that axis ticks and labels should use. This determines a minimum offset value for axis titles.
      
      __Default value:__ `30` for y-axis; `undefined` for x-axis.
  
    maxExtent:
      The maximum extent in pixels that axis ticks and labels should use. This determines a maximum offset value for axis titles.
      
      __Default value:__ `undefined`.
  
    labels:
      A boolean flag indicating if labels should be included as part of the axis.
      
      __Default value:__  `true`.
  
    labelPadding:
      The padding, in pixels, between axis and text labels.
  
    labelOverlap:
      The strategy to use for resolving overlap of axis labels. If `false` (the default), no overlap reduction is attempted. If set to `true` or `"parity"`, a strategy of removing every other label is used (this works well for standard linear axes). If set to `"greedy"`, a linear scan of the labels is performed, removing any labels that overlaps with the last visible label (this often works better for log-scaled axes).
      
      __Default value:__ `true` for non-nominal fields with non-log scales; `"greedy"` for log scales; otherwise `false`.
  
    labelAngle:
      The rotation angle of the axis labels.
      
      __Default value:__ `-90` for nominal, ordinal, temporal, and binned fields; `0` otherwise.
  
    grid:
      A boolean flag indicating if grid lines should be included as part of the axis
      
      __Default value:__ `true` for [continuous scales](scale.html#continuous) that are not binned; otherwise, `false`.
  
    domain:
      A boolean flag indicating if the domain (the axis baseline) should be included as part of the axis.
      
      __Default value:__ `true`
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with | `Null -> false | _ -> true)
         [("domain",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun (b : bool)  ->
                       (`Bool b : Yojson.Safe.json))) v))
               x.domain));
         ("grid",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (b : bool)  ->
                      (`Bool b : Yojson.Safe.json))) v))
              x.grid));
         ("labelAngle",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json))) v))
              x.labelAngle));
         ("labelOverlap",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
VgAxisBase_LabelOverlap_Variant.t)
                       ->
                      (VgAxisBase_LabelOverlap_Variant.to_yojson
                         x : Yojson.Safe.json))) v))
              x.labelOverlap));
         ("labelPadding",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json))) v))
              x.labelPadding));
         ("labels",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (b : bool)  ->
                      (`Bool b : Yojson.Safe.json))) v))
              x.labels));
         ("maxExtent",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json))) v))
              x.maxExtent));
         ("minExtent",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json))) v))
              x.minExtent));
         ("tickSize",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json))) v))
              x.tickSize));
         ("ticks",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (b : bool)  ->
                      (`Bool b : Yojson.Safe.json))) v))
              x.ticks));
         ("titleAlign",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json))) v))
              x.titleAlign));
         ("titleAngle",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json))) v))
              x.titleAngle));
         ("titleMaxLength",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json))) v))
              x.titleMaxLength));
         ("titlePadding",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json))) v))
x.titlePadding))])                      
  let make ?(titlePadding= None)  ?(titleMaxLength= None) 
    ?(titleAngle= None)  ?(titleAlign= None)  ?(ticks= None)
     ?(tickSize= None)  ?(minExtent= None)  ?(maxExtent=
None)  ?(labels= None)  ?(labelPadding= None) 
    ?(labelOverlap= None)  ?(labelAngle= None)  ?(grid=
None)  ?(domain= None)  () =
    {
      domain;
      grid;
      labelAngle;
      labelOverlap;
      labelPadding;
      labels;
      maxExtent;
      minExtent;
      tickSize;
      ticks;
      titleAlign;
      titleAngle;
      titleMaxLength;
      titlePadding
    } 
end and
VgAxisBase_LabelOverlap_Variant:sig
  type t =
    [ `Boolean of bool 
    | `Parity 
    | `Greedy ]
  val to_yojson :
    t ->
Yojson.Safe.json
end =
struct
  type t = [ `Boolean of bool  | `Parity  | `Greedy ]

  let to_yojson =
    function
    | `Boolean v ->
        ((fun (b : bool)  ->
            (`Bool b : Yojson.Safe.json))) v
    | `Parity -> `String "parity"
    | `Greedy -> `String "greedy" 
end and
VgAxisConfig:sig
  type nonrec t =
    {
    titleY: int option ;
    titleX: int option ;
    titlePadding: int option ;
    titleMaxLength: int option ;
    titleLimit: int option ;
    titleFontWeight:
VgAxisConfig_TitleFontWeight_Variant.t
        option
      ;
    titleFontSize: int option ;
    titleFont: string option ;
    titleColor: string option ;
    titleBaseline: string option ;
    titleAngle: int option ;
    titleAlign: string option ;
    ticks: bool option ;
    tickWidth: int option ;
    tickSize: int option ;
    tickRound: bool option ;
    tickColor: string option ;
    minExtent: int option ;
    maxExtent: int option ;
    labels: bool option ;
    labelPadding: int option ;
    labelOverlap:
VgAxisConfig_LabelOverlap_Variant.t
        option
      ;
    labelLimit: int option ;
    labelFontSize: int option ;
    labelFont: string option ;
    labelColor: string option ;
    labelAngle: int option ;
    gridWidth: int option ;
    gridOpacity: int option ;
    gridDash: int list option ;
    gridColor: string option ;
    grid: bool option ;
    domainWidth: int option ;
    domainColor: string option ;
    domain: bool option ;
    bandPosition: int option }
  val to_yojson :
    t -> Yojson.Safe.json
  val make :
    ?titleY:int option ->
      ?titleX:int option ->
        ?titlePadding:int option ->
          ?titleMaxLength:int option
            ->
            ?titleLimit:int option ->
              ?titleFontWeight:VgAxisConfig_TitleFontWeight_Variant.t
                option ->
                ?titleFontSize:int
                  option ->
                  ?titleFont:string
                    option ->
                    ?titleColor:string
                      option ->
                      ?titleBaseline:string
                        option ->
                        ?titleAngle:int
                          option ->
                          ?titleAlign:string
                            option ->
                            ?ticks:bool
                            option ->
                            ?tickWidth:int
                            option ->
                            ?tickSize:int
                            option ->
                            ?tickRound:bool
                            option ->
                            ?tickColor:string
                            option ->
                            ?minExtent:int
                            option ->
                            ?maxExtent:int
                            option ->
                            ?labels:bool
                            option ->
                            ?labelPadding:int
                            option ->
                            ?labelOverlap:VgAxisConfig_LabelOverlap_Variant.t
                            option ->
                            ?labelLimit:int
                            option ->
                            ?labelFontSize:int
                            option ->
                            ?labelFont:string
                            option ->
                            ?labelColor:string
                            option ->
                            ?labelAngle:int
                            option ->
                            ?gridWidth:int
                            option ->
                            ?gridOpacity:int
                            option ->
                            ?gridDash:int
                            list
                            option ->
                            ?gridColor:string
                            option ->
                            ?grid:bool
                            option ->
                            ?domainWidth:int
                            option ->
                            ?domainColor:string
                            option ->
                            ?domain:bool
                            option ->
                            ?bandPosition:int
                            option ->
                            unit -> t
end =
struct
  type nonrec t =
    {
    titleY: int option ;
    titleX: int option ;
    titlePadding: int option ;
    titleMaxLength: int option ;
    titleLimit: int option ;
    titleFontWeight:
VgAxisConfig_TitleFontWeight_Variant.t
        option
      ;
    titleFontSize: int option ;
    titleFont: string option ;
    titleColor: string option ;
    titleBaseline: string option ;
    titleAngle: int option ;
    titleAlign: string option ;
    ticks: bool option ;
    tickWidth: int option ;
    tickSize: int option ;
    tickRound: bool option ;
    tickColor: string option ;
    minExtent: int option ;
    maxExtent: int option ;
    labels: bool option ;
    labelPadding: int option ;
    labelOverlap:
VgAxisConfig_LabelOverlap_Variant.t option ;
    labelLimit: int option ;
    labelFontSize: int option ;
    labelFont: string option ;
    labelColor: string option ;
    labelAngle: int option ;
    gridWidth: int option ;
    gridOpacity: int option ;
    gridDash: int list option ;
    gridColor: string option ;
    grid: bool option ;
    domainWidth: int option ;
    domainColor: string option ;
    domain: bool option ;
    bandPosition: int option }

  (** Fields
  
    titleY:
      Y-coordinate of the axis title relative to the axis group.
  
    titleX:
      X-coordinate of the axis title relative to the axis group.
  
    titlePadding:
      The padding, in pixels, between title and axis.
  
    titleMaxLength:
      Max length for axis title if the title is automatically generated from the field's description.
  
    titleLimit:
      Maximum allowed pixel width of axis titles.
  
    titleFontWeight:
      Font weight of the title. (e.g., `"bold"`).
  
    titleFontSize:
      Font size of the title.
  
    titleFont:
      Font of the title. (e.g., `"Helvetica Neue"`).
  
    titleColor:
      Color of the title, can be in hex color code or regular color name.
  
    titleBaseline:
      Vertical text baseline for axis titles.
  
    titleAngle:
      Angle in degrees of axis titles.
  
    titleAlign:
      Horizontal text alignment of axis titles.
  
    ticks:
      Boolean value that determines whether the axis should include ticks.
  
    tickWidth:
      The width, in pixels, of ticks.
  
    tickSize:
      The size in pixels of axis ticks.
  
    tickRound:
      Boolean flag indicating if pixel position values should be rounded to the nearest integer.
  
    tickColor:
      The color of the axis's tick.
  
    minExtent:
      The minimum extent in pixels that axis ticks and labels should use. This determines a minimum offset value for axis titles.
      
      __Default value:__ `30` for y-axis; `undefined` for x-axis.
  
    maxExtent:
      The maximum extent in pixels that axis ticks and labels should use. This determines a maximum offset value for axis titles.
      
      __Default value:__ `undefined`.
  
    labels:
      A boolean flag indicating if labels should be included as part of the axis.
      
      __Default value:__  `true`.
  
    labelPadding:
      The padding, in pixels, between axis and text labels.
  
    labelOverlap:
      The strategy to use for resolving overlap of axis labels. If `false` (the default), no overlap reduction is attempted. If set to `true` or `"parity"`, a strategy of removing every other label is used (this works well for standard linear axes). If set to `"greedy"`, a linear scan of the labels is performed, removing any labels that overlaps with the last visible label (this often works better for log-scaled axes).
      
      __Default value:__ `true` for non-nominal fields with non-log scales; `"greedy"` for log scales; otherwise `false`.
  
    labelLimit:
      Maximum allowed pixel width of axis tick labels.
  
    labelFontSize:
      The font size of the label, in pixels.
  
    labelFont:
      The font of the tick label.
  
    labelColor:
      The color of the tick label, can be in hex color code or regular color name.
  
    labelAngle:
      The rotation angle of the axis labels.
      
      __Default value:__ `-90` for nominal, ordinal, temporal, and binned fields; `0` otherwise.
  
    gridWidth:
      The grid width, in pixels.
  
    gridOpacity:
      The stroke opacity of grid (value between [0,1])
      
      __Default value:__ (`1` by default)
  
    gridDash:
      The offset (in pixels) into which to begin drawing with the grid dash array.
  
    gridColor:
      Color of gridlines.
  
    grid:
      A boolean flag indicating if grid lines should be included as part of the axis
      
      __Default value:__ `true` for [continuous scales](scale.html#continuous) that are not binned; otherwise, `false`.
  
    domainWidth:
      Stroke width of axis domain line
      
      __Default value:__  (none, using Vega default).
  
    domainColor:
      Color of axis domain line.
      
      __Default value:__  (none, using Vega default).
  
    domain:
      A boolean flag indicating if the domain (the axis baseline) should be included as part of the axis.
      
      __Default value:__ `true`
  
    bandPosition:
      An interpolation fraction indicating where, for `band` scales, axis ticks should be positioned. A value of `0` places ticks at the left edge of their bands. A value of `0.5` places ticks in the middle of their bands.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null -> false
            | _ -> true)
         [("bandPosition",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun (i : int)  ->
                       (`Int i : Yojson.Safe.json)))
                     v)) x.bandPosition));
         ("domain",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (b : bool)  ->
                      (`Bool b : Yojson.Safe.json)))
                    v)) x.domain));
         ("domainColor",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json)))
                    v)) x.domainColor));
         ("domainWidth",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.domainWidth));
         ("grid",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (b : bool)  ->
                      (`Bool b : Yojson.Safe.json)))
                    v)) x.grid));
         ("gridColor",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json)))
                    v)) x.gridColor));
         ("gridDash",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (l : int list)  ->
                      let yojson_of_el (i : int) =
                        (`Int i : Yojson.Safe.json)
                         in
                      (`List
                         (List.map yojson_of_el l) : 
Yojson.Safe.json))) v))
              x.gridDash));
         ("gridOpacity",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.gridOpacity));
         ("gridWidth",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.gridWidth));
         ("labelAngle",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.labelAngle));
         ("labelColor",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json)))
                    v)) x.labelColor));
         ("labelFont",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json)))
                    v)) x.labelFont));
         ("labelFontSize",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.labelFontSize));
         ("labelLimit",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.labelLimit));
         ("labelOverlap",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
VgAxisConfig_LabelOverlap_Variant.t)
                       ->
                      (VgAxisConfig_LabelOverlap_Variant.to_yojson
                         x : Yojson.Safe.json))) v))
              x.labelOverlap));
         ("labelPadding",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.labelPadding));
         ("labels",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (b : bool)  ->
                      (`Bool b : Yojson.Safe.json)))
                    v)) x.labels));
         ("maxExtent",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.maxExtent));
         ("minExtent",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.minExtent));
         ("tickColor",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json)))
                    v)) x.tickColor));
         ("tickRound",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (b : bool)  ->
                      (`Bool b : Yojson.Safe.json)))
                    v)) x.tickRound));
         ("tickSize",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.tickSize));
         ("tickWidth",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.tickWidth));
         ("ticks",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (b : bool)  ->
                      (`Bool b : Yojson.Safe.json)))
                    v)) x.ticks));
         ("titleAlign",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json)))
                    v)) x.titleAlign));
         ("titleAngle",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.titleAngle));
         ("titleBaseline",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json)))
                    v)) x.titleBaseline));
         ("titleColor",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json)))
                    v)) x.titleColor));
         ("titleFont",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json)))
                    v)) x.titleFont));
         ("titleFontSize",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.titleFontSize));
         ("titleFontWeight",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
VgAxisConfig_TitleFontWeight_Variant.t)
                       ->
                      (VgAxisConfig_TitleFontWeight_Variant.to_yojson
                         x : Yojson.Safe.json))) v))
              x.titleFontWeight));
         ("titleLimit",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.titleLimit));
         ("titleMaxLength",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.titleMaxLength));
         ("titlePadding",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.titlePadding));
         ("titleX",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
                    v)) x.titleX));
         ("titleY",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json)))
v)) x.titleY))])                                
  let make ?(titleY= None)  ?(titleX= None) 
    ?(titlePadding= None)  ?(titleMaxLength= None)
     ?(titleLimit= None)  ?(titleFontWeight= None)
     ?(titleFontSize= None)  ?(titleFont= None) 
    ?(titleColor= None)  ?(titleBaseline= None) 
    ?(titleAngle= None)  ?(titleAlign= None) 
    ?(ticks= None)  ?(tickWidth= None) 
    ?(tickSize= None)  ?(tickRound= None) 
    ?(tickColor= None)  ?(minExtent= None) 
    ?(maxExtent= None)  ?(labels= None) 
    ?(labelPadding= None)  ?(labelOverlap= None) 
    ?(labelLimit= None)  ?(labelFontSize= None) 
    ?(labelFont= None)  ?(labelColor= None) 
    ?(labelAngle= None)  ?(gridWidth= None) 
    ?(gridOpacity= None)  ?(gridDash= None) 
    ?(gridColor= None)  ?(grid= None) 
    ?(domainWidth= None)  ?(domainColor= None) 
    ?(domain= None)  ?(bandPosition= None)  () =
    {
      bandPosition;
      domain;
      domainColor;
      domainWidth;
      grid;
      gridColor;
      gridDash;
      gridOpacity;
      gridWidth;
      labelAngle;
      labelColor;
      labelFont;
      labelFontSize;
      labelLimit;
      labelOverlap;
      labelPadding;
      labels;
      maxExtent;
      minExtent;
      tickColor;
      tickRound;
      tickSize;
      tickWidth;
      ticks;
      titleAlign;
      titleAngle;
      titleBaseline;
      titleColor;
      titleFont;
      titleFontSize;
      titleFontWeight;
      titleLimit;
      titleMaxLength;
      titlePadding;
      titleX;
      titleY
    } 
end and
VgAxisConfig_LabelOverlap_Variant:sig
  type t =
  [
  `Boolean
  of 
  bool 
  | `Parity 
  | `Greedy ]
  val
  to_yojson
  :
  t ->
Yojson.Safe.json
end =
struct
  type t =
    [ `Boolean of bool  | `Parity 
    | `Greedy ]

  let to_yojson =
    function
    | `Boolean v ->
        ((fun (b : bool)  ->
            (`Bool b : Yojson.Safe.json))) v
    | `Parity -> `String "parity"
    | `Greedy -> `String "greedy" 
end and
VgAxisConfig_TitleFontWeight_Variant:
                                     sig
  type t =
    [ `String of string  | `Num of int ]
  val to_yojson : t -> Yojson.Safe.json
end =
struct
  type t =
    [ `String of string  | `Num of int ]

  let to_yojson =
    function
    | `String v ->
        ((fun (s : string)  ->
            (`String s : Yojson.Safe.json)))
          v
    | `Num v ->
        ((fun (i : int)  ->
            (`Int i : Yojson.Safe.json)))
v                                          
end and
VgBinding:sig
  type t =
    [
      `VgGenericBinding
        of
VgGenericBinding.t
         | `VgRangeBinding
             of
VgRangeBinding.t
              | `VgSelectBinding
                of
VgSelectBinding.t
                 | 
      `VgRadioBinding of
VgRadioBinding.t 
    | `VgCheckboxBinding
        of
VgCheckboxBinding.t
        ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [
      `VgGenericBinding of
VgGenericBinding.t 
    | `VgRangeBinding of
VgRangeBinding.t 
    | `VgSelectBinding of
VgSelectBinding.t 
    | `VgRadioBinding of
VgRadioBinding.t 
    | `VgCheckboxBinding of
VgCheckboxBinding.t ]

  let to_yojson =
    function
    | `VgGenericBinding v ->
        ((fun
            (x :
VgGenericBinding.t)
             ->
            (VgGenericBinding.to_yojson
               x : Yojson.Safe.json)))
          v
    | `VgRangeBinding v ->
        ((fun
            (x : VgRangeBinding.t) 
            ->
            (VgRangeBinding.to_yojson
               x : Yojson.Safe.json)))
          v
    | `VgSelectBinding v ->
        ((fun
            (x : VgSelectBinding.t)
             ->
            (VgSelectBinding.to_yojson
               x : Yojson.Safe.json)))
          v
    | `VgRadioBinding v ->
        ((fun
            (x : VgRadioBinding.t) 
            ->
            (VgRadioBinding.to_yojson
               x : Yojson.Safe.json)))
          v
    | `VgCheckboxBinding v ->
        ((fun
            (x :
VgCheckboxBinding.t)
             ->
            (VgCheckboxBinding.to_yojson
               x : Yojson.Safe.json)))
v                                               
end and
VgCheckboxBinding:sig
  type nonrec t =
   {
   input:
   string ;
   element:
   string
   option }
  val
   to_yojson
   :
   t ->
Yojson.Safe.json
  val make :
   ?element:string
   option ->
   string ->
   t
end =
struct
  type nonrec t =
    {
    input: string ;
    element: string option }

  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null -> false
            | _ -> true)
         [("element",
            (((function
               | None  ->
                   `Null
               | Some v ->
                   ((fun
                     (s :
                     string) 
                     ->
                     (`String
                     s : 
Yojson.Safe.json)))
                     v))
               x.element));
         ("input",
           (((fun (s : string)
                 ->
                (`String s : 
Yojson.Safe.json)))
x.input))])                                                    
  let make ?(element= None) 
    input = { input; element } 
end and
VgEventStream:sig
  type t =
Yojson.Safe.json
  val
  to_yojson
  :
  t ->
Yojson.Safe.json
end =
struct
  type t =
Yojson.Safe.json

  let to_yojson
    (j :
Yojson.Safe.json)
    =
(j : Yojson.Safe.json)                                                         
end and
VgGenericBinding:
                                                         sig
  type nonrec t =
    {
    input: string ;
    element:
      string option }
  val to_yojson :
    t ->
Yojson.Safe.json
  val make :
    ?element:string
      option ->
      string -> t
end =
struct
  type nonrec t =
    {
    input: string ;
    element:
      string option }

  let to_yojson x =
    `Assoc
      (List.filter
         (fun 
           (k,v)  ->
           match v
           with
           | 
           `Null ->
           false
           | 
           _ -> true)
         [("element",
           (((function
           | None 
           -> `Null
           | Some v
           ->
           ((fun
           (s :
           string) 
           ->
           (`String
           s : Yojson.Safe.json)))
           v))
           x.element));
         ("input",
           (
           ((fun
           (s :
           string) 
           ->
           (`String
           s : Yojson.Safe.json)))
x.input))])                                                              
  let make
    ?(element= None)
     input =
    { input; element
    } 
end and
VgLegendBase:
                                                              sig
  type nonrec t =
    {
    titleAlign:
      string
      option ;
    padding:
      int
      option ;
    orient:
LegendOrient.t
      option ;
    offset:
      int
      option ;
    fillColor:
      string
      option ;
    entryPadding:
      int
      option }
  val to_yojson
    :
    t ->
Yojson.Safe.json
  val make :
    ?titleAlign:string
      option ->
      ?padding:int
      option ->
      ?orient:LegendOrient.t
      option ->
      ?offset:int
      option ->
      ?fillColor:string
      option ->
      ?entryPadding:int
      option ->
      unit -> t
end =
struct
  type nonrec t =
    {
    titleAlign:
      string
      option ;
    padding:
      int
      option ;
    orient:
LegendOrient.t
      option ;
    offset:
      int
      option ;
    fillColor:
      string
      option ;
    entryPadding:
      int
      option }

  (** Fields
  
    titleAlign:
      Horizontal text alignment for legend titles.
  
    padding:
      The padding, in pixels, between the legend and axis.
  
    orient:
      The orientation of the legend, which determines how the legend is positioned within the scene. One of "left", "right", "top-left", "top-right", "bottom-left", "bottom-right", "none".
      
      __Default value:__ `"right"`
  
    offset:
      The offset, in pixels, by which to displace the legend from the edge of the enclosing group or data rectangle.
      
      __Default value:__  `0`
  
    fillColor:
      Background fill color for the full legend.
  
    entryPadding:
      Padding (in pixels) between legend entries in a symbol legend.
  *)
  let to_yojson
    x =
    `Assoc
      (
List.filter
      (fun
      (k,v)  ->
      match v
      with
      | 
      `Null ->
      false
      | 
      _ -> true)
      [
      ("entryPadding",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (i : int)
       ->
      (`Int i : 
Yojson.Safe.json)))
      v))
      x.entryPadding));
      ("fillColor",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (s :
      string) 
      ->
      (`String
      s : Yojson.Safe.json)))
      v))
      x.fillColor));
      ("offset",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (i : int)
       ->
      (`Int i : 
Yojson.Safe.json)))
      v))
      x.offset));
      ("orient",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (x :
LegendOrient.t)
       ->
      (LegendOrient.to_yojson
      x : Yojson.Safe.json)))
      v))
      x.orient));
      ("padding",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (i : int)
       ->
      (`Int i : 
Yojson.Safe.json)))
      v))
      x.padding));
      ("titleAlign",
      (((function
      | None 
      -> `Null
      | Some v
      ->
      ((fun
      (s :
      string) 
      ->
      (`String
      s : Yojson.Safe.json)))
      v))
x.titleAlign))])                                                                   
  let make
    ?(titleAlign=
None) 
    ?(padding=
None) 
    ?(orient=
None) 
    ?(offset=
None) 
    ?(fillColor=
None) 
    ?(entryPadding=
None)  () =
    {
      entryPadding;
      fillColor;
      offset;
      orient;
      padding;
      titleAlign
    } 
end and
VgLegendConfig:
                                                                   sig
 type nonrec t =
 {
 titlePadding:
 int
 option ;
 titleLimit:
 int
 option ;
 titleFontWeight:
VgLegendConfig_TitleFontWeight_Variant.t
 option ;
 titleFontSize:
 int
 option ;
 titleFont:
 string
 option ;
 titleColor:
 string
 option ;
 titleBaseline:
 string
 option ;
 titleAlign:
 string
 option ;
 symbolType:
 string
 option ;
 symbolStrokeWidth:
 int
 option ;
 symbolSize:
 int
 option ;
 symbolColor:
 string
 option ;
 strokeWidth:
 int
 option ;
 strokeDash:
 int list
 option ;
 strokeColor:
 string
 option ;
 padding:
 int
 option ;
 orient:
LegendOrient.t
 option ;
 offset:
 int
 option ;
 labelOffset:
 int
 option ;
 labelLimit:
 int
 option ;
 labelFontSize:
 int
 option ;
 labelFont:
 string
 option ;
 labelColor:
 string
 option ;
 labelBaseline:
 string
 option ;
 labelAlign:
 string
 option ;
 gradientWidth:
 int
 option ;
 gradientStrokeWidth:
 int
 option ;
 gradientStrokeColor:
 string
 option ;
 gradientLabelOffset:
 int
 option ;
 gradientLabelLimit:
 int
 option ;
 gradientLabelBaseline:
 string
 option ;
 gradientHeight:
 int
 option ;
 fillColor:
 string
 option ;
 entryPadding:
 int
 option ;
 cornerRadius:
 int
 option }
 val
 to_yojson
 :
 t ->
Yojson.Safe.json
 val make
 :
 ?titlePadding:int
 option ->
 ?titleLimit:int
 option ->
 ?titleFontWeight:VgLegendConfig_TitleFontWeight_Variant.t
 option ->
 ?titleFontSize:int
 option ->
 ?titleFont:string
 option ->
 ?titleColor:string
 option ->
 ?titleBaseline:string
 option ->
 ?titleAlign:string
 option ->
 ?symbolType:string
 option ->
 ?symbolStrokeWidth:int
 option ->
 ?symbolSize:int
 option ->
 ?symbolColor:string
 option ->
 ?strokeWidth:int
 option ->
 ?strokeDash:int
 list
 option ->
 ?strokeColor:string
 option ->
 ?padding:int
 option ->
 ?orient:LegendOrient.t
 option ->
 ?offset:int
 option ->
 ?labelOffset:int
 option ->
 ?labelLimit:int
 option ->
 ?labelFontSize:int
 option ->
 ?labelFont:string
 option ->
 ?labelColor:string
 option ->
 ?labelBaseline:string
 option ->
 ?labelAlign:string
 option ->
 ?gradientWidth:int
 option ->
 ?gradientStrokeWidth:int
 option ->
 ?gradientStrokeColor:string
 option ->
 ?gradientLabelOffset:int
 option ->
 ?gradientLabelLimit:int
 option ->
 ?gradientLabelBaseline:string
 option ->
 ?gradientHeight:int
 option ->
 ?fillColor:string
 option ->
 ?entryPadding:int
 option ->
 ?cornerRadius:int
 option ->
 unit -> t
end =
struct
 type nonrec t =
 {
 titlePadding:
 int
 option ;
 titleLimit:
 int
 option ;
 titleFontWeight:
VgLegendConfig_TitleFontWeight_Variant.t
 option ;
 titleFontSize:
 int
 option ;
 titleFont:
 string
 option ;
 titleColor:
 string
 option ;
 titleBaseline:
 string
 option ;
 titleAlign:
 string
 option ;
 symbolType:
 string
 option ;
 symbolStrokeWidth:
 int
 option ;
 symbolSize:
 int
 option ;
 symbolColor:
 string
 option ;
 strokeWidth:
 int
 option ;
 strokeDash:
 int list
 option ;
 strokeColor:
 string
 option ;
 padding:
 int
 option ;
 orient:
LegendOrient.t
 option ;
 offset:
 int
 option ;
 labelOffset:
 int
 option ;
 labelLimit:
 int
 option ;
 labelFontSize:
 int
 option ;
 labelFont:
 string
 option ;
 labelColor:
 string
 option ;
 labelBaseline:
 string
 option ;
 labelAlign:
 string
 option ;
 gradientWidth:
 int
 option ;
 gradientStrokeWidth:
 int
 option ;
 gradientStrokeColor:
 string
 option ;
 gradientLabelOffset:
 int
 option ;
 gradientLabelLimit:
 int
 option ;
 gradientLabelBaseline:
 string
 option ;
 gradientHeight:
 int
 option ;
 fillColor:
 string
 option ;
 entryPadding:
 int
 option ;
 cornerRadius:
 int
 option }

  (** Fields
  
    titlePadding:
      The padding, in pixels, between title and legend.
  
    titleLimit:
      Maximum allowed pixel width of axis titles.
  
    titleFontWeight:
      The font weight of the legend title.
  
    titleFontSize:
      The font size of the legend title.
  
    titleFont:
      The font of the legend title.
  
    titleColor:
      The color of the legend title, can be in hex color code or regular color name.
  
    titleBaseline:
      Optional mark property definitions for custom legend styling. 
       Vertical text baseline for legend titles.
  
    titleAlign:
      Horizontal text alignment for legend titles.
  
    symbolType:
      Default shape type (such as "circle") for legend symbols.
  
    symbolStrokeWidth:
      The width of the symbol's stroke.
  
    symbolSize:
      The size of the legend symbol, in pixels.
  
    symbolColor:
      The color of the legend symbol,
  
    strokeWidth:
      Border stroke width for the full legend.
  
    strokeDash:
      Border stroke dash pattern for the full legend.
  
    strokeColor:
      Border stroke color for the full legend.
  
    padding:
      The padding, in pixels, between the legend and axis.
  
    orient:
      The orientation of the legend, which determines how the legend is positioned within the scene. One of "left", "right", "top-left", "top-right", "bottom-left", "bottom-right", "none".
      
      __Default value:__ `"right"`
  
    offset:
      The offset, in pixels, by which to displace the legend from the edge of the enclosing group or data rectangle.
      
      __Default value:__  `0`
  
    labelOffset:
      The offset of the legend label.
  
    labelLimit:
      Maximum allowed pixel width of axis tick labels.
  
    labelFontSize:
      The font size of legend label.
      
      __Default value:__ `10`.
  
    labelFont:
      The font of the legend label.
  
    labelColor:
      The color of the legend label, can be in hex color code or regular color name.
  
    labelBaseline:
      The position of the baseline of legend label, can be top, middle or bottom.
  
    labelAlign:
      The alignment of the legend label, can be left, middle or right.
  
    gradientWidth:
      The width of the gradient, in pixels.
  
    gradientStrokeWidth:
      The width of the gradient stroke, in pixels.
  
    gradientStrokeColor:
      The color of the gradient stroke, can be in hex color code or regular color name.
  
    gradientLabelOffset:
      Vertical offset in pixels for color ramp gradient labels.
  
    gradientLabelLimit:
      The maximum allowed length in pixels of color ramp gradient labels.
  
    gradientLabelBaseline:
      Text baseline for color ramp gradient labels.
  
    gradientHeight:
      The height of the gradient, in pixels.
  
    fillColor:
      Background fill color for the full legend.
  
    entryPadding:
      Padding (in pixels) between legend entries in a symbol legend.
  
    cornerRadius:
      Corner radius for the full legend.
  *)
 let to_yojson
 x =
 `Assoc
 (List.filter
 (fun
 (k,v)  ->
 match v
 with
 | 
 `Null ->
 false
 | 
 _ -> true)
 [
 ("cornerRadius",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
 x.cornerRadius));
 ("entryPadding",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
 x.entryPadding));
 ("fillColor",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (s :
 string) 
 ->
 (`String
 s : Yojson.Safe.json)))
 v))
 x.fillColor));
 ("gradientHeight",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
 x.gradientHeight));
 ("gradientLabelBaseline",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (s :
 string) 
 ->
 (`String
 s : Yojson.Safe.json)))
 v))
 x.gradientLabelBaseline));
 ("gradientLabelLimit",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
 x.gradientLabelLimit));
 ("gradientLabelOffset",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
 x.gradientLabelOffset));
 ("gradientStrokeColor",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (s :
 string) 
 ->
 (`String
 s : Yojson.Safe.json)))
 v))
 x.gradientStrokeColor));
 ("gradientStrokeWidth",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
 x.gradientStrokeWidth));
 ("gradientWidth",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
 x.gradientWidth));
 ("labelAlign",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (s :
 string) 
 ->
 (`String
 s : Yojson.Safe.json)))
 v))
 x.labelAlign));
 ("labelBaseline",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (s :
 string) 
 ->
 (`String
 s : Yojson.Safe.json)))
 v))
 x.labelBaseline));
 ("labelColor",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (s :
 string) 
 ->
 (`String
 s : Yojson.Safe.json)))
 v))
 x.labelColor));
 ("labelFont",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (s :
 string) 
 ->
 (`String
 s : Yojson.Safe.json)))
 v))
 x.labelFont));
 ("labelFontSize",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
 x.labelFontSize));
 ("labelLimit",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
 x.labelLimit));
 ("labelOffset",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
 x.labelOffset));
 ("offset",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
 x.offset));
 ("orient",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
LegendOrient.t)
  ->
 (LegendOrient.to_yojson
 x : Yojson.Safe.json)))
 v))
 x.orient));
 ("padding",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
 x.padding));
 ("strokeColor",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (s :
 string) 
 ->
 (`String
 s : Yojson.Safe.json)))
 v))
 x.strokeColor));
 ("strokeDash",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (l :
 int list)
  ->
 let yojson_of_el
 (i : int)
 =
 (`Int i : 
Yojson.Safe.json)
  in
 (`List
 (List.map
 yojson_of_el
 l) : 
Yojson.Safe.json)))
 v))
 x.strokeDash));
 ("strokeWidth",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
 x.strokeWidth));
 ("symbolColor",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (s :
 string) 
 ->
 (`String
 s : Yojson.Safe.json)))
 v))
 x.symbolColor));
 ("symbolSize",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
 x.symbolSize));
 ("symbolStrokeWidth",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
 x.symbolStrokeWidth));
 ("symbolType",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (s :
 string) 
 ->
 (`String
 s : Yojson.Safe.json)))
 v))
 x.symbolType));
 ("titleAlign",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (s :
 string) 
 ->
 (`String
 s : Yojson.Safe.json)))
 v))
 x.titleAlign));
 ("titleBaseline",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (s :
 string) 
 ->
 (`String
 s : Yojson.Safe.json)))
 v))
 x.titleBaseline));
 ("titleColor",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (s :
 string) 
 ->
 (`String
 s : Yojson.Safe.json)))
 v))
 x.titleColor));
 ("titleFont",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (s :
 string) 
 ->
 (`String
 s : Yojson.Safe.json)))
 v))
 x.titleFont));
 ("titleFontSize",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
 x.titleFontSize));
 ("titleFontWeight",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (x :
VgLegendConfig_TitleFontWeight_Variant.t)
  ->
 (VgLegendConfig_TitleFontWeight_Variant.to_yojson
 x : Yojson.Safe.json)))
 v))
 x.titleFontWeight));
 ("titleLimit",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
 x.titleLimit));
 ("titlePadding",
 (((function
 | None 
 -> `Null
 | Some v
 ->
 ((fun
 (i : int)
  ->
 (`Int i : 
Yojson.Safe.json)))
 v))
x.titlePadding))])                                                                     
 let make
 ?(titlePadding=
None) 
 ?(titleLimit=
None) 
 ?(titleFontWeight=
None) 
 ?(titleFontSize=
None) 
 ?(titleFont=
None) 
 ?(titleColor=
None) 
 ?(titleBaseline=
None) 
 ?(titleAlign=
None) 
 ?(symbolType=
None) 
 ?(symbolStrokeWidth=
None) 
 ?(symbolSize=
None) 
 ?(symbolColor=
None) 
 ?(strokeWidth=
None) 
 ?(strokeDash=
None) 
 ?(strokeColor=
None) 
 ?(padding=
None) 
 ?(orient=
None) 
 ?(offset=
None) 
 ?(labelOffset=
None) 
 ?(labelLimit=
None) 
 ?(labelFontSize=
None) 
 ?(labelFont=
None) 
 ?(labelColor=
None) 
 ?(labelBaseline=
None) 
 ?(labelAlign=
None) 
 ?(gradientWidth=
None) 
 ?(gradientStrokeWidth=
None) 
 ?(gradientStrokeColor=
None) 
 ?(gradientLabelOffset=
None) 
 ?(gradientLabelLimit=
None) 
 ?(gradientLabelBaseline=
None) 
 ?(gradientHeight=
None) 
 ?(fillColor=
None) 
 ?(entryPadding=
None) 
 ?(cornerRadius=
None)  ()
 =
 {
 cornerRadius;
 entryPadding;
 fillColor;
 gradientHeight;
 gradientLabelBaseline;
 gradientLabelLimit;
 gradientLabelOffset;
 gradientStrokeColor;
 gradientStrokeWidth;
 gradientWidth;
 labelAlign;
 labelBaseline;
 labelColor;
 labelFont;
 labelFontSize;
 labelLimit;
 labelOffset;
 offset;
 orient;
 padding;
 strokeColor;
 strokeDash;
 strokeWidth;
 symbolColor;
 symbolSize;
 symbolStrokeWidth;
 symbolType;
 titleAlign;
 titleBaseline;
 titleColor;
 titleFont;
 titleFontSize;
 titleFontWeight;
 titleLimit;
 titlePadding
 } 
end
and
VgLegendConfig_TitleFontWeight_Variant:sig
  type t =
    [ `String of string 
    | `Num of int ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t = [ `String of string  | `Num of int ]

  let to_yojson =
    function
    | `String v ->
        ((fun (s : string)  -> (`String s : Yojson.Safe.json))) v
    | `Num v -> ((fun (i : int)  -> (`Int i : Yojson.Safe.json))) v 
end and
VgMarkConfig:sig
  type nonrec t =
    {
    theta: int option ;
    text: string option ;
    tension: int option ;
    strokeWidth: int option ;
    strokeOpacity: int option ;
    strokeDashOffset: int option ;
    strokeDash: int list option ;
    stroke: string option ;
    size: int option ;
    shape: string option ;
    radius: int option ;
    orient: Orient.t option ;
    opacity: int option ;
    limit: int option ;
    interpolate: Interpolate.t option ;
    fontWeight: VgMarkConfig_FontWeight_Variant.t option ;
    fontStyle: FontStyle.t option ;
    fontSize: int option ;
    font: string option ;
    fillOpacity: int option ;
    fill: string option ;
    dy: int option ;
    dx: int option ;
    baseline: VerticalAlign.t option ;
    angle: int option ;
    align: HorizontalAlign.t option }
  val to_yojson : t -> Yojson.Safe.json
  val make :
    ?theta:int option ->
      ?text:string option ->
        ?tension:int option ->
          ?strokeWidth:int option ->
            ?strokeOpacity:int option ->
              ?strokeDashOffset:int option ->
                ?strokeDash:int list option ->
                  ?stroke:string option ->
                    ?size:int option ->
                      ?shape:string option ->
                        ?radius:int option ->
                          ?orient:Orient.t option ->
                            ?opacity:int option ->
                              ?limit:int option ->
                                ?interpolate:Interpolate.t
                                  option ->
                                  ?fontWeight:VgMarkConfig_FontWeight_Variant.t
                                    option ->
                                    ?fontStyle:FontStyle.t
                                      option ->
                                      ?fontSize:int
                                        option ->
                                        ?font:string
                                          option ->
                                          ?fillOpacity:int
                                            option ->
                                            ?fill:string
                                              option ->
                                              ?dy:int
                                                option ->
                                                ?dx:int
                                                option ->
                                                ?baseline:VerticalAlign.t
                                                option ->
                                                ?angle:int
                                                option ->
                                                ?align:HorizontalAlign.t
                                                option ->
                                                unit -> t
end =
struct
  type nonrec t =
    {
    theta: int option ;
    text: string option ;
    tension: int option ;
    strokeWidth: int option ;
    strokeOpacity: int option ;
    strokeDashOffset: int option ;
    strokeDash: int list option ;
    stroke: string option ;
    size: int option ;
    shape: string option ;
    radius: int option ;
    orient: Orient.t option ;
    opacity: int option ;
    limit: int option ;
    interpolate: Interpolate.t option ;
    fontWeight: VgMarkConfig_FontWeight_Variant.t option ;
    fontStyle: FontStyle.t option ;
    fontSize: int option ;
    font: string option ;
    fillOpacity: int option ;
    fill: string option ;
    dy: int option ;
    dx: int option ;
    baseline: VerticalAlign.t option ;
    angle: int option ;
    align: HorizontalAlign.t option }

  (** Fields
  
    theta:
      Polar coordinate angle, in radians, of the text label from the origin determined by the `x` and `y` properties. Values for `theta` follow the same convention of `arc` mark `startAngle` and `endAngle` properties: angles are measured in radians, with `0` indicating "north".
  
    text:
      Placeholder text if the `text` channel is not specified
  
    tension:
      Depending on the interpolation type, sets the tension parameter (for line and area marks).
  
    strokeWidth:
      The stroke width, in pixels.
  
    strokeOpacity:
      The stroke opacity (value between [0,1]).
      
      __Default value:__ `1`
  
    strokeDashOffset:
      The offset (in pixels) into which to begin drawing with the stroke dash array.
  
    strokeDash:
      An array of alternating stroke, space lengths for creating dashed or dotted lines.
  
    stroke:
      Default Stroke Color.  This has higher precedence than config.color
      
      __Default value:__ (None)
  
    size:
      The pixel area each the point/circle/square.
      For example: in the case of circles, the radius is determined in part by the square root of the size value.
      
      __Default value:__ `30`
  
    shape:
      The default symbol shape to use. One of: `"circle"` (default), `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`, or `"triangle-down"`, or a custom SVG path.
      
      __Default value:__ `"circle"`
  
    radius:
      Polar coordinate radial offset, in pixels, of the text label from the origin determined by the `x` and `y` properties.
  
    orient:
      The orientation of a non-stacked bar, tick, area, and line charts.
      The value is either horizontal (default) or vertical.
      - For bar, rule and tick, this determines whether the size of the bar and tick
      should be applied to x or y dimension.
      - For area, this property determines the orient property of the Vega output.
      - For line, this property determines the sort order of the points in the line
      if `config.sortLineBy` is not specified.
      For stacked charts, this is always determined by the orientation of the stack;
      therefore explicitly specified value will be ignored.
  
    opacity:
      The overall opacity (value between [0,1]).
      
      __Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.
  
    limit:
      The maximum length of the text mark in pixels (default 0, indicating no limit). The text value will be automatically truncated if the rendered size exceeds the limit.
  
    interpolate:
      The line interpolation method to use for line and area marks. One of the following:
      - `"linear"`: piecewise linear segments, as in a polyline.
      - `"linear-closed"`: close the linear segments to form a polygon.
      - `"step"`: alternate between horizontal and vertical segments, as in a step function.
      - `"step-before"`: alternate between vertical and horizontal segments, as in a step function.
      - `"step-after"`: alternate between horizontal and vertical segments, as in a step function.
      - `"basis"`: a B-spline, with control point duplication on the ends.
      - `"basis-open"`: an open B-spline; may not intersect the start or end.
      - `"basis-closed"`: a closed B-spline, as in a loop.
      - `"cardinal"`: a Cardinal spline, with control point duplication on the ends.
      - `"cardinal-open"`: an open Cardinal spline; may not intersect the start or end, but will intersect other control points.
      - `"cardinal-closed"`: a closed Cardinal spline, as in a loop.
      - `"bundle"`: equivalent to basis, except the tension parameter is used to straighten the spline.
      - `"monotone"`: cubic interpolation that preserves monotonicity in y.
  
    fontWeight:
      The font weight (e.g., `"bold"`).
  
    fontStyle:
      The font style (e.g., `"italic"`).
  
    fontSize:
      The font size, in pixels.
  
    font:
      The typeface to set the text in (e.g., `"Helvetica Neue"`).
  
    fillOpacity:
      The fill opacity (value between [0,1]).
      
      __Default value:__ `1`
  
    fill:
      Default Fill Color.  This has higher precedence than config.color
      
      __Default value:__ (None)
  
    dy:
      The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.
  
    dx:
      The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.
  
    baseline:
      The vertical alignment of the text. One of `"top"`, `"middle"`, `"bottom"`.
      
      __Default value:__ `"middle"`
  
    angle:
      The rotation angle of the text, in degrees.
  
    align:
      The horizontal alignment of the text. One of `"left"`, `"right"`, `"center"`.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  -> match v with | `Null -> false | _ -> true)
         [("align",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun (x : HorizontalAlign.t)  ->
                       (HorizontalAlign.to_yojson x : Yojson.Safe.json)))
                     v)) x.align));
         ("angle",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json))) v))
              x.angle));
         ("baseline",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : VerticalAlign.t)  ->
                      (VerticalAlign.to_yojson x : Yojson.Safe.json)))
                    v)) x.baseline));
         ("dx",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json))) v))
              x.dx));
         ("dy",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json))) v))
              x.dy));
         ("fill",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json))) v)) x.fill));
         ("fillOpacity",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json))) v))
              x.fillOpacity));
         ("font",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json))) v)) x.font));
         ("fontSize",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json))) v))
              x.fontSize));
         ("fontStyle",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : FontStyle.t)  ->
                      (FontStyle.to_yojson x : Yojson.Safe.json))) v))
              x.fontStyle));
         ("fontWeight",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : VgMarkConfig_FontWeight_Variant.t)  ->
                      (VgMarkConfig_FontWeight_Variant.to_yojson x : 
Yojson.Safe.json))) v)) x.fontWeight));
         ("interpolate",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : Interpolate.t)  ->
                      (Interpolate.to_yojson x : Yojson.Safe.json))) v))
              x.interpolate));
         ("limit",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json))) v))
              x.limit));
         ("opacity",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json))) v))
              x.opacity));
         ("orient",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (x : Orient.t)  ->
                      (Orient.to_yojson x : Yojson.Safe.json))) v))
              x.orient));
         ("radius",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json))) v))
              x.radius));
         ("shape",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json))) v)) x.shape));
         ("size",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json))) v))
              x.size));
         ("stroke",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json))) v)) x.stroke));
         ("strokeDash",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (l : int list)  ->
                      let yojson_of_el (i : int) =
                        (`Int i : Yojson.Safe.json)  in
                      (`List (List.map yojson_of_el l) : Yojson.Safe.json)))
                    v)) x.strokeDash));
         ("strokeDashOffset",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json))) v))
              x.strokeDashOffset));
         ("strokeOpacity",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json))) v))
              x.strokeOpacity));
         ("strokeWidth",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json))) v))
              x.strokeWidth));
         ("tension",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json))) v))
              x.tension));
         ("text",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : Yojson.Safe.json))) v)) x.text));
         ("theta",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  -> (`Int i : Yojson.Safe.json))) v))
x.theta))])            
  let make ?(theta= None)  ?(text= None)  ?(tension= None) 
    ?(strokeWidth= None)  ?(strokeOpacity= None)  ?(strokeDashOffset=
None)  ?(strokeDash= None)  ?(stroke= None)  ?(size= None) 
    ?(shape= None)  ?(radius= None)  ?(orient= None)  ?(opacity= None)
     ?(limit= None)  ?(interpolate= None)  ?(fontWeight= None) 
    ?(fontStyle= None)  ?(fontSize= None)  ?(font= None) 
    ?(fillOpacity= None)  ?(fill= None)  ?(dy= None)  ?(dx= None) 
    ?(baseline= None)  ?(angle= None)  ?(align= None)  () =
    {
      align;
      angle;
      baseline;
      dx;
      dy;
      fill;
      fillOpacity;
      font;
      fontSize;
      fontStyle;
      fontWeight;
      interpolate;
      limit;
      opacity;
      orient;
      radius;
      shape;
      size;
      stroke;
      strokeDash;
      strokeDashOffset;
      strokeOpacity;
      strokeWidth;
      tension;
      text;
      theta
    } 
end and
VgMarkConfig_FontWeight_Variant:sig
  type t =
    [
      `FontWeightNumber of
FontWeightNumber.t 
    | `FontWeight of FontWeight.t ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [ `FontWeightNumber of FontWeightNumber.t 
    | `FontWeight of FontWeight.t ]

  let to_yojson =
    function
    | `FontWeightNumber v ->
        ((fun (x : FontWeightNumber.t)  ->
            (FontWeightNumber.to_yojson x : Yojson.Safe.json))) v
    | `FontWeight v ->
        ((fun (x : FontWeight.t)  ->
(FontWeight.to_yojson x : Yojson.Safe.json))) v                 
end and
VgRadioBinding:sig
  type nonrec t =
    {
    options: string list ;
    input: string ;
    element: string option }
  val to_yojson : t -> Yojson.Safe.json
  val make :
    ?element:string option ->
      string list -> string -> t
end =
struct
  type nonrec t =
    {
    options: string list ;
    input: string ;
    element: string option }

  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with | `Null -> false | _ -> true)
         [("element",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun (s : string)  ->
                       (`String s : Yojson.Safe.json))) v))
               x.element));
         ("input",
           (((fun (s : string)  ->
                (`String s : Yojson.Safe.json))) x.input));
         ("options",
           (((fun (l : string list)  ->
                let yojson_of_el (s : string) =
                  (`String s : Yojson.Safe.json)  in
                (`List (List.map yojson_of_el l) : Yojson.Safe.json)))
x.options))])                      
  let make ?(element= None)  options input =
    { input; options; element } 
end and
VgRangeBinding:sig
  type nonrec t =
    {
    step: int option ;
    min: int option ;
    max: int option ;
    input: string ;
    element: string option }
  val to_yojson : t -> Yojson.Safe.json
  val make :
    ?step:int option ->
      ?min:int option ->
        ?max:int option ->
          ?element:string option ->
            string -> t
end =
struct
  type nonrec t =
    {
    step: int option ;
    min: int option ;
    max: int option ;
    input: string ;
    element: string option }

  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with | `Null -> false | _ -> true)
         [("element",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun (s : string)  ->
                       (`String s : Yojson.Safe.json)))
                     v)) x.element));
         ("input",
           (((fun (s : string)  ->
                (`String s : Yojson.Safe.json)))
              x.input));
         ("max",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json))) v))
              x.max));
         ("min",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json))) v))
              x.min));
         ("step",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : Yojson.Safe.json))) v))
x.step))])                           
  let make ?(step= None)  ?(min= None)  ?(max= None) 
    ?(element= None)  input =
    { input; element; max; min; step } 
end and
VgScheme:sig
  type nonrec t =
    {
    scheme: string ;
    extent: int list option ;
    count: int option }
  val to_yojson : t -> Yojson.Safe.json
  val make :
    ?extent:int list option ->
      ?count:int option -> string -> t
end =
struct
  type nonrec t =
    {
    scheme: string ;
    extent: int list option ;
    count: int option }

  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null -> false
            | _ -> true)
         [("count",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun (i : int)  ->
                       (`Int i : Yojson.Safe.json)))
                     v)) x.count));
         ("extent",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (l : int list)  ->
                      let yojson_of_el (i : int) =
                        (`Int i : Yojson.Safe.json)
                         in
                      (`List
                         (List.map yojson_of_el l) : 
Yojson.Safe.json))) v))
              x.extent));
         ("scheme",
           (((fun (s : string)  ->
                (`String s : Yojson.Safe.json)))
x.scheme))])                                
  let make ?(extent= None)  ?(count= None)  scheme
    = { scheme; count; extent } 
end and
VgSelectBinding:sig
  type nonrec t =
    {
    options: string list ;
    input: string ;
    element: string option }
  val to_yojson :
    t -> Yojson.Safe.json
  val make :
    ?element:string option ->
      string list ->
        string -> t
end =
struct
  type nonrec t =
    {
    options: string list ;
    input: string ;
    element: string option }

  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null -> false
            | _ -> true)
         [("element",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun (s : string)  ->
                       (`String s : Yojson.Safe.json)))
                     v)) x.element));
         ("input",
           (((fun (s : string)  ->
                (`String s : Yojson.Safe.json)))
              x.input));
         ("options",
           (((fun (l : string list)  ->
                let yojson_of_el (s : string)
                  =
                  (`String s : Yojson.Safe.json)
                   in
                (`List
                   (List.map yojson_of_el l) : 
Yojson.Safe.json)))
x.options))])                                     
  let make ?(element= None)  options input =
    { input; options; element } 
end and
VgTitleConfig:sig
  type nonrec t =
    {
    orient:
TitleOrient.t option ;
    offset: int option ;
    limit: int option ;
    fontWeight:
VgTitleConfig_FontWeight_Variant.t
        option
      ;
    fontSize: int option ;
    font: string option ;
    color: string option ;
    baseline:
VerticalAlign.t
        option
      ;
    angle: int option ;
    anchor:
Anchor.t option }
  val to_yojson :
    t -> Yojson.Safe.json
  val make :
    ?orient:TitleOrient.t
      option ->
      ?offset:int option
        ->
        ?limit:int option
          ->
          ?fontWeight:VgTitleConfig_FontWeight_Variant.t
            option ->
            ?fontSize:int
              option ->
              ?font:string
                option ->
                ?color:string
                 option ->
                 ?baseline:VerticalAlign.t
                 option ->
                 ?angle:int
                 option ->
                 ?anchor:Anchor.t
                 option ->
                 unit -> t
end =
struct
  type nonrec t =
    {
    orient: TitleOrient.t option ;
    offset: int option ;
    limit: int option ;
    fontWeight:
VgTitleConfig_FontWeight_Variant.t
        option
      ;
    fontSize: int option ;
    font: string option ;
    color: string option ;
    baseline: VerticalAlign.t option ;
    angle: int option ;
    anchor: Anchor.t option }

  (** Fields
  
    orient:
      Default title orientation ("top", "bottom", "left", or "right")
  
    offset:
      Offset in pixels of the title from the chart body and axes.
  
    limit:
      The maximum allowed length in pixels of legend labels.
  
    fontWeight:
      Font weight for title text.
  
    fontSize:
      Font size in pixels for title text.
      
      __Default value:__ `10`.
  
    font:
      Font name for title text.
  
    color:
      Text color for title text.
  
    baseline:
      Vertical text baseline for title text.
  
    angle:
      Angle in degrees of title text.
  
    anchor:
      The anchor position for placing the title. One of `"start"`, `"middle"`, or `"end"`. For example, with an orientation of top these anchor positions map to a left-, center-, or right-aligned title.
      
      __Default value:__ `"middle"` for [single](spec.html) and [layered](layer.html) views.
      `"start"` for other composite views.
      
      __Note:__ [For now](https://github.com/vega/vega-lite/issues/2875), `anchor` is only customizable only for [single](spec.html) and [layered](layer.html) views.  For other composite views, `anchor` is always `"start"`.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null -> false
            | _ -> true)
         [("anchor",
            (((function
               | None  -> `Null
               | Some v ->
                   ((fun (x : Anchor.t) 
                       ->
                       (Anchor.to_yojson
                          x : Yojson.Safe.json)))
                     v)) x.anchor));
         ("angle",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : 
Yojson.Safe.json)))
                    v)) x.angle));
         ("baseline",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
VerticalAlign.t)
                       ->
                      (VerticalAlign.to_yojson
                         x : Yojson.Safe.json)))
                    v)) x.baseline));
         ("color",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : 
Yojson.Safe.json)))
                    v)) x.color));
         ("font",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (s : string)  ->
                      (`String s : 
Yojson.Safe.json)))
                    v)) x.font));
         ("fontSize",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : 
Yojson.Safe.json)))
                    v)) x.fontSize));
         ("fontWeight",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
VgTitleConfig_FontWeight_Variant.t)
                       ->
                      (VgTitleConfig_FontWeight_Variant.to_yojson
                         x : Yojson.Safe.json)))
                    v)) x.fontWeight));
         ("limit",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : 
Yojson.Safe.json)))
                    v)) x.limit));
         ("offset",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun (i : int)  ->
                      (`Int i : 
Yojson.Safe.json)))
                    v)) x.offset));
         ("orient",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                      (x :
TitleOrient.t)
                       ->
                      (TitleOrient.to_yojson
                         x : Yojson.Safe.json)))
v)) x.orient))])                                          
  let make ?(orient= None)  ?(offset=
None)  ?(limit= None)  ?(fontWeight=
None)  ?(fontSize= None)  ?(font=
None)  ?(color= None)  ?(baseline=
None)  ?(angle= None)  ?(anchor=
None)  () =
    {
      anchor;
      angle;
      baseline;
      color;
      font;
      fontSize;
      fontWeight;
      limit;
      offset;
      orient
    } 
end and
VgTitleConfig_FontWeight_Variant:
                                          sig
  type t =
    [
      `FontWeightNumber of
FontWeightNumber.t 
    | `FontWeight of FontWeight.t ]
  val to_yojson :
    t -> Yojson.Safe.json
end =
struct
  type t =
    [
      `FontWeightNumber of
FontWeightNumber.t 
    | `FontWeight of FontWeight.t ]

  let to_yojson =
    function
    | `FontWeightNumber v ->
        ((fun
            (x :
FontWeightNumber.t)
             ->
            (FontWeightNumber.to_yojson
               x : Yojson.Safe.json)))
          v
    | `FontWeight v ->
        ((fun (x : FontWeight.t) 
            ->
            (FontWeight.to_yojson x : 
Yojson.Safe.json))) v                                               
end and
ViewConfig:sig
  type nonrec t =
    {
    width:
      int option ;
    strokeWidth:
      int option ;
    strokeOpacity:
      int option ;
    strokeDashOffset:
      int option ;
    strokeDash:
      int list
        option
      ;
    stroke:
      string option ;
    height:
      int option ;
    fillOpacity:
      int option ;
    fill:
      string option ;
    clip:
      bool option }
  val to_yojson :
    t ->
Yojson.Safe.json
  val make :
    ?width:int
      option ->
      ?strokeWidth:int
        option ->
        ?strokeOpacity:int
          option ->
          ?strokeDashOffset:int
          option ->
          ?strokeDash:int
          list
          option ->
          ?stroke:string
          option ->
          ?height:int
          option ->
          ?fillOpacity:int
          option ->
          ?fill:string
          option ->
          ?clip:bool
          option ->
          unit -> t
end =
struct
  type nonrec t =
    {
    width: int option ;
    strokeWidth: int option ;
    strokeOpacity: int option ;
    strokeDashOffset:
      int option ;
    strokeDash:
      int list option ;
    stroke: string option ;
    height: int option ;
    fillOpacity: int option ;
    fill: string option ;
    clip: bool option }

  (** Fields
  
    width:
      The default width of the single plot or each plot in a trellis plot when the visualization has a continuous (non-ordinal) x-scale or ordinal x-scale with `rangeStep` = `null`.
      
      __Default value:__ `200`
  
    strokeWidth:
      The stroke width, in pixels.
      
      __Default value:__ (none)
  
    strokeOpacity:
      The stroke opacity (value between [0,1]).
      
      __Default value:__ (none)
  
    strokeDashOffset:
      The offset (in pixels) into which to begin drawing with the stroke dash array.
      
      __Default value:__ (none)
  
    strokeDash:
      An array of alternating stroke, space lengths for creating dashed or dotted lines.
      
      __Default value:__ (none)
  
    stroke:
      The stroke color.
      
      __Default value:__ (none)
  
    height:
      The default height of the single plot or each plot in a trellis plot when the visualization has a continuous (non-ordinal) y-scale with `rangeStep` = `null`.
      
      __Default value:__ `200`
  
    fillOpacity:
      The fill opacity (value between [0,1]).
      
      __Default value:__ (none)
  
    fill:
      The fill color.
      
      __Default value:__ (none)
  
    clip:
      Whether the view should be clipped.
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null -> false
            | _ -> true)
         [("clip",
            (((function
               | None  ->
                   `Null
               | Some v ->
                   ((fun
                     (b :
                     bool)  ->
                     (`Bool b : 
Yojson.Safe.json)))
                     v))
               x.clip));
         ("fill",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                     (s :
                     string) 
                     ->
                     (`String
                     s : 
Yojson.Safe.json)))
                    v)) x.fill));
         ("fillOpacity",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                     (i : int)
                      ->
                     (`Int i : 
Yojson.Safe.json)))
                    v))
              x.fillOpacity));
         ("height",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                     (i : int)
                      ->
                     (`Int i : 
Yojson.Safe.json)))
                    v))
              x.height));
         ("stroke",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                     (s :
                     string) 
                     ->
                     (`String
                     s : 
Yojson.Safe.json)))
                    v))
              x.stroke));
         ("strokeDash",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                     (l :
                     int list)
                      ->
                     let yojson_of_el
                     (i : int)
                     =
                     (`Int i : 
Yojson.Safe.json)
                      in
                     (`List
                     (List.map
                     yojson_of_el
                     l) : 
Yojson.Safe.json)))
                    v))
              x.strokeDash));
         ("strokeDashOffset",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                     (i : int)
                      ->
                     (`Int i : 
Yojson.Safe.json)))
                    v))
              x.strokeDashOffset));
         ("strokeOpacity",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                     (i : int)
                      ->
                     (`Int i : 
Yojson.Safe.json)))
                    v))
              x.strokeOpacity));
         ("strokeWidth",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                     (i : int)
                      ->
                     (`Int i : 
Yojson.Safe.json)))
                    v))
              x.strokeWidth));
         ("width",
           (((function
              | None  -> `Null
              | Some v ->
                  ((fun
                     (i : int)
                      ->
                     (`Int i : 
Yojson.Safe.json)))
                    v))
x.width))])                                                    
  let make ?(width= None) 
    ?(strokeWidth= None) 
    ?(strokeOpacity= None) 
    ?(strokeDashOffset= None) 
    ?(strokeDash= None) 
    ?(stroke= None)  ?(height=
None)  ?(fillOpacity=
None)  ?(fill= None) 
    ?(clip= None)  () =
    {
      clip;
      fill;
      fillOpacity;
      height;
      stroke;
      strokeDash;
      strokeDashOffset;
      strokeOpacity;
      strokeWidth;
      width
    } 
end and
VlOnlyGuideConfig:
                                                    sig
  type nonrec t =
    {
    shortTimeLabels:
      bool option }
  val to_yojson :
    t -> Yojson.Safe.json
  val make :
    ?shortTimeLabels:bool
      option -> unit -> t
end =
struct
  type nonrec t =
    {
    shortTimeLabels:
      bool option }

  (** Fields
  
    shortTimeLabels:
      Whether month names and weekday names should be abbreviated.
      
      __Default value:__  `false`
  *)
  let to_yojson x =
    `Assoc
      (List.filter
         (fun (k,v)  ->
            match v with
            | `Null ->
                false
            | _ -> true)
         [("shortTimeLabels",
            (((function
               | 
None  ->
                `Null
               | 
Some v ->
                ((fun
                (b :
                bool)  ->
                (`Bool b : 
Yojson.Safe.json)))
                v))
x.shortTimeLabels))])                                                         
  let make
    ?(shortTimeLabels=
None)  () =
    { shortTimeLabels } 
end
end
